[{"content":"出现了\n1 2 3 4 5 6 7 pnpm : 无法加载文件 D:\\develop\\nodejs\\pnpm.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft.com/fwl ink/?LinkID=135170 中的 about_Execution_Policies。 所在位置 行:1 字符: 1 + pnpm run dev + ~~~~ + CategoryInfo : SecurityError: (:) []，PSSecurityException + FullyQualifiedErrorId : UnauthorizedAccess 这个错误信息 无法加载文件 D:\\develop\\nodejs\\pnpm.ps1，因为在此系统上禁止运行脚本。 表明你的 PowerShell 执行策略阻止了 pnpm 脚本的运行。这是 Windows 系统为了安全而设置的默认策略。\n要解决这个问题，你需要修改 PowerShell 的执行策略。推荐的策略是 RemoteSigned，它允许你本地创建的脚本运行，但会要求从网上下载的脚本必须经过数字签名。\n解决方案步骤：\n以管理员身份打开 PowerShell。\n在 Windows 搜索栏中输入 \u0026ldquo;PowerShell\u0026rdquo;。 在搜索结果中找到 \u0026ldquo;Windows PowerShell\u0026rdquo;，然后右键点击它，选择 \u0026ldquo;以管理员身份运行\u0026rdquo;。 检查当前的执行策略（可选但推荐）：\n在 PowerShell 窗口中输入以下命令并按 Enter： 1 Get-ExecutionPolicy 这会显示当前的执行策略，很可能是 Restricted（受限）或 AllSigned。 设置新的执行策略：\n在 PowerShell 窗口中输入以下命令并按 Enter： 1 Set-ExecutionPolicy RemoteSigned 系统会提示你确认更改。输入 Y (表示 Yes) 并按 Enter。 验证策略是否已更改（可选但推荐）：\n再次输入 Get-ExecutionPolicy 并按 Enter。 确认显示的是 RemoteSigned。 关闭管理员 PowerShell 窗口。\n回到你的开发终端（Git Bash、CMD、VS Code Terminal 等），重新运行你的 pnpm 命令：\n1 pnpm run dev 现在，pnpm 应该能够正常运行了。\n解释和注意事项：\nRemoteSigned 策略： 这是一个比较平衡的策略。它允许你在本地编写或通过安装器（如 Node.js 或 pnpm）生成的脚本运行，同时仍然对从互联网下载的脚本保持一定的安全性（要求签名）。 其他策略： Restricted (默认)：不允许任何脚本运行。 Unrestricted：允许所有脚本运行，但会警告从互联网下载的脚本。安全性最低。 AllSigned：只允许由受信任的发布者签名的脚本运行。 安全性考虑： 更改执行策略会降低系统的安全性，但对于开发者来说，为了运行开发工具，这是必要的。RemoteSigned 是一个常用且相对安全的折衷方案。 如果只想针对当前用户生效： 你也可以使用 -Scope CurrentUser 参数，这样只会影响当前登录的用户，而不是整个系统： 1 Set-ExecutionPolicy RemoteSigned -Scope CurrentUser 但通常情况下，为了方便，开发者会选择影响全局。 ","date":"2025-06-20T17:42:20+08:00","permalink":"https://hublog.netlify.app/p/250620174220/","title":"Windows被禁止运行脚本"},{"content":"PTFans https://ptfans.cc\n2025-06-20 发现，注册时发现没有限制，可以尝试\n","date":"2025-06-20T15:14:16+08:00","permalink":"https://hublog.netlify.app/p/250620151416/","title":"PT站点收集"},{"content":"术语 ","date":"2025-06-18T15:14:03+08:00","permalink":"https://hublog.netlify.app/p/250618151403/","title":"Bittorrent指南"},{"content":"简介 WebDAV 的核心是 HTTP 协议的扩展，可以把 WebDAV 想象成一个“架设在互联网上的网络 U 盘”。它是一种技术标准，允许你像操作本地电脑里的文件一样，通过网络来管理（查看、上传、下载、修改、删除）远程服务器上的文件和文件夹。\nWindows 连接 WebDAV 有几种方法：\n文件资源管理器 cmd的 net use powershell的 Invoke-WebRequest 文件资源管理 cmd的 net use 待续\u0026hellip;\npowershell的 Invoke-WebRequest 待续\u0026hellip;\n","date":"2025-06-13T08:27:20+08:00","permalink":"https://hublog.netlify.app/p/250613082720/","title":"Windows连接WebDAV服务"},{"content":" win+s 搜索，找到防火墙和网络保护 点击允许应用通过防火墙 点击 更改设置 最下面找到 允许其他应用 浏览路径，设置需要开启的应用 添加，确定 ","date":"2025-06-12T12:44:24+08:00","permalink":"https://hublog.netlify.app/p/250612124424/","title":"Windows开启防火墙"},{"content":"简介 VirtualBox 是一款通用的全虚拟化软件，适用于 x86_64 硬件 (另有 7.1 版本适用于 macOS/Arm), 针对笔记本电脑、台式机、服务器和嵌入式使用。\n官网：https://www.virtualbox.org/\n安装 下载地址：https://www.virtualbox.org/wiki/Downloads\nWindows 下载：\nVirtualBox 7.1.10：点击下载 安装过程直接下一步就行，不建议更改安装位置（会使安装使用变得很繁琐）\nLinux 详细查看：https://www.virtualbox.org/wiki/Linux_Downloads\nMacos 下载：\nVirtualBox 7.1.10：点击下载 网络管理 这部分介绍 virtualbox 网络配置\n进入主页面，找到工具，点击右侧的设置，选中 网络，就可以看到网络的配置情况\n可以新建、删除，支持的网络类型有：\n仅主机（Host Only）网络：用于和主机宿主机通信，默认 IP 地址是192.168.56.1/24 Nat 网络：用于虚拟机内网连接互联网，默认为空，新建一个后默认 IP 地址是10.0.2.0/24 云网络： 点击对应的网络可以配置属性，包括不限于网卡、DHCP 服务器\n","date":"2025-06-12T09:55:27+08:00","permalink":"https://hublog.netlify.app/p/250612095527/","title":"Virtualbox，一款通用的全虚拟化软件"},{"content":"来源：https://linux.do/t/topic/694120\nwindows 1 irm ckey.run|iex linux 1 wget --no-check-certificate ckey.run -O ckey.run \u0026amp;\u0026amp; bash ckey.run Mac 1 curl -L -o ckey.run ckey.run \u0026amp;\u0026amp; bash ckey.run ","date":"2025-06-10T11:39:07+08:00","permalink":"https://hublog.netlify.app/p/250610113907/","title":"一键激活JetBrains全家桶"},{"content":" 名字 星级 评价 地址 语言 备注 qimgv ⭐ 无法在软件内预览下一张图片，只能切换后查看 https://github.com/easymodo/qimgv c++ 距 2025-06-09 发布版截止到 2021-11-30 qView ⭐⭐⭐ 极简图片查看，无法在软件内预览下一张图片，只能切换后查看 https://github.com/jurplel/qView c++ 距 2025-06-09 发布版截止到 2023-8-16 ImageGlass ⭐⭐⭐⭐ 软件内可预览下一张图片，速度稍慢 https://github.com/d2phap/ImageGlass c# 距 2025-06-09 发布版截止到 2025-5-19 参考：\nhttps://zhuanlan.zhihu.com/p/30941577162\n","date":"2025-06-09T08:30:02+08:00","permalink":"https://hublog.netlify.app/p/250609083002/","title":"图片查看，预览软件"},{"content":"在 Windows 中，可以通过以下步骤来关闭文件管理器默认使用缩略图查看文件，以减少在访问大量文件时的延迟。这对于使用 rclone 挂载的文件尤其重要，因为处理缩略图会增加加载时间。\n关闭缩略图的步骤： 打开文件资源管理器：\n可以通过点击任务栏的文件夹图标，或使用快捷键 Win + E 打开文件资源管理器。 访问“选项”：\n在文件管理器中，点击上方的“查看”选项卡。 然后在右侧找到“选项”或“更改文件夹和搜索选项”。 选择“查看”选项卡：\n在弹出的窗口中，选择“查看”选项卡。 更改文件夹选项：\n在“高级设置”部分，找到“始终显示图标，从不显示缩略图”这一选项。 选中“始终显示图标，从不显示缩略图”。 应用更改：\n点击“应用”按钮，然后点击“确定”以保存更改。 ","date":"2025-06-05T10:13:06+08:00","permalink":"https://hublog.netlify.app/p/250605101306/","title":"关闭Windows文件管理器默认总是使用缩略图打开"},{"content":"电视剧 梦魇绝镇 大地永存 电影 ","date":"2025-06-04T16:47:33+08:00","permalink":"https://hublog.netlify.app/p/250604164733/","title":"影视，电视，电影观看记录"},{"content":"简介 Navidrome 是一个开源的、自托管的音乐服务器和流媒体应用程序。 简单来说，你可以把它想象成你自己的私人 Spotify 或 Apple Music。\n官网：https://www.navidrome.org/\n文档：https://www.navidrome.org/docs/\n主要特点： 自托管： 你需要自己安装和运行 Navidrome 服务器，这意味着你完全控制你的音乐数据。 支持多种音频格式： 兼容 MP3, FLAC, AAC, ALAC, OPUS, DSD 等多种格式。 支持多种客户端： 可以通过网页浏览器、移动应用程序（如 Substreamer, Ultrasonic, Play:Sub）或其他 Subsonic 兼容客户端访问你的音乐库。 元数据管理： 支持读取和管理音乐文件的元数据（如专辑、艺术家、标题等）。 扫描和索引： 自动扫描你的音乐文件夹并将音乐添加到你的库中。 播放列表支持： 可以创建和管理播放列表。 用户管理： 支持创建多个用户，并为每个用户设置不同的权限。 简单易用： 界面简洁直观，易于上手。 开源免费： 完全免费使用，并且可以自由地修改和分发。 部署 Docker docker-compose\n1 2 mkdir -p /opt/service/navidrome cd /opt/service/navidrome 1 vim docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 services: navidrome: image: deluan/navidrome:latest container_name: navidrome # user: 1000:1000 # should be owner of volumes ports: - \u0026#34;4533:4533\u0026#34; restart: unless-stopped environment: # 如果为空，需要使用 {} # Optional: put your config options customization here. Examples: # ND_LOGLEVEL: debug DefaultLanguage: zh-Hans volumes: - \u0026#34;./navidrome_data:/data\u0026#34; - \u0026#34;/mnt/music:/music:ro\u0026#34; 1 docker compose up ","date":"2025-06-02T19:17:01+08:00","permalink":"https://hublog.netlify.app/p/250602191701/","title":"Navidrome，自建音乐流媒体服务"},{"content":" YOUR_ADDRESS：自定义域名 YOUR_TOKEN：alist 的令牌 YOUR_WORKER_ADDRESS：worker 所在的网址 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 // src/const.ts var ADDRESS = \u0026#34;YOUR_ADDRESS\u0026#34;; var TOKEN = \u0026#34;YOUR_TOKEN\u0026#34;; var WORKER_ADDRESS = \u0026#34;YOUR_WORKER_ADDRESS\u0026#34;; // src/verify.ts var verify = async (data, _sign) =\u0026gt; { const signSlice = _sign.split(\u0026#34;:\u0026#34;); if (!signSlice[signSlice.length - 1]) { return \u0026#34;expire missing\u0026#34;; } const expire = parseInt(signSlice[signSlice.length - 1]); if (isNaN(expire)) { return \u0026#34;expire invalid\u0026#34;; } if (expire \u0026lt; Date.now() / 1e3 \u0026amp;\u0026amp; expire \u0026gt; 0) { return \u0026#34;expire expired\u0026#34;; } const right = await hmacSha256Sign(data, expire); if (_sign !== right) { return \u0026#34;sign mismatch\u0026#34;; } return \u0026#34;\u0026#34;; }; var hmacSha256Sign = async (data, expire) =\u0026gt; { const key = await crypto.subtle.importKey( \u0026#34;raw\u0026#34;, new TextEncoder().encode(TOKEN), { name: \u0026#34;HMAC\u0026#34;, hash: \u0026#34;SHA-256\u0026#34; }, false, [\u0026#34;sign\u0026#34;, \u0026#34;verify\u0026#34;] ); const buf = await crypto.subtle.sign( { name: \u0026#34;HMAC\u0026#34;, hash: \u0026#34;SHA-256\u0026#34; }, key, new TextEncoder().encode(`${data}:${expire}`) ); return btoa(String.fromCharCode(...new Uint8Array(buf))).replace(/\\+/g, \u0026#34;-\u0026#34;).replace(/\\//g, \u0026#34;_\u0026#34;) + \u0026#34;:\u0026#34; + expire; }; // src/handleDownload.ts async function handleDownload(request) { const origin = request.headers.get(\u0026#34;origin\u0026#34;) ?? \u0026#34;*\u0026#34;; const url = new URL(request.url); const path = decodeURIComponent(url.pathname); const sign = url.searchParams.get(\u0026#34;sign\u0026#34;) ?? \u0026#34;\u0026#34;; const verifyResult = await verify(path, sign); if (verifyResult !== \u0026#34;\u0026#34;) { const resp2 = new Response( JSON.stringify({ code: 401, message: verifyResult }), { headers: { \u0026#34;content-type\u0026#34;: \u0026#34;application/json;charset=UTF-8\u0026#34; } } ); resp2.headers.set(\u0026#34;Access-Control-Allow-Origin\u0026#34;, origin); return resp2; } let resp = await fetch(`${ADDRESS}/api/fs/link`, { method: \u0026#34;POST\u0026#34;, headers: { \u0026#34;content-type\u0026#34;: \u0026#34;application/json;charset=UTF-8\u0026#34;, Authorization: TOKEN }, body: JSON.stringify({ path }) }); let res = await resp.json(); if (res.code !== 200) { return new Response(JSON.stringify(res)); } request = new Request(res.data.url, request); if (res.data.header) { for (const k in res.data.header) { for (const v of res.data.header[k]) { request.headers.set(k, v); } } } let response = await fetch(request); while (response.status \u0026gt;= 300 \u0026amp;\u0026amp; response.status \u0026lt; 400) { const location = response.headers.get(\u0026#34;Location\u0026#34;); if (location) { if (location.startsWith(`${WORKER_ADDRESS}/`)) { request = new Request(location, request); return await handleRequest(request); } else { request = new Request(location, request); response = await fetch(request); } } else { break; } } response = new Response(response.body, response); response.headers.delete(\u0026#34;set-cookie\u0026#34;); response.headers.set(\u0026#34;Access-Control-Allow-Origin\u0026#34;, origin); response.headers.append(\u0026#34;Vary\u0026#34;, \u0026#34;Origin\u0026#34;); return response; } // src/handleOptions.ts function handleOptions(request) { const corsHeaders = { \u0026#34;Access-Control-Allow-Origin\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Access-Control-Allow-Methods\u0026#34;: \u0026#34;GET,HEAD,POST,OPTIONS\u0026#34;, \u0026#34;Access-Control-Max-Age\u0026#34;: \u0026#34;86400\u0026#34; }; let headers = request.headers; if (headers.get(\u0026#34;Origin\u0026#34;) !== null \u0026amp;\u0026amp; headers.get(\u0026#34;Access-Control-Request-Method\u0026#34;) !== null) { let respHeaders = { ...corsHeaders, \u0026#34;Access-Control-Allow-Headers\u0026#34;: request.headers.get(\u0026#34;Access-Control-Request-Headers\u0026#34;) || \u0026#34;\u0026#34; }; return new Response(null, { headers: respHeaders }); } else { return new Response(null, { headers: { Allow: \u0026#34;GET, HEAD, POST, OPTIONS\u0026#34; } }); } } // src/handleRequest.ts async function handleRequest(request) { if (request.method === \u0026#34;OPTIONS\u0026#34;) { return handleOptions(request); } return await handleDownload(request); } // src/index.ts var src_default = { async fetch(request, env, ctx) { return await handleRequest(request); } }; export { src_default as default }; //# sourceMappingURL=index.js.map ","date":"2025-05-31T18:59:15+08:00","permalink":"https://hublog.netlify.app/p/250531185915/","title":"alist-proxy，alist的代理下载，支持Cloudflare部署"},{"content":"简介 一个快速、简单、免费的 Bittorrent 客户端\n官网：https://transmissionbt.com/\n安装 包管理器 1 sudo apt install transmission-daemon Docker docker compose\ngists/transmission:latest 镜像，支持多种镜像\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 services: transmission: container_name: transmission image: gists/transmission:latest ports: - \u0026#34;9091:9091\u0026#34; - \u0026#34;51413:51413\u0026#34; volumes: - \u0026#34;./transmission_data:/data\u0026#34; - \u0026#34;/mnt/p1/film:/root/film\u0026#34; - \u0026#34;/mnt/p1/porn:/root/porn\u0026#34; - \u0026#34;/mnt/p1/bt_downloads:/root/bt_downloads\u0026#34; environment: - USERNAME=username - PASSWORD=password restart: unless-stopped logging: driver: json-file options: max-size: \u0026#34;10m\u0026#34; max-file: \u0026#34;3\u0026#34; 配置 修改配置需要停用 transmission-daemon 服务，否则所做的一切配置都不会保存\n1 sudo systemctl stop transmission-daemon.service 1 sudo vim /etc/transmission-daemon/settings.json 一般需要修改：\n默认下载路径 找到下面这一项，后面的路径是默认下载的路径，你可以改成你想要的路径\n1 \u0026#34;download-dir\u0026#34;: \u0026#34;/home/share/downloads\u0026#34; 设置好后，不要忘记执行一下赋权命令，使下载目录可以读写，以免发生不必要的错误：\n1 2 sudo mkdir -p /mnt/p1/bt_downloads sudo chmod -R 777 /mnt/p1/bt_downloads 配置 WebUI\n按照下面的进行设置即可\n1 2 3 4 5 \u0026#34;rpc-authentication-required\u0026#34;: true \u0026#34;rpc-enabled\u0026#34;: true \u0026#34;rpc-password: \u0026#34;这里改成你自己的密码\u0026#34; \u0026#34;rpc-username\u0026#34;:\u0026#34;改成你自己的用户名\u0026#34; \u0026#34;rpc-whitelist-enabled\u0026#34;: false 不启用白名单，防止登不上 完整如下，仅供参考\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 { \u0026#34;blocklist-enabled\u0026#34;: 0, \u0026#34;download-dir\u0026#34;: \u0026#34;/mnt/p1/bt_downloads\u0026#34;, \u0026#34;download-limit\u0026#34;: 100, \u0026#34;download-limit-enabled\u0026#34;: 0, \u0026#34;encryption\u0026#34;: 1, \u0026#34;max-peers-global\u0026#34;: 200, \u0026#34;peer-port\u0026#34;: 51413, \u0026#34;pex-enabled\u0026#34;: 1, \u0026#34;port-forwarding-enabled\u0026#34;: 0, \u0026#34;rpc-authentication-required\u0026#34;: true, \u0026#34;rpc-enabled\u0026#34;: true, \u0026#34;rpc-password\u0026#34;: \u0026#34;transmission\u0026#34;, \u0026#34;rpc-port\u0026#34;: 9091, \u0026#34;rpc-username\u0026#34;: \u0026#34;transmission\u0026#34;, \u0026#34;rpc-whitelist-enabled\u0026#34;: false, \u0026#34;rpc-whitelist\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;upload-limit\u0026#34;: 100, \u0026#34;upload-limit-enabled\u0026#34;: 0 } 配置完这些基本就足够用了，如果还想进一步了解各参数的作用，可以参考官方文档以及各参数的中英对照\n查看状态\n1 systemctl status transmission-daemon.service 启动\n1 sudo systemctl start transmission-daemon.service 开机自启动\n1 sudo systemctl enable transmission-daemon.service WebUI\nIP 加上端口号 9091，输入刚刚设置的用户名和密码进行登录\n备份恢复 ","date":"2025-05-31T17:16:38+08:00","permalink":"https://hublog.netlify.app/p/250531171638/","title":"transmission，Bittorrent客户端"},{"content":"https://fiber.google.com/speedtest/\nhttps://speedtest.xfinity.com/\nhttps://fast.com/\nhttps://www.cccitu.com/ez8eu3ux4.html\nhttps://test.ustc.edu.cn/\nhttp://speedtest.im/\nhttps://www.speakeasy.net/speedtest/\n","date":"2025-05-30T15:02:27+08:00","permalink":"https://hublog.netlify.app/p/250530150227/","title":"speedtest测速网站"},{"content":"https://ytbtu.shijuezu.com/\n","date":"2025-05-28T15:08:17+08:00","permalink":"https://hublog.netlify.app/p/250528150817/","title":"YouTube封面图下载网站"},{"content":"","date":"2025-05-23T09:54:52+08:00","permalink":"https://hublog.netlify.app/p/250523095452/","title":"AI画图提示词，draw prompt"},{"content":"简介 Vimium 是一款浏览器扩展程序，它以 Vim 编辑器的精神，提供基于键盘的网页导航和控制功能。\nwiki：https://github.com/philc/vimium/wiki\n安装 Chrome: Chrome web store Edge: Edge Add-ons Firefox: Firefox Add-ons 快捷键 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ? show the help dialog for a list of all available keys h scroll left j scroll down k scroll up l scroll right gg scroll to top of the page G scroll to bottom of the page d scroll down half a page u scroll up half a page f open a link in the current tab F open a link in a new tab r reload gs view source i enter insert mode -- all commands will be ignored until you hit Esc to exit yy copy the current url to the clipboard yf copy a link url to the clipboard gf cycle forward to the next frame gF focus the main/top frame ","date":"2025-05-20T10:42:04+08:00","permalink":"https://hublog.netlify.app/p/250520104204/","title":"vimium，提供基于键盘的网页导航和控制"},{"content":"简介 rsync (remote sync) 是一个快速且极其通用的文件复制工具。它可以在本地计算机之间、本地计算机和远程计算机之间以及远程计算机之间同步文件和目录。 rsync 的关键特性是它只传输源文件和目标文件之间 差异的部分，从而大大减少了网络传输量，使其成为备份、镜像和数据迁移的理想选择。\n主要特点和优势 增量传输： 这是 rsync 最重要的特性。 它只传输源文件和目标文件之间更改的部分，而不是整个文件。 这显著提高了同步速度，尤其是在处理大型文件或通过慢速网络连接传输数据时。 压缩： rsync 可以压缩数据以减少传输量，进一步提高速度。 安全性： rsync 可以通过 SSH (Secure Shell) 等安全协议进行传输，确保数据在传输过程中的机密性和完整性。 灵活性： rsync 提供了大量的选项，允许用户精确控制同步过程，例如： 排除特定文件或目录： 可以通过指定模式来排除不需要同步的文件或目录。 保留文件属性： 可以保留文件权限、所有者、时间戳等属性。 删除目标文件： 可以删除目标目录中源目录中不存在的文件。 模拟运行： 可以进行模拟运行，查看同步过程，而不实际修改文件。 支持多种传输协议： rsync 可以使用 rsh、ssh 或直接 TCP 连接进行传输。 镜像网站： rsync 非常适合镜像网站，因为它能够快速有效地同步网站内容。 备份： rsync 经常被用于创建备份，因为它只传输更改的部分，从而节省时间和存储空间。 免费开源： rsync 是一个免费且开源的工具，可以自由使用和修改。 工作原理 rsync 的增量传输算法的核心是 差分算法 (delta transfer algorithm)。 它大致的工作流程如下：\n计算校验和： rsync 首先计算源文件和目标文件的校验和 (checksum)。 比较校验和： 它比较源文件和目标文件的校验和，以确定哪些部分相同，哪些部分不同。 传输差异： 对于不同的部分，rsync 只传输差异的数据块，而不是整个文件。 重建文件： 目标端接收到差异的数据块后，根据已有的目标文件和接收到的差异数据块，重建完整的目标文件。 语法 语法：\n1 rsync [OPTIONS] SOURCE DESTINATION OPTIONS: 各种选项，用于控制 rsync 的行为。 SOURCE: 源文件或目录。 DESTINATION: 目标文件或目录。 选项：\n-v: verbose，显示详细的同步过程。 -a: archive，归档模式，保留文件属性（权限、所有者、时间戳等），并递归复制目录。 这是最常用的选项，通常用于备份和同步。 -z: compress，压缩数据以减少传输量。 -r: recursive，递归复制目录。 -u: update，只更新目标文件中比源文件旧的文件。 -n: dry-run，模拟运行，不实际修改文件。 --delete: 删除目标目录中源目录中不存在的文件。 --exclude=PATTERN: 排除匹配 PATTERN 的文件或目录。 --include=PATTERN: 包含匹配 PATTERN 的文件或目录，即使它被其他排除规则排除。 -e: 指定使用的远程 shell，例如 -e ssh 使用 SSH 进行传输。 基本用法 将本地目录 source_dir 同步到远程服务器 user@remote_host:/path/to/destination_dir，使用 SSH 进行传输，并保留文件属性：\n1 rsync -avz -e ssh source_dir user@remote_host:/path/to/destination_dir 将远程服务器 user@remote_host:/path/to/source_dir 同步到本地目录 destination_dir，使用 SSH 进行传输，并删除目标目录中源目录中不存在的文件：\n1 rsync -avz -e ssh --delete user@remote_host:/path/to/source_dir destination_dir 将本地目录 source_dir 同步到本地目录 destination_dir，排除所有 .log 文件：\n1 rsync -avz --exclude=\u0026#39;*.log\u0026#39; source_dir destination_dir ","date":"2025-05-10T11:01:45+08:00","permalink":"https://hublog.netlify.app/p/250510110145/","title":"rsync，快速且极其通用的文件复制工具"},{"content":"国内版 中山大学教育版 https://365.kdocs.cn/3rd/work/download/WeBHVP2r5aI7rgtz\n海外版 https://www.wps.com/zh-hant/\n","date":"2025-05-07T23:06:28+08:00","permalink":"https://hublog.netlify.app/p/250507230628/","title":"wps教育版，无广告版本"},{"content":"简介 Sink 是一款简单、快速、安全的链路缩短器，配备分析功能，100% 在 Cloudflare 上运行。\n特性 URL Shortening: Compress your URLs to their minimal length. Analytics: Monitor link analytics and gather insightful statistics. Serverless: Deploy without the need for traditional servers. Customizable Slug: Support for personalized slugs and case sensitivity. AI Slug: Leverage AI to generate slugs. Link Expiration: Set expiration dates for your links. URL 缩短： 将您的 URL 压缩到最短长度。 分析： 监控链接分析并收集有价值的统计数据。 无服务器： 无需传统服务器即可部署。 自定义 Slug： 支持个性化 Slug 和区分大小写。 AI Slug： 利用 AI 生成 Slug。 链接过期： 为您的链接设置过期日期。 预览 体验 Experience the demo at Sink.Cool. Log in using the Site Token below:\n1 Site Token: SinkCool 部署 Fork 仓库到您的 GitHub 账户。\n在 Cloudflare Pages 中创建一个项目。\n选择 Sink 仓库并选择 Nuxt.js 预设。\n配置以下环境变量：\nNUXT_SITE_TOKEN: 必须长于 8 个字符。此令牌授予访问您仪表盘的权限。 NUXT_CF_ACCOUNT_ID: 找到您的 账户 ID。 NUXT_CF_API_TOKEN: 创建一个至少具有 Account.Account Analytics 权限的 Cloudflare API 令牌。 请参阅参考资料。 保存并部署项目。\n取消部署，然后导航到 设置 -\u0026gt; 绑定 -\u0026gt; 添加：\nKV 命名空间: 将变量名 KV 绑定到一个 KV 命名空间（在 存储 \u0026amp; 数据库 -\u0026gt; KV 下创建一个新的）。 Workers AI (可选): 将变量名 AI 绑定到 Workers AI Catalog。 Analytics Engine: 在 Workers \u0026amp; Pages 中，转到右侧的 账户详细信息，找到 Analytics Engine，然后单击 设置 以启用免费版本。 返回到 设置 -\u0026gt; 绑定 -\u0026gt; 添加 并选择 Analytics engine。 将变量名 ANALYTICS 绑定到 sink 数据集。 重新部署项目。\n更新代码，请参考官方 GitHub 文档 从 Web UI 同步 Fork 分支。\n","date":"2025-05-07T10:16:03+08:00","permalink":"https://hublog.netlify.app/p/250507101603/","title":"sink，一款简单、快速、安全的链路缩短器，配备分析功能"},{"content":"今天突然发现Firefox也支持垂直标签页了，效果看上去还不错哦\n","date":"2025-05-06T12:44:20+08:00","permalink":"https://hublog.netlify.app/p/250506124420/","title":"Firefox支持垂直标签页"},{"content":"优化前 先看看 Google 搜索显示的结果\n结果简洁而不简单\n这是 bing 搜索默认显示的结果\n“毒瘤”CSDN占据搜索前列 默认一大屏摘要，默认很多情况并非是需要的内容，向下寻找需要滑动多次滚轮，而每次都是这种，体验可想而知 这是优化后的结果\n优化后 优化了什么？\n去掉了“毒瘤”CSDN 去掉了 bing 默认一大屏摘要，实际并没有什么用，默认推荐还是“毒瘤”CSDN 优化方式 如何优化？\n两个插件：\nstylebot uBlacklist stylebot Stylebot 是一款功能强大的浏览器扩展程序，支持 Chrome、Firefox 和 Edge 等主流浏览器。能让用户通过直观 UI 操作或 CSS 代码编辑器自定义网页样式，以优化阅读体验或实现个性化定制。\n进入设置，样式，添加新样式\nURL\n1 https://cn.bing.com 样式\n1 2 3 .b_ans { display: none; } uBlacklist uBlacklist 是一款支持 Chrome、Firefox、Safari 等浏览器的扩展程序，能通过匹配模式或正则表达式设定规则，屏蔽指定网站出现在谷歌、必应、DuckDuckGo 等多个主流搜索引擎的结果中，还具备云同步和订阅公共规则集等功能。\n进入设置，常规，添加以下内容，保存\ncsdn：\n1 2 3 4 5 6 *://*.csdn.net/* *://*.csdn.com/* *://*.csdnimg.cn/* *://*.gitcode.com/* *://*.gitcode.net/* *://*.gitcode.host/* 彩蛋 不做任何设置，使用 bing-cn 国际版效果也比国内版好\n","date":"2025-05-04T12:21:28+08:00","permalink":"https://hublog.netlify.app/p/250504122128/","title":"优化bing搜索结果"},{"content":"简介 FOFA 是一款网络空间测绘的搜索引擎，英文全称为 “Fingerprinting Organizations with Advanced Tools”，由北京华顺信安科技有限公司开发。以下是其相关介绍：\n功能特点 资产发现与指纹识别：能快速识别和收录网站、服务器、路由器、摄像头等各种网络资产，并通过网络响应等信息对设备、操作系统、应用程序等进行精确指纹识别，帮助用户发现特定类型的设备。 漏洞扫描与安全评估：配合其他工具，可利用收集的数据进行漏洞扫描，帮助企业了解网络暴露面，及时发现潜在安全威胁。 定制搜索与数据分析：提供大量搜索语法和过滤器，用户可根据 IP、域名、端口、协议等进行精确搜索，还能通过关键词组合、逻辑运算符等进行高级搜索，以满足精细化需求。 图形化界面与历史数据：提供图形化搜索界面，用户可直观查看搜索结果、图表和图谱，更好地理解网络设备布局。同时记录历史搜索结果，方便用户查看设备和服务的历史信息，了解网络发展变化。 API 支持：提供 API，用户能够通过编程方式访问搜索引擎，将其功能集成到自己的应用程序或工作流程中。 应用场景 网络安全领域：安全研究人员和企业安全团队可用于资产发现和漏洞挖掘，帮助企业梳理公网暴露面，保护互联网资产安全。白帽子团体也可通过它进行漏洞挖掘，判断漏洞影响范围，帮助企业应对网络安全问题。 其他领域：高校或机构研究人员可通过它快速确认某一款产品在全球的资产分布情况，为研究提供数据支撑。个人也可用于寻找一些有趣的东西，如通过搜索特定关键词找到使用特定框架搭建的网站等。 搜索语法 FOFA 的搜索语法丰富多样，以下是一些常见的搜索语法：\n基本语法结构：keyword1=\u0026quot;value1\u0026quot; keyword2=\u0026quot;value2\u0026quot;，多个查询条件之间默认是 “与”（AND）关系。 常用查询字段 port：用于搜索特定端口开放的资产，如port=\u0026quot;80\u0026quot;表示搜索开放 80 端口的资产。 domain：搜索与某个域名相关的资产，例如domain=\u0026quot;example.com\u0026quot;。 title：搜索网页标题中包含特定关键词的资产，如title=\u0026quot;admin\u0026quot;。 header：搜索 HTTP 头部中包含特定关键词的资产，例如header=\u0026quot;nginx\u0026quot;。 body：搜索网页正文中包含特定关键词的资产，如body=\u0026quot;login\u0026quot;。 protocol：搜索使用特定协议的资产，如protocol=\u0026quot;http\u0026quot;。 country：搜索位于某个国家的资产，country=\u0026quot;CN\u0026quot;表示搜索中国的资产。 status_code：搜索返回特定 HTTP 状态码的资产，如status_code=\u0026quot;200\u0026quot;。 as_number：搜索属于特定自治系统编号（AS 号）的资产，例如as_number=\u0026quot;AS15169\u0026quot;。 app：搜索使用特定软件或技术的资产，如app=\u0026quot;Apache\u0026quot;。 逻辑运算符 AND：默认逻辑运算符，例如ip=\u0026quot;1.1.1.1\u0026quot; port=\u0026quot;80\u0026quot;表示搜索 IP 为1.1.1.1且端口为 80 的资产。 OR：逻辑 “或” 运算，如ip=\u0026quot;1.1.1.1\u0026quot; OR ip=\u0026quot;8.8.8.8\u0026quot;表示搜索 IP 为1.1.1.1或8.8.8.8的资产。 NOT：排除特定条件，例如ip=\u0026quot;1.1.1.1\u0026quot; NOT port=\u0026quot;80\u0026quot;表示搜索 IP 为1.1.1.1但端口不为 80 的资产。 模糊查询和通配符 *：通配符，可以匹配任意字符。 ~：模糊查询，如body~=\u0026quot;keyword\u0026quot;表示搜索网页正文中包含近似关键词的内容。 其他语法 city：按城市筛选，如city=\u0026quot;Hangzhou\u0026quot;搜索位于杭州的资产。 os：按操作系统筛选，os=\u0026quot;Windows\u0026quot;搜索运行 Windows 操作系统的资产。 cert：按证书相关信息检索，如cert=\u0026quot;google\u0026quot;搜索证书中带有 “google” 的资产。 ports：搜索同时开放多个端口的 IP 资产，如ports=\u0026quot;3306,443,22\u0026quot;搜索同时开启 3306、443 和 22 端口的 IP。 ports==\u0026quot;3306,443,22\u0026quot;则表示搜索只开启这三个端口的 IP。 after和before：按时间筛选，after=\u0026quot;2017\u0026quot; \u0026amp;\u0026amp; before=\u0026quot;2017-10-01\u0026quot;表示搜索 2017 年 1 月 1 日之后且在 2017 年 10 月 1 日之前的数据。 此外，FOFA 还支持子网查询，使用 CIDR 表示法对特定子网范围进行查询，如ip=\u0026quot;220.181.111.1/24\u0026quot;\n。同时，也可以使用括号和逻辑运算符组合复杂的搜索条件，进行更精确的筛选。\n","date":"2025-05-04T12:06:15+08:00","permalink":"https://hublog.netlify.app/p/250504120615/","title":"fofa，搜索语法"},{"content":"某个分支下的某个文件的链接格式\n1 https://github.com/{用户名}/{仓库名}/blob/{分支名}/{文件路径} 某个分支下的某个文件的直接下载链接格式\n1 https://raw.githubusercontent.com/{用户名}/{仓库名}/{分支名}/{文件路径} 某个分支以 ZIP 格式直接下载的链接\n1 https://github.com/{用户名}/{仓库名}/archive/refs/heads/{分支名}.zip Github 代理 GitHub 文件 , Releases , archive , gist , raw.githubusercontent.com 文件代理加速下载服务.\n代理链接 https://ghfast.top/ https://gh-proxy.com/ https://gh-proxy.net/ 镜像站点搜集：https://github.com/hunshcn/gh-proxy/issues/116\n使用方法 原始链接 https://raw.githubusercontent.com/username/repo/main/file.txt\n代理链接 https://gh-proxy.com/raw.githubusercontent.com/username/repo/main/file.txt\n代理链接 https://gh-proxy.com/https://raw.githubusercontent.com/username/repo/main/file.txt\n例如：\n1 https://ghfast.top/https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip 1 https://testingcf.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@sing/geo/geosite/category-ads-all.srs 自建 GitHub 代理 项目：\nhttps://github.com/yangyanggu/gh-proxy-page\nhttps://github.com/hunshcn/gh-proxy\nAPI 用户 查看用户信息\n1 https://api.github.com/users/{username} 仓库 查看仓库信息\n1 https://api.github.com/repos/{username}/{repo_name} ","date":"2025-05-04T09:31:08+08:00","permalink":"https://hublog.netlify.app/p/250504093108/","title":"Github链接指南，Github代理"},{"content":"简介 Paru 是一个轻量级的 AUR（Arch User Repository）助手，用于在 Arch Linux 及其衍生版上方便地安装和管理用户提交的软件包。与其他 AUR 助手相比，Paru 的特点包括：\n性能优越：Paru 使用 Rust 编写，具有较高的性能和较低的资源占用。 用户友好的界面：提供了简洁的命令行界面，支持自动补全和简化的命令选项。 支持多种功能：除了基本的安装、升级和删除软件包外，还支持搜索、查看软件包信息、处理依赖关系等功能。 内置的 AUR 和官方仓库支持：可以同时处理 AUR 和官方软件包，提高了管理的便利性。 安装 1 sudo pacman -S paru 常用命令 更新所有已安装的软件包\n1 paru -Syu 安装软件（注意，不要加 sudo）\n1 paru -S \u0026lt;package_name\u0026gt; 模糊查询软件\n1 paru -Ss \u0026lt;package_name\u0026gt; 卸载软件\n1 paru -R \u0026lt;package_name\u0026gt; 卸载软件并删除依赖\n1 paru -Rns \u0026lt;package_name\u0026gt; 列举所有已经安装的软件\n1 paru -Q 列举所有已经安装的软件，不带版本号\n1 paru -Qq 清理未使用的依赖\n1 paru -Rns $(paru -Qdtq) paru -Qdtq：这个部分会列出所有未被其他已安装软件包依赖的孤立依赖包。 -Q：查询已安装的软件包。 -d：仅显示依赖包。 -t：仅显示孤立的（未被其他包依赖的）包。 -q：仅输出包名称，不带版本信息。 paru -Rns：这个部分会卸载那些孤立依赖包。 -R：卸载软件包。 -n：同时删除未使用的依赖。 -s：同时删除配置文件。 ","date":"2025-05-02T17:34:51+08:00","permalink":"https://hublog.netlify.app/p/250502173451/","title":"Paru，Archlinux轻量级的AUR管理器"},{"content":"简介 fail2ban 是一个开源的入侵防御软件，主要用于保护 Linux 服务器和其他 Unix 系统免受暴力破解和其他恶意攻击。它通过监视日志文件来检测可疑活动，并自动采取措施（通常是禁止 IP 地址）来防止进一步的攻击。\n主要功能 自动禁止 IP 地址: 当检测到特定服务（如 SSH、FTP、HTTP 等）中的多次失败登录尝试时，fail2ban 会自动使用防火墙（如 iptables）禁止这些 IP 地址。 日志监控: fail2ban 监控系统日志（如 /var/log/auth.log 或 /var/log/secure），并根据预定义的规则（过滤器）分析日志内容。 可配置性: 用户可以根据需求自定义配置文件，设置不同的监控规则、禁止时间、允许的失败尝试次数等。 多种服务支持: fail2ban 支持多种服务的保护，包括 SSH、HTTP、FTP、SMTP 等。 邮件通知: 可以配置邮件通知功能，当 IP 被禁止时，系统会自动发送通知邮件给管理员。 可扩展性: 用户可以创建自定义过滤器和动作，以适应特定的需求。 工作原理 配置: 用户设置 fail2ban 的配置文件，定义需要监控的服务、日志文件路径、过滤规则等。 监控: fail2ban 定期扫描指定的日志文件，查找符合过滤器条件的日志条目。 触发: 如果在设定的时间窗口内，某个 IP 地址的失败尝试次数超过了允许的最大值，fail2ban 会执行相应的动作（如禁止该 IP）。 解除禁止: 被禁止的 IP 地址在设定的时间后会自动解除禁止，或者管理员可以手动解除。 部署 Debian / Ubuntu\n1 2 sudo apt update sudo apt install fail2ban 配置 准备工作 配置文件所在的位置：\n1 /etc/fail2ban 新建 jail.local\n1 sudo vim jail.local 简单配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #DEFAULT-START [DEFAULT] bantime = 600 findtime = 300 maxretry = 5 banaction = iptables-allports action = %(action_mwl)s backend = systemd #DEFAULT-END [sshd] ignoreip = 127.0.0.1/8 enabled = true filter = sshd port = 22 maxretry = 5 findtime = 300 bantime = 600 banaction = iptables-allports action = %(action_mwl)s logpath = /var/log/auth.log 配置参考了：\n1panel blog 多种策略 此 Fail2Ban 配置通过多个 jail 实现更精细的 SSH 保护，根据登录失败尝试的频率和时间段，应用不同的禁止时长：\nDEFAULT: 设置全局默认值，使用 systemd 日志后端，iptables-allports 禁止所有端口，并发送邮件告警。 sshd-short: 5 分钟内 5 次失败尝试 -\u0026gt; 禁止 10 分钟 sshd-medium: 30 分钟内 10 次失败尝试 -\u0026gt; 禁止 1 小时 sshd-long: 24 小时内 30 次失败尝试 -\u0026gt; 禁止 100 天 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 # /etc/fail2ban/jail.local (或者 /etc/fail2ban/jail.d/custom.conf) # ; 表示单行注释 [DEFAULT] bantime = 600 ; 封禁时间 findtime = 300 ; 指定时间内 maxretry = 5 ; 最大尝试次数 backend = systemd ; 使用 systemd 日志后端 banaction = iptables-allports ; 使用 iptables 阻止所有端口 action = %(action_mwl)s ; 邮件告警 + 日志记录 [sshd-short] enabled = true filter = sshd ; 使用 sshd 过滤器 logpath = /var/log/auth.log ; SSH 日志文件 port = ssh findtime = 300 ; 5 分钟 maxretry = 5 bantime = 600 ; 10 分钟 (5分钟内超过5次) [sshd-medium] enabled = true filter = sshd logpath = /var/log/auth.log port = ssh findtime = 1800 ; 30 分钟 maxretry = 10 bantime = 3600 ; 1 小时 (30分钟内超过10次) [sshd-long] enabled = true filter = sshd logpath = /var/log/auth.log port = ssh findtime = 86400 ; 24 小时 maxretry = 30 bantime = 8640000 ; 100 天 (24小时超过30次) 服务 启动服务\n1 sudo systemctl start fail2ban 常见命令 查看 Fail2Ban 中被禁止的 IP 地址\n1 fail2ban-client status \u0026lt;jail_name\u0026gt; 查看名为 sshd 的监狱的被禁止 IP\n1 fail2ban-client status sshd 如果自己忘记了密码，被 fail2ban 阻止了，解除命令\n1 sudo fail2ban-client set \u0026lt;jail_name\u0026gt; unbanip \u0026lt;ip_address\u0026gt; 例如\n1 sudo fail2ban-client set ssh unbanip 192.168.1.100 ","date":"2025-05-02T11:41:18+08:00","permalink":"https://hublog.netlify.app/p/250502114118/","title":"fail2ban，保护服务器安全"},{"content":"简介 WebSSH 是一个基于 Web 的轻量级 SSH 管理工具，方便地在浏览器中进行安全的远程服务器管理。\n源码：https://github.com/cmliu/webssh\n预览 部署 docker 1 docker run -d --name webssh --restart always -p 8888:8888 cmliu/webssh:latest docker-compose 1 2 3 4 5 6 7 8 9 version: \u0026#39;3\u0026#39; services: webssh: container_name: webssh image: cmliu/webssh:latest ports: - \u0026#34;8888:8888\u0026#34; restart: always network_mode: bridge ","date":"2025-04-22T18:50:12+08:00","permalink":"https://hublog.netlify.app/p/250422185012/","title":"webssh修改版，基于 Web 的轻量级 SSH 管理工具"},{"content":"简介 基于 Web 的 ssh 客户端\n这是一个简单的 Web 应用程序，可以作为 ssh 客户端连接到你的 ssh 服务器。它是用 Python 编写的，基于 Tornado、paramiko 和 xterm.js。\n源码：https://github.com/huashengdun/webssh\n特性 支持 SSH 密码认证，包括空密码。 支持 SSH 公钥认证，包括 DSA、RSA、ECDSA、Ed25519 密钥。 支持加密密钥。 支持双因素认证（基于时间的一次性密码）。 支持全屏终端。 终端窗口可调整大小。 自动检测 SSH 服务器的默认编码。 支持现代浏览器，包括 Chrome、Firefox、Safari、Edge、Opera。 预览 ","date":"2025-04-22T18:36:37+08:00","permalink":"https://hublog.netlify.app/p/250422183637/","title":"webssh，一个基于web的SSH客户端项目"},{"content":"简介 在越南等多个国家提供云VPS、私有服务器\n全面管理云 VPS、私人服务器、托管和域名服务\n提供一个免费的虚拟主机：https://my.dataonline.vn/cart/hosting-gia-re/\n主机系统\n1 4.18.0-553.27.1.lve.el8.x86_64 Linux (基于内核版本 4.18.0) CentOS 8 或 Red Hat Enterprise Linux 8 (RHEL 8) (因为内核版本和 el8 字符串) CloudLinux 8 (因为 lve 字符串，表明使用了 CloudLinux 的 LVE 技术) ","date":"2025-04-21T18:49:19+08:00","permalink":"https://hublog.netlify.app/p/250421184919/","title":"dataonline主机"},{"content":"今天安装了试试，确实很不错啊，\nUI 整体风格一致，不需要额外折腾， 开箱即用， 高分辨率友好， 磁盘开机自动挂载， 自带通知， 终端好看， 开机界面好看， 可直接切换镜像源 ","date":"2025-04-18T12:17:29+08:00","permalink":"https://hublog.netlify.app/p/250418121729/","title":"linuxmint体验"},{"content":"简介 Zed 是下一代代码编辑器， 与人类和 AI 的高性能协作。\n官网：https://zed.dev/\n源码：github.com/zed-industries/zed\n安装 官方文档：https://zed.dev/docs/\nLinux Flathub\n1 flatpak install flathub dev.zed.Zed ","date":"2025-04-18T11:52:43+08:00","permalink":"https://hublog.netlify.app/p/250418115243/","title":"Zed，下一代代码编辑器"},{"content":"简介 Rime 是跨平臺的輸入法軟件，Rime 輸入方案可通用於以下發行版：\n【中州韻】 ibus-rime → Linux 【小狼毫】 Weasel → Windows 【鼠鬚管】 Squirrel → Mac OS X 除程序文件以外，Rime 還包括多種數據文件。 這些數據文件存在於以下位置：\n共享資料夾\n【中州韻】 /usr/share/rime-data/ 【小狼毫】 \u0026quot;安裝目錄\\data\u0026quot; 【鼠鬚管】 \u0026quot;/Library/Input Methods/Squirrel.app/Contents/SharedSupport/\u0026quot; 用戶資料夾\n【中州韻】 ~/.config/ibus/rime/ （0.9.1 以下版本爲 ~/.ibus/rime/；fcitx5 为 ~/.local/share/fcitx5/rime/） 【小狼毫】 %APPDATA%\\Rime 【鼠鬚管】 ~/Library/Rime/ 安装 Linux Ubuntu / Debian / Deepin / Linuxmint\n1 sudo apt install fcitx5-rime Arch Linux\n1 sudo pacman -Sy fcitx5-rime 安装完成后，在终端里运行fcitx5-configtool（或在应用程序启动器中检索「Fcitx」关键字），打开 Fcitx 设置工具。然后，在右侧的「可用输入法」中找到 RIME，双击它，以将其添加到「当前输入法」列表。\n最后，在系统托盘右击 Fcitx 图标（通常显示为键盘图案，或者是一只小企鹅），选择「RIME」，这样就成功激活了。\n输入法方案 现成可以直接使用的输入法方案\nrime-ice 雾凇拼音提供了一套开箱即用的完整配置，包含输入方案（全拼、常见双拼）、长期维护的开源词库及各项扩展功能。\n详细介绍：Rime 配置：雾凇拼音\n常见问题\n更新日志\n简体 | 全拼 | 双拼 主要功能 轻量的英文输入，支持中英混输 优化英文输入体验 拆字反查（uU+拼音），拆字辅码（拼音+`+拆字辅码） 自整理的 Emoji 以词定字（左右中括号：[、]） 长词优先 Unicode（U+Unicode 码位） 数字、人民币大写（R+数字） 日期、时间、星期（详见方案 /date_translator 节点） 农历（转写：N+八位数字；获取当前农历：全拼 nl，双拼 lunar） 简易计算器（cC+算式） 常见错音错字提示 置顶候选项（详见方案 /pin_cand_filter 节点） 所有标点符号直接上屏 特殊符号、字符输入（全拼 v+首字母缩写；双拼 V+首字母缩写） 拼音纠错（模糊音） 更多默认未启用的功能请参考 lua/ 及方案注释 简体字表、词库 通用规范汉字表（by 中华人民共和国教育部）8K 常用汉字 Unihan 字库（by Unicode lnc | UNICODE LICENSE V3）40K 大字库， 默认未启用 现代汉语常用词表（by 中国国家语言文字工作委员会） 华宇野风词库（by 野风） 简化字八股文（by rime | LGPL） 清华大学开源词库（by THUNLP | MIT） 腾讯词向量（@Huandeep 整理 | by Tencent AI Lab | CC BY 3.0） 词库修订 校对大量异形词、错别字、错误注音 全词库完成注音 同义多音字注音 参考 《现代汉语词典》 《同义词词林》 《新华成语大词典》 校对标准论坛 Rime、Squirrel、Weasel 常用配置项的详尽注释 Linux linux 快速使用 rime-ice\n1 2 3 mkdir -p ~/.local/share/fcitx5/rime/ cd ~/.local/share/fcitx5/rime/ git clone --depth 1 https://github.com/iDvel/rime-ice.git 重新部署 rime\n同步 同步主要是同步词典，将输入过的内容合并同步\n配置目录下的installation.yaml文件会在第一次部署后会自动生成；在这里可以编辑当前设备的ID和同步目录，如：\n1 2 3 4 5 6 7 distribution_code_name: \u0026#34;fcitx-rime\u0026#34; distribution_name: Rime distribution_version: 5.1.4 install_time: \u0026#34;Fri Apr 18 11:14:51 2025\u0026#34; installation_id: \u0026#34;linuxmint\u0026#34; sync_dir: \u0026#34;/home/mint/backup/windows/rime/sync\u0026#34; rime_version: 1.10.0 修改 installation_id 和增加 sync_dir\n输入法同步后会在 sync_dir生成以 installation_id值命名的文件夹，所以同步只需要同步 /home/mint/backup/windows/rime/sync文件夹\n比如我的\n1 2 3 4 5 backup/windows/rime/sync/ ├── android ├── linux ├── linuxmint └── windows ","date":"2025-04-18T11:04:44+08:00","permalink":"https://hublog.netlify.app/p/250418110444/","title":"Rime，跨平台的输入法软件"},{"content":"简介 VSCode (Visual Studio Code) 是一款由微软开发的免费、开源、跨平台的代码编辑器。它以其轻量级、高性能、高度可定制性而广受欢迎，成为众多开发者的首选工具。\n主要特点：\n智能代码补全 (IntelliSense): 基于变量定义、函数定义等提供智能提示，加速编码。 代码调试: 内置强大的调试器，支持断点、单步执行、变量查看等功能，方便调试代码。 Git 集成: 内置 Git 版本控制工具，方便代码提交、分支管理等操作。 丰富的扩展: 拥有庞大的扩展市场，支持各种编程语言、工具和框架，满足不同开发需求。 可定制性: 可以自定义主题、键盘快捷键、编辑器设置等，打造个性化的开发环境。 跨平台: 支持 Windows、macOS 和 Linux 操作系统。 轻量级: 启动速度快，资源占用少。 简单来说，VSCode 是一个强大、灵活、可定制的代码编辑器，适合各种编程语言和各种开发场景。 它的易用性和丰富的扩展生态系统使其成为开发者的得力助手。\n安装 官方文档：https://code.visualstudio.com/docs/setup/linux\nLinux Debian / Ununtu\n直接通过下载 .deb package文件安装 apt repository 1 2 3 4 5 6 7 8 9 10 sudo apt-get install wget gpg wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor \u0026gt; packages.microsoft.gpg sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg echo \u0026#34;deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\u0026#34; |sudo tee /etc/apt/sources.list.d/vscode.list \u0026gt; /dev/null rm -f packages.microsoft.gpg update the package cache and install the package using\n1 2 3 sudo apt install apt-transport-https sudo apt update sudo apt install code # or code-insiders ","date":"2025-04-18T10:14:43+08:00","permalink":"https://hublog.netlify.app/p/250418101443/","title":"VSCode，强大、灵活、可定制的代码编辑器"},{"content":"简介 Blinko 是一个创新的开源项目，专为想要快速捕捉和组织转瞬即逝的想法的个人而设计。Blinko 允许用户在想法出现的那一刻无缝记下想法，确保不会丢失任何创意火花。\n源码：https://github.com/blinko-space/blinko\n预览 特性 🤖AI 增强的笔记检索： 借助 Blinko 先进的 AI 驱动的 RAG（检索增强生成）技术，您可以使用自然语言查询快速搜索和访问您的笔记，轻松找到所需内容。 🔒 数据所有权： 您的隐私至关重要。您的所有笔记和数据都安全地存储在您自托管的环境中，确保您对自己的信息拥有完全的控制权。 🚀 高效快速： 即时捕捉灵感，并将其存储为纯文本以便于访问，同时提供完整的 Markdown 支持，实现快速格式化和无缝共享。 💡 轻量级架构，强大的功能： Blinko 基于 Next.js 构建，提供了一个简洁、轻量级的架构，在不牺牲速度或效率的情况下，提供强大的性能。 🔓 开放协作： 作为一个开源项目，Blinko 欢迎社区的贡献。所有代码都是透明的，并在 GitHub 上可用，从而培养了协作和持续改进的精神。 部署 claw ClawCloud Run 是一个集成在线开发、测试和生产环境的云开发平台。只需单击几下，即可设置开发环境和数据库依赖项，从而显著降低复杂性。\n带 AFF 注册链接（你我都有利）：点此跳转 无 AFF 注册链接：点此跳转 目前注册可获赠5$，注册方式只支持 GitHub、Google\n获取 5$条件：\n首次注册赠送5$：有效期一个月 每个月赠送5$：注册账号后一个月内绑定 GitHub 账户，同时要求绑定的 GitHub 账户注册时间超过 180 天 建议直接使用 GitHub 注册，免去绑定的步骤，当然也可以用其他邮箱注册再绑定 github\n进入 claw 控制台，点击 App Launchpad，点击 Create App\n容器信息如下：\nApplication Nmae：\n1 blinko-website Image Name:\n1 blinkospace/blinko:latest 以下参数大小最大化利用，作为参考，根据自己情况调整\nUsage：\nFixed，0.5C 1G Network：\n1111，启用网络访问，设置自定义域名 Environment Variables：\n1 2 3 4 5 NODE_ENV=production NEXTAUTH_URL=http://localhost:1111 NEXT_PUBLIC_BASE_URL=http://localhost:1111 NEXTAUTH_SECRET=my_ultra_secure_nextauth_secret DATABASE_URL=postgresql://postgres:mysecretpassword@blinko-postgres:5432/postgres 替换 NEXTAUTH_SECRET，DATABASE_URL的值\nLocal Storage：\nCapacity：6 Mount Path： 1 /app/.blinko 总费用：\n31 天：0.16$/day*31day=4.96$ 确认无误，点击 Deploy Application部署即可\nserv00 Serv00 是一个提供免费虚拟主机的平台，支持的服务众多，可选择 php 版本，有多款数据库，MySQL，postgresql，mongdodb，支持 ssh 连接，没有广告，3G 空间。\n官网：https://www.serv00.com/\n","date":"2025-04-16T09:28:05+08:00","permalink":"https://hublog.netlify.app/p/250416092805/","title":"blinko，快速捕捉和组织转瞬即逝的想法"},{"content":"资源 文字教程：https://blog.seektao.cc/p/250415140145\n简介 定义：\n图床是一种在线存储图片的服务，它允许用户将图片上传到服务器，并生成一个可公开访问的 URL（链接），用于在网站、论坛、博客、社交媒体等地方嵌入或分享图片。 本质上，图床就是一个专门用于存储和分发图片的网络空间。 核心功能：\n图片存储： 提供可靠的存储空间，用于存放用户上传的图片文件。 URL 生成： 为每张上传的图片生成一个唯一的、可直接访问的 URL。 图片分发： 通过 CDN (内容分发网络) 等技术，加速图片在全球范围内的访问速度。 图片管理 (可选)： 一些图床提供图片管理功能，例如： 分类、标签 图片编辑 (裁剪、旋转) 删除、替换 统计访问量 作用：\n解决图片存储问题： 避免直接将图片存储在自己的服务器上，减轻服务器压力，节省带宽。 提高网站加载速度： 通过 CDN 加速图片访问，提升用户体验。 方便图片分享： 生成易于分享的图片链接，方便在各种平台上发布图片。 内容隔离： 将图片内容与网站的其他内容分离，便于维护和管理。 类型：\n免费图床： 提供免费的图片存储和分发服务，但通常有流量限制、广告或稳定性风险。 收费图床： 提供更稳定、更快速、更可靠的图片存储和分发服务，通常按流量或存储空间收费。 自建图床： 使用开源图床程序，在自己的服务器上搭建图床。 使用场景：\n博客/网站： 存储网站上的图片，提高加载速度。 论坛/社区： 方便用户上传和分享图片。 社交媒体： 分享图片到社交平台。 Markdown 编辑器： 在 Markdown 文档中插入图片。 开发文档： 在 API 文档或技术文档中插入图片。 免费图床 SM.MS SM.MS 是一个免费的、简洁的在线图床服务。它允许用户上传图片并生成可用于嵌入到网站、论坛、博客等地方的链接。 SM.MS 因其简单易用、国内访问速度相对较快而受到部分用户的欢迎。\n官网：https://smms.app/\n特点：\n免费使用： 提供免费的图片存储和分发服务。 简单易用： 界面简洁，操作简单，无需注册即可上传图片。 多种链接格式： 上传后生成多种链接格式，包括： HTML 链接 Markdown 链接 BBCode 链接 直链 国内访问速度较快： 相对其他国外图床，在国内的访问速度可能更快一些。 支持 HTTPS： 支持 HTTPS 协议，保证数据传输的安全性。 总结 图床最重要的是稳定，如果图床服务关闭，意味着之前所有使用的地方都将失效，这是巨大的风险，所以一定要选择长期提供的服务商！\n因为我的日常使用频率不高，我都是写博文的时候需要用到，我的选择是 smms\n","date":"2025-04-15T14:01:45+08:00","permalink":"https://hublog.netlify.app/p/250415140145/","title":"图床概念详解：功能、类型、应用场景及免费图床推荐"},{"content":"简介 Serv00 是一个提供免费虚拟主机的平台，支持的服务众多，可选择 php 版本，有多款数据库，MySQL，postgresql，mongdodb，支持 ssh 连接，没有广告，3G 空间。\n官网：https://www.serv00.com/\nHalo 是一款开源的建站工具，专注于博客，同时也适合构建个人网站。它以其简洁、易用和强大的自定义能力而著称。\n官网：https://www.halo.run/\n部署 准备 登录 serv00 控制台，开启可执行权限和开放一个端口\n新建一个 MySQL 数据库，记录数据库信息\n数据库字符集选择 Collation: utf8mb4_bin\nhalo 环境\nJava 环境，目前 Halo 最低需要 JRE 17 的环境。 数据库（任一） MySQL 5.7+ MariaDB PostgreSQL serv00 官方已经支持 jdk17\nssh 连接 serv00\n1 2 export JAVA_VERSION=\u0026#34;17\u0026#34; java --version 写入到环境变量\n1 2 echo \u0026#39;export JAVA_VERSION=\u0026#34;17\u0026#34;\u0026#39; \u0026gt;\u0026gt; $HOME/.profile source $HOME/.profile 安装 halo 创建存放运行包的目录，这里以 ~/app 为例\n1 mkdir ~/app \u0026amp;\u0026amp; cd ~/app 下载运行包\n1 wget https://dl.halo.run/release/halo-2.20.12.jar -O halo.jar 创建 工作目录\n1 mkdir ~/.halo2 \u0026amp;\u0026amp; cd ~/.halo2 创建 Halo 配置文件\n1 vim application.yaml 将以下内容复制到 application.yaml 中，根据下面的配置说明进行配置。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 server: # 运行端口 port: 8090 spring: # 数据库配置，支持 MySQL、MariaDB、PostgreSQL、H2 Database，具体配置方式可以参考下面的数据库配置 r2dbc: url: r2dbc:h2:file:///${halo.work-dir}/db/halo-next?MODE=MySQL\u0026amp;DB_CLOSE_ON_EXIT=FALSE username: admin password: 123456 sql: init: mode: always # 需要配合 r2dbc 的配置进行改动 platform: h2 halo: # 工作目录位置 work-dir: ${user.home}/.halo2 # 外部访问地址 external-url: http://localhost:8090 # 附件映射配置，通常用于迁移场景 attachment: resource-mappings: - pathPattern: /upload/** locations: - migrate-from-1.x 数据库配置说明：\n参数名 描述 spring.r2dbc.url 数据库连接地址，详细可查阅下方的 配置对应关系 spring.r2dbc.username 数据库用户名 spring.r2dbc.password 数据库密码 spring.sql.init.platform 数据库平台名称，支持 postgresql、mysql、mariadb、h2 配置对应关系：\n链接方式 链接地址格式 spring.sql.init.platform PostgreSQL r2dbc:pool:postgresql://{HOST}:{PORT}/{DATABASE} postgresql MySQL r2dbc:pool:mysql://{HOST}:{PORT}/{DATABASE} mysql MariaDB r2dbc:pool:mariadb://{HOST}:{PORT}/{DATABASE} mariadb H2 Database r2dbc:h2:file:///${halo.work-dir}/db/halo-next?MODE=MySQL\u0026amp;DB_CLOSE_ON_EXIT=FALSE h2 测试运行 Halo\n1 cd ~/app \u0026amp;\u0026amp; java -server -Xms256m -Xmx400m -Dfile.encoding=UTF-8 -jar halo.jar --spring.config.additional-location=optional:file:$HOME/.halo2/ 初始化 halo 设置站点名，用户名，密码，邮箱\n后台运行 由于 serv00 不能使用 system，防止 serv00 杀掉进程，我们使用定时任务，定时重启\n登录 serv00 控制台，新增定时任务\nLabel Value Extra Specify time Specify manually Form type Advanced Minute Every 10 Hour Each time * Day of month Each time * Month Each time * Day of week Each time * Command 命令填写如下的内容\n1 pkill -f halo.jar; nohup java -server -Xms256m -Xmx400m -Dfile.encoding=UTF-8 -jar $HOME/app/halo.jar --spring.config.additional-location=optional:file:$HOME/.halo2/ \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 \u0026amp; 访问 使用 serv00 分配的域名加上端口即可访问\n1 http://\u0026lt;username\u0026gt;.serv00.net:\u0026lt;port\u0026gt; 如果不想使用端口，并使用 https\n推荐这个教程：使用 Vercel 部署反向代理的部署指南\n在线预览 https://omni.seektao.cc/\nPS：这是一个玩具，用不了多久就会被杀进程，只适合学习\n","date":"2025-04-15T09:15:44+08:00","permalink":"https://hublog.netlify.app/p/250415091544/","title":"serv00部署halo，你的现代化博客系统"},{"content":"简介 Bitwarden 客户端 API 的替代服务器实现，用 Rust 编写，与官方 Bitwarden 客户端兼容，非常适合自托管部署，其中运行官方资源密集型服务可能不理想。\n源码：https://github.com/dani-garcia/vaultwarden\n部署 docker compose 1 2 3 4 5 6 7 8 9 10 11 12 13 version: \u0026#39;3.9\u0026#39; services: vaultwarden: container_name: vaultwarden image: vaultwarden/server:latest environment: - SIGNUPS_ALLOWED=false # 禁用新用户注册 - SIGNUPS_ALLOWED=false # 禁用组织邀请 volumes: - ./vaultwarden_data/:/data/ ports: - 3035:80 restart: unless-stopped 启用管理界面 环境变量\n1 ADMIN_TOKEN=some_random_token_as_per_above_explanation # 启用管理页面 使用如下命令生成 argon2 加密后的 token\n1 docker exec -it \u0026lt;container_id\u0026gt; /vaultwarden hash 将 $ 替换成 $$ 添加到 ADMIN_TOKEN 后面，注意，不要加''\nsmtp 邮件发送 配置 环境变量\n1 2 3 4 5 6 SMTP_HOST= # smtp host SMTP_FROM= # smtp 发件人 SMTP_PORT= # smtp 端口 SMTP_SECURITY= # smtp tls加密方式，可选有force_tls，starttls，off SMTP_USERNAME= # smtp 用户名 SMTP_PASSWORD= # smtp 用户密码 smtp 服务器 Resnd：每个月免费 3000 封，注册添加域名后可能被封，需要发邮件解封\n端口对应的 TLS 使用端口 465 的邮件服务器 1 2 SMTP_PORT=465 SMTP_SECURITY=force_tls 使用端口 587（有时候是 25）的邮件服务器 1 2 SMTP_PORT=587 SMTP_SECURITY=starttls 根本不支持加密的邮件服务器 1 2 SMTP_PORT=25 SMTP_SECURITY=off 示例 resend\n1 2 3 4 5 6 SMTP_HOST=smtp.resend.com SMTP_FROM=no-reply@example.com SMTP_PORT=465 SMTP_SECURITY=force_tls SMTP_USERNAME=resend SMTP_PASSWORD=re_Pxxxxxxxxxx 反向代理 Nginx 请将 yourdomain替换为自己的域名\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 server { if ($host = yourdomain.com) { return 301 https://$host$request_uri; } # managed by Certbot listen 80; server_name yourdomain.com; return 301 https://yourdomain.com$request_uri; } server { listen 443 ssl; http2 on; server_name yourdomain.com; # SSL 证书配置 ssl_certificate /etc/nginx/ssl/yourdomain.com/cert.pem; ssl_certificate_key /etc/nginx/ssl/yourdomain.com/key.pem; # 安全设置 ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; # 反向代理 location / { proxy_pass http://127.0.0.1:3035/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto https; } # 日志配置 access_log /var/log/nginx/yourdomain.com.access.log; error_log /var/log/nginx/yourdomain.com.error.log; } ","date":"2025-04-13T19:07:38+08:00","permalink":"https://hublog.netlify.app/p/250413190738/","title":"vaultwarden，用 Rust 编写的非官方 Bitwarden 兼容服务器"},{"content":"简介 ClawCloud Run 是一个集成在线开发、测试和生产环境的云开发平台。只需单击几下，即可设置开发环境和数据库依赖项，从而显著降低复杂性。\n带 AFF 注册链接（你我都有利）：点此跳转 无 AFF 注册链接：点此跳转 目前注册可获赠5$，注册方式只支持 GitHub、Google\n获取 5$条件：\n首次注册赠送5$：有效期一个月 每个月赠送5$：注册账号后一个月内绑定 GitHub 账户，同时要求绑定的 GitHub 账户注册时间超过 180 天 建议直接使用 GitHub 注册，免去绑定的步骤，当然也可以用其他邮箱注册再绑定 github\n计划 Free Plan 免费计划 For every newly registered user, ClawCloud Run will offer a benefit of $5. The validity period of this complimentary amount is one month. If you bind your GitHub account within one month after registration, you will receive an additional $5 every month thereafter, and the validity period of this subsequent gift is also one month. 对于每一个新注册的用户，ClawCloud Run 将提供 5 美元的优惠。此赠品的有效期为一个月。如果您在注册后一个月内绑定 GitHub 账户，则此后每个月都会额外获得 5 美元，而这份后续礼物的有效期也是一个月。\nTo prevent resource wastage, ClawCloud Run reserves the right to manage resource allocation for users of the free plan. 为防止资源浪费，ClawCloud Run 保留为免费计划的用户管理资源分配的权利。\n预览 继续附上注册链接\n带 AFF 注册链接（你我都有利）：点此跳转 无 AFF 注册链接：点此跳转 服务 App Launchpad：创建容器，可以设置比较小的资源占用，所需费用也比较小，最低0.1C64M 0.01$/day，最高8C16G 2.14$/day Database：支持PostgreSQL、MongoDB、MySQL、Redis、Kafka、Milvus Devbox：开发容器，可以选择特定语言的运行环境，框架，系统。最低支持1C2G，最高支持16C32G Object Storage：对象存储 App Store：应用商店，提供常见应用启动模板，如 alist，fastgpt，chat-next-web，dify 等等 Termiinal：终端模拟器 alist AList 是一款易于安装且支持多平台的文件管理工具，可以挂载多种存储并提供多种实用功能。它支持 WebDAV、黑暗模式、文件预览、打包下载等，还提供保险箱加密和更多高级功能。\n部署 alist 的成本比较低，一个月只需0.04$/day*30day=1.2$，完全可以使用赠送的 5$，alist 服务不会关机。\n点击 App Store，选择 Alist\n选择用户名和填入密码\n点击 Deploy App，确认部署\n返回，点击My Apps可以看到已经部署的应用\n点击进去，可以看到应用已经启动\n点击 Detail查看详细信息，下滑找到Network，即可看到公共访问的 ip 地址\n点击Manage Network下滑找到Network模块可以修改端口，设置自定义域名\nnew-api AI 模型接口管理与分发系统，支持将多种大模型转为统一格式调用，支持 OpenAI、Claude 等格式，可供个人或者企业内部管理与分发渠道使用，基于 One API 二次开发。\n点击 App Launchpad，点击 Create App\n容器信息如下：\nApplication Nmae：new-api Image Name: calciumion/new-api:latest Usage：Fixed，0.5C256M Network：3000，启用网络访问，设置自定义域名\nEnvironment Variables：\n1 TZ=Asia/Shanghai Local Storage：\nCapacity：5 Mount Path：/data 总费用：0.11$/day*31day=3.41$\n参数大小作为参考，根据自己情况调整\n确认无误，点击 Deploy Application\n截图示例：\nqinglong 支持 Python3、JavaScript、Shell、Typescript 的定时任务管理平台\n特性：\n支持多种脚本语言（python3、javaScript、shell、typescript） 支持在线管理脚本、环境变量、配置文件 支持在线查看任务日志 支持秒级任务设置 支持系统级通知 支持暗黑模式 支持手机端操作 创建服务\n填入如下信息，最大化利用资源\n开启外部网络访问，端口为 5700，后面的是服务域名，可以公开访问\n设置环境变量\n1 2 QlBaseUrl=/ QlPort=5700 填入如下信息\n挂载外部存储，不挂载重启容器会丢失数据\n确认无误，点击Deploy Application部署，接下来访问域名设置用户密码即可\n支持青龙面板的服务\nBiliBiliToolPro Open WebUI Open WebUI 是一个可扩展的、功能丰富的、用户友好的自托管 AI 平台，旨在完全离线操作。它支持各种 LLM 跑步者，比如奥拉马和 OpenAI 兼容的 API，内置 RAG 推理机，使它成为一个强大的 AI 部署解决方案。\n进入 claw 控制台\n点击 App Launchpad，点击 Create App\n容器信息如下：\nApplication Nmae：open-webui Image Name: ghcr.io/open-webui/open-webui:main Usage：Fixed，0.5C512M Network：8080，启用网络访问，设置自定义域名\nEnvironment Variables：\n1 OLLAMA_BASE_URL= ollama 请使用自己资源或寻找其他资源\nLocal Storage：\nCapacity：10 Mount Path：/app/backend/data 总费用：0.14$/day*31day=4.34$\n参数大小作为参考，根据自己情况调整\n确认无误，点击 Deploy Application\n图示：\nhalo Halo 是一款开源的建站工具，专注于博客，同时也适合构建个人网站。它以其简洁、易用和强大的自定义能力而著称。\n官网：https://www.halo.run/\n部署\n进入 claw 控制台，点击 App Launchpad，点击 Create App\n容器信息如下：\nApplication Nmae：halo Image Name:\n任选其一\n1 halohub/halo:2.20 1 registry.fit2cloud.com/halo/halo:2.20 以下参数大小最大化利用，作为参考，根据自己情况调整\nUsage：Fixed，0.5C 1G Network：8090，启用网络访问，设置自定义域名\nEnvironment Variables：\n1 JVM_OPTS=-Xmx900m -Xms256m Local Storage：\nCapacity：6 Mount Path： 1 /root/.halo2 总费用：\n31 天：0.16$/day*31day=4.96$ 确认无误，点击 Deploy Application部署即可\nblinko 简介\nBlinko 是一个创新的开源项目，专为想要快速捕捉和组织转瞬即逝的想法的个人而设计。Blinko 允许用户在想法出现的那一刻无缝记下想法，确保不会丢失任何创意火花。\n源码：https://github.com/blinko-space/blinko\n特性\n🤖AI 增强的笔记检索： 借助 Blinko 先进的 AI 驱动的 RAG（检索增强生成）技术，您可以使用自然语言查询快速搜索和访问您的笔记，轻松找到所需内容。 🔒 数据所有权： 您的隐私至关重要。您的所有笔记和数据都安全地存储在您自托管的环境中，确保您对自己的信息拥有完全的控制权。 🚀 高效快速： 即时捕捉灵感，并将其存储为纯文本以便于访问，同时提供完整的 Markdown 支持，实现快速格式化和无缝共享。 💡 轻量级架构，强大的功能： Blinko 基于 Next.js 构建，提供了一个简洁、轻量级的架构，在不牺牲速度或效率的情况下，提供强大的性能。 🔓 开放协作： 作为一个开源项目，Blinko 欢迎社区的贡献。所有代码都是透明的，并在 GitHub 上可用，从而培养了协作和持续改进的精神。 部署\n进入 claw 控制台，点击 App Launchpad，点击 Create App\n容器信息如下：\nApplication Nmae：\n1 blinko-website Image Name:\n1 blinkospace/blinko:latest 以下参数大小最大化利用，作为参考，根据自己情况调整\nUsage：\nFixed，0.5C 1G Network：\n1111，启用网络访问，设置自定义域名 Environment Variables：\n1 2 3 4 5 NODE_ENV=production NEXTAUTH_URL=http://localhost:1111 NEXT_PUBLIC_BASE_URL=http://localhost:1111 NEXTAUTH_SECRET=my_ultra_secure_nextauth_secret DATABASE_URL=postgresql://postgres:mysecretpassword@blinko-postgres:5432/postgres 替换 NEXTAUTH_SECRET，DATABASE_URL的值\nLocal Storage：\nCapacity：6 Mount Path： 1 /app/.blinko 总费用：\n31 天：0.16$/day*31day=4.96$ 确认无误，点击 Deploy Application部署即可\n","date":"2025-04-12T20:02:48+08:00","permalink":"https://hublog.netlify.app/p/250412200248/","title":"claw免费容器，部署服务教程"},{"content":"简介 一个可高度自定义的 IPTV 接口更新项目 📺，自定义频道菜单，自动获取直播源，测速验效后生成可用的结果，可实现『✨ 秒播级体验 🚀』\n部署 Docker 1 2 3 mkdir -p /opt/container/iptv-api cd /opt/container/iptv-api vim docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 version: \u0026#39;3.9\u0026#39; services: iptv-api: image: \u0026#39;guovern/iptv-api:latest\u0026#39; container_name: iptv-api restart: unless-stopped ports: - \u0026#39;8000:8000\u0026#39; volumes: - \u0026#39;./iptv-api_data/config:/iptv-api/config\u0026#39; - \u0026#39;./iptv-api_data/output:/iptv-api/output\u0026#39; ","date":"2025-04-12T10:19:23+08:00","permalink":"https://hublog.netlify.app/p/250412101923/","title":"iptv-api，一个可高度自定义的IPTV接口更新项目"},{"content":"kodbox 像 NAS 的 webos https://kodbox.seektao.cc\n图片 API https://images.linux-do.rr.nu\n贴吧签到 https://oba.pp.ua/\n","date":"2025-04-06T18:32:12+08:00","permalink":"https://hublog.netlify.app/p/250406183212/","title":"serv00用途收集"},{"content":"简介 下面是备份的脚本\n脚本 简介 这个脚本将指定的目录备份打包成 tar.gz文件，备份到家目录 下的 backup/application 文件夹下，然后使用 rclone 上传到指定的远程存储\n创建 1 2 3 4 5 mkdir -p $HOME/bin touch $HOME/bin/backup_and_upload.sh \u0026amp;\u0026amp; chmod +x $HOME/bin/backup_and_upload.sh vim $HOME/bin/backup_and_upload.sh 修改 使用前需要修改中文注释提示的部分\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 #!/bin/bash # source_dir=( # 你的备份目录，一行一个，例如 /opt/container/server1 /opt/container/server2 ) date_format=$(TZ=\u0026#34;UTC\u0026#34; date +%Y%m%d) # 备份文件的存放位置（可选） backup_base_dir=\u0026#34;$HOME/backup/application\u0026#34; force_repack=0 # Default: do not force repack # Define backup functions # 函数名为你的rclone配置的远程存储名，仿照下面的添加即可 b2() { remote_dir=\u0026#34;rclone远程存储名:远程备份路径\u0026#34; backup_to_remote \u0026#34;$remote_dir\u0026#34; \u0026#34;$1\u0026#34; } # Generic backup function backup_to_remote() { local remote_dir=\u0026#34;$1\u0026#34; local source_full_path=\u0026#34;$2\u0026#34; local source_name=$(basename \u0026#34;$source_full_path\u0026#34;) # check output directory target_dir=\u0026#34;$backup_base_dir/$source_name\u0026#34; if [ ! -d \u0026#34;$target_dir\u0026#34; ]; then echo \u0026#34;$target_dir directory not exists, creating...\u0026#34; mkdir -p \u0026#34;$target_dir\u0026#34; fi # archive directory target_full_path=\u0026#34;$target_dir/${source_name}_backup_${date_format}.tar.gz\u0026#34; if [ ! -f \u0026#34;$target_full_path\u0026#34; ] || [ \u0026#34;$force_repack\u0026#34; -eq 1 ]; then if [ \u0026#34;$force_repack\u0026#34; -eq 1 ]; then echo \u0026#34;Force repack is enabled. Recreating archive: $target_full_path\u0026#34; else echo \u0026#34;Creating archive: $target_full_path\u0026#34; fi tar -zcf \u0026#34;$target_full_path\u0026#34; \u0026#34;$source_full_path\u0026#34; fi # backup archive file echo \u0026#34;Starting backup to $remote_dir: ${target_full_path}\u0026#34; rclone copy \u0026#34;$target_full_path\u0026#34; \u0026#34;$remote_dir/${source_name}\u0026#34; -P echo \u0026#34;\u0026#34; } # Process each source directory process_directory() { local dir=\u0026#34;$1\u0026#34; local backup_targets=(\u0026#34;${@:2}\u0026#34;) # Get all arguments after the directory if [ -z \u0026#34;$backup_targets\u0026#34; ]; then echo \u0026#34;No backup targets specified for $dir. Skipping.\u0026#34; return fi for target in \u0026#34;${backup_targets[@]}\u0026#34;; do if type \u0026#34;$target\u0026#34; \u0026gt; /dev/null 2\u0026gt;\u0026amp;1; then echo \u0026#34;Backing up $dir to $target\u0026#34; \u0026#34;$target\u0026#34; \u0026#34;$dir\u0026#34; # Call the backup function with the directory else echo \u0026#34;Error: Backup target \u0026#39;$target\u0026#39; not found.\u0026#34; fi done } # Main script logic # Parse command line arguments while getopts \u0026#34;f\u0026#34; opt; do case $opt in f) force_repack=1 ;; \\?) echo \u0026#34;Invalid option: -$OPTARG\u0026#34; \u0026gt;\u0026amp;2 exit 1 ;; :) echo \u0026#34;Option -$OPTARG requires an argument.\u0026#34; \u0026gt;\u0026amp;2 exit 1 ;; esac done shift $((OPTIND -1)) # Shift off the options, leaving only backup targets if [ $# -eq 0 ]; then echo \u0026#34;Usage: $0 [-f] \u0026lt;backup_target\u0026gt; [backup_target2 ...] \u0026#34; echo \u0026#34; -f: Force re-packaging the local archive file.\u0026#34; echo \u0026#34;Available backup targets: b2\u0026#34; exit 1 fi # Loop through each source directory and apply the specified backups for source_dir_item in \u0026#34;${source_dir[@]}\u0026#34;; do process_directory \u0026#34;$source_dir_item\u0026#34; \u0026#34;$@\u0026#34; done echo \u0026#34;Backup process completed.\u0026#34; 添加到环境变量（可选）\n1 2 echo \u0026#39;export PATH=$PATH:$HOME/bin\u0026#39; \u0026gt;\u0026gt; $HOME/.bashrc source $HOME/.bashrc 使用 运行\n1 backup_and_upload.sh rclone配置的远程存储名 参数\n-f：强制重新打包 示例\n备份到 b2\n1 backup_and_upload.sh b2 执行后将会自动打包备份到家目录的 backup/application下，然后上传到 b2\n定时任务 为了实现定期备份，可以添加定时任务\n这个表示每天 23 点 55 分备份上传\n1 echo \u0026#34;55 23 * * * /root/bin/backup_and_upload.sh b2 tebi \u0026gt;\u0026gt; /root/logs/backup_and_upload.log\u0026#34; \u0026gt;\u0026gt; /var/spool/cron/crontabs/root ","date":"2025-04-05T19:42:20+08:00","permalink":"https://hublog.netlify.app/p/250405194220/","title":"服务器自动化打包，备份到云存储，基于rclone"},{"content":"简介 特性 🚀 像 Windows 体验般的私有云盘/企业网盘 🌟 完全支持私有化部署，安全可控的存储 👁️‍🗨️ 在线预览、编辑和播放数百种文件格式，办公娱乐两不误 🚀 多存储融合：支持本地磁盘、FTP、WebDAV、阿里云 OSS、腾讯云 COS、七牛云、MinIO、S3 兼容协议等 🔗 轻松分享，高效协作，细粒度权限控制 💻 全平台客户端覆盖，随时随地访问，轻松同步挂载；支持 Web、H5、iOS、Android、PC、WebDAV 挂载 详细功能 文件操作: 与 Windows 高度一致的操作体验，包括新建、复制、移动、粘贴、上传、下载、删除、解压、打开方式、文件排序、查看等。 文档选择: 框选、拖拽、快捷键，云文档管理如同本地操作般熟悉高效；文件勾选、ctrl 点击、shift 连续选择、快捷键选择 (ctrl/shift+a/up/down/left/right/home/end\u0026hellip;)、首字母快速定位、拼音模糊搜索快速过滤\u0026hellip; 全局拖拽: 拖拽文件和文件夹进行移动和复制；拖拽本地文件/文件夹进行上传；拖拽到桌面自动下载；拖拽到文件夹自动进入，拖拽多个文件管理窗口之间互相操作\u0026hellip; 高效快捷键: ctrl+c 复制，ctrl+x 剪切，ctrl+v 粘贴，ctrl+z 撤销，f2 重命名，ctrl+shift+z 反撤销，文件视图切换\u0026hellip; 右键菜单: 文件夹、文件以及不同类型的文件拥有完全自适应的右键菜单 文件查看模式: 结合 Windows 和 Mac 的优点，支持“图标模式/列表模式/列模式”文件管理，图标模式支持自定义图标大小，列表模式文件夹支持树状目录展开；自动记录每个文件夹的查看模式；采用虚拟列表，快速高效管理大量文件文件夹。 多维度文档管理: 收藏夹；文档标签；文件分类；最近文档；相册；回收站；部门文档公共标签；个人文件私有保险箱\u0026hellip;; 便捷属性面板: 各种文档属性信息、共享状态、图片 exif 信息、音乐和视频等类型的文件信息一目了然；文件夹包含文件文件夹数量、大小统计、设置备注、编辑锁定/置顶；可以讨论文件文件夹； 文件历史版本: 文件在线编辑保存，自动生成历史版本，无需担心内容丢失； 文件去重/秒传: 采用 COW 机制，文件元数据记录双哈希校验，自动全量去重，上传时，已存在的文件自动秒传，节省存储空间，提高上传效率；文件夹移动和复制快速完成； 高级搜索: 支持按类型、文件大小、最后修改时间等维度过滤或搜索，支持中文拼音首字母搜索，支持文档标签、备注搜索；支持批量搜索多个文件名，并按搜索顺序呈现搜索结果 文档动态: 文件文件夹的所有操作变更一目了然，追踪文档的整个生命周期； 在线解压: 支持在线解压 zip、tar、gz、7z、rar 等文件，支持快速创建文件夹的压缩包，支持在线预览压缩包 文件在线预览: 随时随地，通过浏览器即可轻松查看数百种常用格式文档，无需下载到本地或在终端安装软件；图片、音乐、视频等媒体文件；在线预览和编辑 Office 文档；PDF、OFD、XPS 等版本文档；在线预览和编辑 PhotoShop 和 Illustrator；AutoCAD 工程图纸 文本编辑器: 提供强大的在线文本文件编辑功能；支持 120 种代码语言高亮；自适应文本编码，告别文件乱码；多标签支持；支持 js/json/php/css 等语言方法快速查看和文件格式化；html 文件支持实时安全预览；支持分片加载，轻松在线打开大文件；支持 hex 模式，方便查看二进制文件； markdown 编辑: 编辑器提供强大而完整的 markdown 编辑功能，支持实时预览；快捷键支持；支持插入公式、流程图、时序图、uml 图，支持提示引用，支持 html 语法；支持图片相对路径引用；支持直接粘贴从剪贴板复制的图像；链接跳转支持其他 md 文件具有相对路径； 流程图/思维导图: 在线绘制 Visio 流程图和思维导图，并快速与他人分享； 细粒度权限控制: 部门文件、文件夹，每个文件可以为不同的人或群组设置不同的权限，千人千面； 外部链接分享: 一键与客户或外部合作伙伴分享文件（文件夹），支持设置访问密码、有效期和多种权限；接收者可以通过链接轻松预览多种格式的文档；启用编辑后，接收者可以在线编辑、上传和协作处理 Office 文件；文件夹支持文档模式的默认设置，方便发布用户手册、开发文档等； 内部协作: 您可以发起协作并向系统内的成员、部门或任何组合授予不同的权限。 协作增强: 提供部门标签、文档讨论、文件动态、历史版本、编辑锁定等组件，以收集多人的工作成果。 登录控制: 登录设备控制、双重验证、登录 IP 过滤、登录验证码、复杂密码策略、防暴力破解；扫码登录（App 扫码登录 Web 端；扫描已登录的 Web 端登录 App） 权限控制: 角色权限、部门权限、细粒度文档权限、共享控制、内容/授权审批、多级管理员 行为审计: 登录日志、操作日志、共享内容控制、动态安全水印、敏感词过滤、文件保密管理、系统回收站 数据安全: 数据备份、系统恢复、多云融合存储、csrf 保护、集群部署支持 多存储融合: 本地磁盘、ftp、webdav、阿里云 OSS、腾讯云 COS、七牛云、minio、S3 等多种云融合挂载，轻松处理跨云文件管理、备份传输、弹性扩展 插件中心: AD 域/企业微信/钉钉等 30+ 企业级应用插件可自由扩展；文件格式编辑和预览可轻松扩展；开放插件开发文档，企业可根据需要在插件中灵活扩展功能；提供 SDK，将企业的云文件功能无缝嵌入到 ERP、OA、邮箱等 IT 系统中 App: Android、iOS 全端支持；自动相册备份； PC 客户端: Windows、Mac 版本支持；支持文件夹备份到云端；自动挂载到本地磁盘，无感操作，本地体验；支持调用 PC 软件预览和编辑在线文件 官网介绍 颜值担当，WebOS 级别操作体验\nKodBox 沿用了 Windows 用户界面、操作逻辑和用户习惯，支持拖拽、框选和快捷键操作，使得用户可以在熟悉的桌面工作环境中，以舒适直观的方式轻松管理服务器中的文件，最大程度地减少学习成本和进入障碍。\n一切都是那么优美和流畅。提供图标、列表、分栏三种布局方式，缩略图展示，随心切换大小，还有熟悉的右键菜单，PC 上操作的习惯通通可以实现，彻底摆脱传统网盘使用中的不适，\n更有熟悉的桌面可以添加各种喜欢的小应用，是在在线文档管理器，更是随时随地都可以访问的私有的 WebOS。\n随时随地，文档随心查看\n每种文档格式均提供了丰富的插件支持，可根据不同软件的环境要求、显示效果、偏好自由选择打开的方式，或者设置默认打开方式。\nMicrosoft Office系列（Word、Excel、PowerPoint） WPS 格式 OpenDocument 格式 AutoCAD PDF XPS Flash 编程语言，电子书等 无需在计算机上安装应用程序即可查看这些文档。\n提供多元化的打开方式，更多预览程序选择。\n高分辨率和高保真，放大查看也不会丢失细节。\n影音娱乐，趣味盎然\n媒体播放器可以打开和播放所有常见的视频格式：MP4，M4V，F4V，MOV，FLV，WEBM，OGV\n所有常见的音频格式：MP3，AAC，M4A，F4A，OGG，OGA，VORBIS\n支持通过轻应用及插件的方式添加游戏，私有云也可以轻松有趣\n离线下载支持，优质资源想存就存\n图片相册，轻松预览和管理\n可以在线预览所有常见的图像格式，包括 Photoshop 图片：\nJpeg Png Gif WebP Bmp Tiff* Psd,Psb,Eps* Raw (Digital Camera Image) Formats* 图像查看器支持图片的缩放，平移，旋转和翻转。\n提供外链地址，私有云轻松作为图床使用，分享给用户和伙伴。\n强大的在线解压、压缩和预览\n全格式支持的在线解压与查看，无需下载到本地也可以轻松查看\nZIP 7Z Gif RAR TAR GZ* TAR.GZ (TGZ) TAR.BZ2 (TBZ, TBZ2) 无需全部解压，直接点击，即可轻松预览压缩包中的单文件\n多种编码格式支持\n多重压缩嵌套的情况下，同样支持打开和查看\n组织架构集成，多元化的权限策略\n管理员可以对设置多种用户角色身份并对其角色权限进行限制；支持自定义群组和用户目录，以及其空间大小的配置。\n企业可以按照组织架构建立各部门的共享文件夹，并通过群组权限对部门成员实现进行权限分配。群组支持多层级关系中上级对下级文件的查看和管理，群组还设定对外部分享的文件以实现外部协作需求。\n支持共享登录，用户单点集成、用户组织结构集成，用户可以根据需要深度整合企业微信、钉钉等其他平台的用户和组织结构数据，实现组织结构与文档的无缝对接。\n管理员可完全自定义版权信息、公司名称，企业 Logo 等信息。\n强大、简单易用的上传下载\n拖拽文件到浏览器窗口即可轻松上传文档；采用分片上传，断点续传技术。多文件批量上传，文件夹直接上传等，尽在一拖一放之间。\n下载支持断点续传，多线程下载提速。文件夹、多文件自动打包压缩下载。\n支持离线下载，通过远程增加下载任务，使用文档时无需等待。\n主题随心定义，更多的生产力\nKodBox 始终把用户体验放在产品设计首要考虑的因素，倾心构造无障碍的在线私有文档管理体验。\n你的私有云，由你定义。\n主题自由切换，壁纸轻松选择，用更舒服的姿势进入状态。\n多语言支持\n提供超过 20 种语言，国际访问也能轻松应对不同语言环境。哪怕朋友、同事和客户身在国外，也不惧地域和语言限制，轻松查看分享。\n轻量易部署，跨平台支持\n全平台兼容性：Win、Linux、Mac (Apache、Nginx、IIS)。从百元级别的智能路由器和盒子产品，到 NAS 网络存储设备，到服务器面板，服务器，硬件集成，ERP 集成，私有云、公有云、SaaS 服务搭建等各种场景都可自如适用。\n支持跨平台浏览器的无缝访问。仅需一个浏览器即在 web 端完成文档的上传下载、管理查看，不需要安装任何类似 ftp 客户端的软件。\n提供多客户端支持。\n支持企业微信、钉钉等常用企业工具的集成登录和访问。\n丰富多彩生态，轻松开发拓展\n内置轻应用和插件市场，数百种插件和拓展支持，从办公环境到个人娱乐，几乎覆盖日常使用所有需求。用户可以通过链接、Js 代码的方式方便地添加各种轻应用。\n正如在 Windows 中可以原则文档的打开方式一样，KodBox 也提供了多种插件打开方式；用户可以根据偏好通过喜欢的插件来查看文档。管理员可根据需要安装插件，设置用户和群组对插件的使用权限，拥有多元化的管理方式。\n完备开放的 API 接口，可以通过插件的方式方便地对系统进行二次开发、功能拓展，方便地集成到 SaaS 服务、企业邮箱、OA、ERP 等 IT 系统中，与企业自身的 IT 系统进行对接。且二次开发后，产品仍可以无缝升级。\n地址 官网：https://kodcloud.com\n体验地址：https://demo.kodcloud.com/#user/login\n社区版源码：https://github.com/kalcaddle/kodbox\n部署 serv00 准备 登录后台\n选择 WWW websites 创建网站（如果直接使用 serv00 提供的域名可以跳过）\n添加 DNS 解析，将域名指向 serv00 的分配的 ip\n以 dnspod 为例\n创建数据库\n在 serv00 面板，MySQL，添加数据库\n安装 ssh 登录服务器\n进入设置对应的网站目录\n1 cd $HOME/domains/你添加的域名/public_html 从源码安装\n1 2 3 4 # Install from source git clone https://github.com/kalcaddle/kodbox.git chmod -Rf 777 ./kodbox/* mv kodbox/* . 网站设置 访问在 seer00 创建的网站（也就是你的域名），完成网站设置，点击跳过，进入数据库设置\n数据库选择 MySQL，数据库信息填入之前的在 serv00 创建的数据库信息\n内容大致如下，填好后点击确定，进入下一步\n设置 kodbox 的账户和密码，用于后续登录，点击确定完成网站设置\n网站设置完成之后，再次访问即可进入登录界面\n申请 SSL 证书 如果有需要，serv00 提供免费的 ssl 证书\n回到 serv00 面板，选择 WWW websites，点击Manage SSL certficates，跟着图示进行操作\n成功申请之后显示如下\n再次访问域名，在最开始加上 https:// 即可\n举例： 无 ssl：http://kodbox.seektao.cc 有 ssl: https://kodbox.seektao.cc\n特别需要说明的是：serv00 没有地方可以设置 http 重定向到 https，也就是不能强制使用 ssl，所以访问的时候需要手动在域名千添加 https://，不过浏览器都有历史功能，访问后，下次会提示。\n回到 ssh 连接的 serv00\n1 cd $HOME/domains/你的网站/public_html 新建 .htaccess文件，开启重定向 http 到 https\n如果你不懂 vim，请找一个你熟悉的编辑软件上传，这里简要介绍一下\n编辑 .htaccess\n1 vim .htaccess 复制下面的内容，粘贴进去\n1 2 3 RewriteEngine On RewriteCond %{HTTPS} off RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301] 英文输入法下 :wq 退出保存\n整体界面 在线体验 点击跳转\n账户：kodboxguest\n密码：kodboxguest\n","date":"2025-04-03T13:55:51+08:00","permalink":"https://hublog.netlify.app/p/250403135551/","title":"kodbox，新一代企业私有云存储，协同办公平台"},{"content":"awesome-php 最有用的开源 PHP 资源。\nhttps://github.com/skykingf/awesome-php\nkodbox kodbox is a file manager for web. It is a newly designed product based on kodexplorer. It is also a web code editor, which allows you to develop websites directly within the web browser.You can run kodbox either online or locally,on Linux, Windows or Mac based platforms\nhttps://github.com/kalcaddle/kodbox\nmatomo Empowering People Ethically 🚀 — Matomo is hiring! Join us → https://matomo.org/jobs Matomo is the leading open-source alternative to Google Analytics, giving you complete control and built-in privacy. Easily collect, visualise, and analyse data from websites \u0026amp; apps. Star us on GitHub ⭐️ – Pull Requests welcome!\nhttps://github.com/matomo-org/matomo\n","date":"2025-04-03T10:05:24+08:00","permalink":"https://hublog.netlify.app/p/250403100524/","title":"PHP开源项目收集"},{"content":"安装 使用版本管理器器安装：g，Go 的多版本管理工具\n配置 设置代理 加快 go 相关包的下载\n七牛云\n1 2 go env -w GO111MODULE=on # 启用模块 go env -w GOPROXY=https://goproxy.cn,direct # 加快go模块下载速度 GOPATH（可选） 设置 go 家目录：添加 GOPATH 环境变量\nLinux：\n1 2 echo \u0026#39;export GOPATH=~/codespace/goProjects\u0026#39; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc 在 GOPATH 目录下，通常有三个子目录：\nsrc: 存放源代码。 pkg: 存放编译后的包。 bin: 存放 go 下载的可执行文件。 1 2 cd ~/codespace/goProjects mkdir -p $GOPATH/src $GOPATH/pkg $GOPATH/bin 为了方便使用 Go 下载的可执行文件，将 $GOPATH/bin 加入到PATH 中（如 ~/.bashrc 或 ~/.zshrc）：\n1 2 3 # 适用于unix系统 bash环境 echo \u0026#39;export PATH=$PATH:$GOPATH/bin\u0026#39; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc 文件 Go 语言提供文件处理的标准库提供了：\nos：与操作系统的交互实现 io：读写文件 io 操作 fs：文件系统的抽象 打开 os 库提供了两个函数\nOpen：返回一个文件指针和一个错误 OpenFile：对 Open 的封转，增加了更多粒度的控制 os.Open() 定义\n1 2 3 4 5 6 7 // Open opens the named file for reading. If successful, methods on // the returned file can be used for reading; the associated file // descriptor has mode O_RDONLY. // If there is an error, it will be of type *PathError. func Open(name string) (*File, error) { return OpenFile(name, O_RDONLY, 0) } 示例\n1 2 3 4 5 6 7 8 func open() { file, err := os.Open(\u0026#34;README.md\u0026#34;) if err != nil { panic(err) } defer file.Close() fmt.Println(file) } os.OpenFile() 定义\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // OpenFile is the generalized open call; most users will use Open // or Create instead. It opens the named file with specified flag // (O_RDONLY etc.). If the file does not exist, and the O_CREATE flag // is passed, it is created with mode perm (before umask). If successful, // methods on the returned File can be used for I/O. // If there is an error, it will be of type *PathError. func OpenFile(name string, flag int, perm FileMode) (*File, error) { testlog.Open(name) f, err := openFileNolog(name, flag, perm) if err != nil { return nil, err } f.appendMode = flag\u0026amp;O_APPEND != 0 return f, nil } flag 表示描述符，可选的有\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // Flags to OpenFile wrapping those of the underlying system. Not all // flags may be implemented on a given system. const ( // Exactly one of O_RDONLY, O_WRONLY, or O_RDWR must be specified. O_RDONLY int = syscall.O_RDONLY // open the file read-only. O_WRONLY int = syscall.O_WRONLY // open the file write-only. O_RDWR int = syscall.O_RDWR // open the file read-write. // The remaining values may be or\u0026#39;ed in to control behavior. O_APPEND int = syscall.O_APPEND // append data to the file when writing. O_CREATE int = syscall.O_CREAT // create a new file if none exists. O_EXCL int = syscall.O_EXCL // used with O_CREATE, file must not exist. O_SYNC int = syscall.O_SYNC // open for synchronous I/O. O_TRUNC int = syscall.O_TRUNC // truncate regular writable file when opened. ) perm 表示文件的权限，可选有\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 const ( ModeDir = fs.ModeDir // d: 目录 ModeAppend = fs.ModeAppend // a: 只能添加 ModeExclusive = fs.ModeExclusive // l: 专用 ModeTemporary = fs.ModeTemporary // T: 临时文件 ModeSymlink = fs.ModeSymlink // L: 符号链接 ModeDevice = fs.ModeDevice // D: 设备文件 ModeNamedPipe = fs.ModeNamedPipe // p: 具名管道 (FIFO) ModeSocket = fs.ModeSocket // S: Unix 域套接字 ModeSetuid = fs.ModeSetuid // u: setuid ModeSetgid = fs.ModeSetgid // g: setgid ModeCharDevice = fs.ModeCharDevice // c: Unix 字符设备, 前提是设置了 ModeDevice ModeSticky = fs.ModeSticky // t: 黏滞位 ModeIrregular = fs.ModeIrregular // ?: 非常规文件 // 类型位的掩码. 对于常规文件而言，什么都不会设置. ModeType = fs.ModeType ModePerm = fs.ModePerm // Unix 权限位, 0o777 ) 示例\n1 2 3 4 5 6 7 8 func openFile() { // 指定只读的方法打开，权限为 0644 file, err := os.OpenFile(\u0026#34;README.md\u0026#34;, os.O_RDONLY, 0644) if err != nil { panic(err) } fmt.Println(file) } 读取 打开文件后，就可以读取文件内容了\n有以下方法可以读取文件\n文件对象.Read() 文件对象.ReadAt() os.ReadFile() io.ReadAll() 文件对象.Read() 定义\n1 2 3 4 5 6 7 8 9 10 // Read reads up to len(b) bytes from the File and stores them in b. // It returns the number of bytes read and any error encountered. // At end of file, Read returns 0, io.EOF. func (f *File) Read(b []byte) (n int, err error) { if err := f.checkValid(\u0026#34;read\u0026#34;); err != nil { return 0, err } n, e := f.read(b) return n, f.wrapErr(\u0026#34;read\u0026#34;, e) } 写入 结构体 定义\n1 2 3 4 5 6 type struct_name struct { member1 datatype; member2 datatype; member3 datatype; ... } 案例：\n1 2 3 4 5 6 type Person struct { name string age int job string salary int } 访问 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 package main import (\u0026#34;fmt\u0026#34;) type Person struct { name string age int job string salary int } func main() { var pers1 Person var pers2 Person // Pers1 specification pers1.name = \u0026#34;Hege\u0026#34; pers1.age = 45 pers1.job = \u0026#34;Teacher\u0026#34; pers1.salary = 6000 // Pers2 specification pers2.name = \u0026#34;Cecilie\u0026#34; pers2.age = 24 pers2.job = \u0026#34;Marketing\u0026#34; pers2.salary = 4500 // Access and print Pers1 info fmt.Println(\u0026#34;Name: \u0026#34;, pers1.name) fmt.Println(\u0026#34;Age: \u0026#34;, pers1.age) fmt.Println(\u0026#34;Job: \u0026#34;, pers1.job) fmt.Println(\u0026#34;Salary: \u0026#34;, pers1.salary) // Access and print Pers2 info fmt.Println(\u0026#34;Name: \u0026#34;, pers2.name) fmt.Println(\u0026#34;Age: \u0026#34;, pers2.age) fmt.Println(\u0026#34;Job: \u0026#34;, pers2.job) fmt.Println(\u0026#34;Salary: \u0026#34;, pers2.salary) } ","date":"2025-04-02T09:16:03+08:00","permalink":"https://hublog.netlify.app/p/250402091603/","title":"Go语言指南"},{"content":"简介 Starship 是一个跨 shell 的极简、速度极快的提示符。 它的目标是为所有 shell 提供一致、美观且可定制的提示符体验。 简单来说，它让你的命令行提示符变得更漂亮、更有用。\n官网：https://starship.rs/zh-CN/\n源码：https://github.com/starship/starship\n主要特点: 跨 Shell 兼容: 支持 Bash, Zsh, Fish, PowerShell, Ion, Elvish, Nushell, Xonsh 等多种 shell。这意味着你可以在不同的 shell 环境中使用相同的提示符配置。 速度快: 用 Rust 编写，性能极佳。即使在大型项目或慢速文件系统中，也能保持快速响应。 高度可定制: 通过简单的配置文件，你可以完全控制提示符的外观和行为。 可以自定义显示哪些信息、使用什么颜色、图标等等。 信息丰富: 可以显示各种有用的信息，例如： 当前目录 Git 分支和状态 当前使用的编程语言版本 (例如 Python, Node.js, Go, Rust 等) 电池状态 操作系统 Docker 状态 虚拟机状态 执行时间 错误码 等等 易于安装和配置: 提供了简单的安装脚本和清晰的文档，方便用户快速上手。 主题支持: 可以轻松切换不同的主题，或者创建自己的主题。 插件支持: 虽然 Starship 本身已经很强大，但它也支持插件，可以进一步扩展其功能。 Unicode 支持: 支持 Unicode 字符，可以显示各种图标和符号。 为什么使用 Starship?\n提升效率: 通过显示有用的信息，可以帮助你更快地了解当前环境的状态，从而提高工作效率。 美化命令行: 让你的命令行界面更加美观，提升使用体验。 个性化定制: 可以根据自己的喜好定制提示符，打造独一无二的命令行体验。 跨平台一致性: 在不同的操作系统和 shell 环境中使用相同的提示符，保持一致性。 安装 1. 安装 starship 二进制文件： 使用 Shell 命令：\n1 2 curl -sS https://starship.rs/install.sh | sh debian 13\n1 apt install starship 2. 将初始化脚本添加到您的 shell 的配置文件中： Bash 在 ~/.bashrc 的最后，添加以下内容：\n1 2 3 # ~/.bashrc eval \u0026#34;$(starship init bash)\u0026#34; ","date":"2025-04-01T17:55:01+08:00","permalink":"https://hublog.netlify.app/p/250401175501/","title":"starship，跨 shell 的极简、速度极快的提示符"},{"content":" 1 flutter create ","date":"2025-04-01T17:07:14+08:00","permalink":"https://hublog.netlify.app/p/250401170714/","title":"Flutter控制台创建应用"},{"content":"视图 简介 视图是一个或多个表的逻辑显示，它是一种虚拟表，不会存储数据，视图建立在已有表的基础上。通常不做对底层数据的修改\n为什么要使用视图？\n基于视图的特性，可以针对不同的上层需求创建不同的视图，而不需要全部展示数据\n查看 查看当前数据库的所有视图\n1 show full tables where table_type = \u0026#39;VIEW\u0026#39;; 注意 VIEW必须是大写\n1 2 3 4 5 6 select * from information_schema.views where table_schema = database(); 查看所有数据库的视图\n1 2 3 4 select * from information_schema.views; 查看视图结构\n1 desc 视图名称; 查看视图详细定义\n1 show create view 视图名称; 查看视图属性\n1 show table status like 视图名称; 创建 语法\n1 2 create view 视图名称 as 查询语句; 示例：\n1 2 3 4 5 6 7 8 9 10 -- 创建视图 create view employees_view as select * from employees; -- 查询视图 select * from employees_view; 修改 ALTER VIEW\n修尬现有视图的定义，保留权限和依赖\n1 2 alter view 视图名称 as 查询语句; CRETE OR REPLACE VIEW\n视图不存在则创建，不保留权限和依赖\n1 2 create or replace view 视图名称 as 查询语句; 删除 删除视图不会删除数据\n1 drop view 视图名称; 存储过程 简介 存储过程（Stored Procedure）是一组预先编译的 SQL 语句封装，好比编程语言中的函数封转\n查看 查看当前数据库所有存储过程\n1 2 show procedure status where db = database(); 1 2 3 4 5 6 select routine_name from information_schema.routines where routine_type = \u0026#39;PROCEDURE\u0026#39; and routine_schema = database(); 查看所有数据库所有存储过程\n1 show procedure status; 1 select * from information_schema.routines where routine_type = \u0026#39;PROCEDURE\u0026#39;; 注意 PROCEDURE 大写\n查看存储过程定义\n1 show create procedure 存储过程名; 查看指定的存储过程状态\n1 show procedure status like \u0026#39;pattern\u0026#39; 创建 语法\n1 2 3 4 create procedure 存储过程名称(in|out|inout 参数名 参数类型, ...) begin 具体要执行的sql语句 end in：输入参数，如果没有定义参数，默认为 in out：输出参数 inout：既是输入参数，又是输出参数 参数类型可以是 MySQL 数据库中的任意类型。\n由于会存在多条 SQL 语句，所以一般情况下会修改 SQL 结束标识符 ;\n1 2 3 4 5 6 delimiter $ create procedure 存储过程名称(in|out|inout 参数名 参数类型, ...) begin 具体要执行的sql语句 end $ delimiter ; in 模式\n1 2 3 4 5 6 7 8 9 10 11 -- 无参数 -- 创建一个存储过程，查询 employees 表员工数量 delimiter $ create procedure select_employees_procedure() begin select count(*) from employees; end $ delimiter ; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 -- 输入参数 -- 创建一个存储过程，使用输入参数 in 模式，查询指定员工姓名的信息 delimiter $ create procedure select_employee_salary_specify_name_procedure_in( in p_first_name varchar(50), in p_last_name varchar(50) ) begin select * from employees where first_name = p_first_name and last_name = p_last_name; end $ delimiter ; out 模式\n1 2 3 4 5 6 7 8 9 10 11 -- 输出参数 -- 创建存储过程show_min_salary()，查看 employees 表的最低薪资值。并将最低薪资通过OUT参数 minsalary 输出 delimiter $ create procedure select_employees_min_salary_procedure(out minsalary double) begin select min(salary) into minsalary from employees; end $ delimiter ; 调用 存储调用需要使用 call关键字\n格式\n1 call 存储过程名(参数列表); in 模式\n1 2 -- 调用之前创建的 select_employees_procedure call select_employees_procedure(); 1 2 3 4 -- 调用存储过程 set @first_name = \u0026#39;Adam\u0026#39;; set @last_name = \u0026#39;Fripp\u0026#39;; call select_employee_salary_specify_name_procedure_in(@first_name, @last_name); out 模式\n1 2 3 -- 调用之前创建的 select_employees_min_salary_procedure call select_employees_min_salary_procedure(@min_salary); select @min_salary; inout 模式\n修改 删除 ","date":"2025-04-01T12:09:32+08:00","permalink":"https://hublog.netlify.app/p/250401120932/","title":"MySQL基础篇"},{"content":"简介 SSH（Secure Shell）是一种广泛使用的网络协议，用于在不安全的网络上安全地访问和管理远程服务器或其他设备。 它通过加密网络连接来保护数据传输，防止窃听、中间人攻击和其他安全威胁。 简而言之，SSH 提供了一种安全的远程登录方式。\n主要功能 远程登录: 允许用户从本地计算机安全地连接到远程服务器，并像直接在服务器上操作一样执行命令。 安全文件传输: 提供 scp (secure copy) 和 sftp (secure FTP) 等工具，用于安全地在本地计算机和远程服务器之间传输文件。 端口转发 (Tunneling): 允许用户将本地端口转发到远程服务器上的端口，或者将远程服务器上的端口转发到本地端口。 这可以用于创建安全的隧道来访问受防火墙保护的应用程序或服务。 X11 转发: 允许用户在远程服务器上运行图形化应用程序，并将它们显示在本地计算机上。 工作原理 SSH 使用客户端-服务器模型。 SSH 客户端运行在用户的本地计算机上，而 SSH 服务器运行在远程服务器上。 连接过程如下：\n连接请求: SSH 客户端发起与 SSH 服务器的连接请求。 密钥交换 (Key Exchange): 客户端和服务器协商一个用于加密连接的密钥。 SSH 协议支持多种密钥交换算法，如 Diffie-Hellman 和椭圆曲线 Diffie-Hellman。 身份验证 (Authentication): 客户端需要验证其身份才能访问服务器。 SSH 支持多种身份验证方法，包括： 密码验证: 客户端提供用户名和密码进行验证。 这是一种简单的验证方法，但安全性较低，容易受到暴力破解攻击。 公钥验证: 客户端使用私钥对连接进行签名，服务器使用相应的公钥验证签名。 这是一种更安全的验证方法，也是推荐的方法。 需要事先将公钥添加到服务器的 authorized_keys 文件中。 键盘交互验证 (Keyboard-Interactive Authentication): 一种基于 Challenge-Response 的验证方式，服务器可能会询问多个问题来验证用户身份。 通常用于支持双因素身份验证 (2FA)。 加密通信: 身份验证成功后，客户端和服务器之间的所有通信都将使用协商好的密钥进行加密。 会话管理: 客户端和服务器建立一个 SSH 会话，用户可以在会话中执行命令、传输文件等。 优势 安全性: SSH 使用强大的加密算法来保护数据传输，防止窃听和中间人攻击。 可靠性: SSH 提供了可靠的连接，即使在不稳定的网络环境下也能正常工作。 灵活性: SSH 提供了多种功能，如端口转发和 X11 转发，可以满足各种不同的需求。 标准化: SSH 是一种标准协议，在各种操作系统和平台上都有广泛的支持。 广泛应用: 被广泛用于服务器管理，代码部署，远程协作等场景。 安全性建议 使用公钥验证而不是密码验证。 密码验证容易受到暴力破解攻击，而公钥验证更安全。 禁用 root 用户直接登录。 这可以防止攻击者通过暴力破解 root 用户的密码来获取服务器的完全控制权。 使用强密码。 如果必须使用密码验证，请使用包含大小写字母、数字和特殊字符的强密码。 定期更新 SSH 软件。 软件更新通常包含安全修复，可以防止已知漏洞被利用。 配置防火墙。 限制对 SSH 端口的访问，只允许来自可信 IP 地址的连接。 使用双因素身份验证 (2FA)。 增加额外的安全层，即使密码泄露，攻击者也无法登录。 监控 SSH 日志。 定期检查 SSH 日志，以便及时发现可疑活动。 常用命令 连接主机\n1 ssh username@host 指定使用具体的 key 连接\n1 ssh username@host -i /path/to/your/key 指定端口\n1 ssh username@host -p 22 ","date":"2025-03-30T13:07:00+08:00","permalink":"https://hublog.netlify.app/p/250330130700/","title":"SSH，安全远程连接的强大工具"},{"content":" 1月 January Jan 2月 February Feb 3月 March Mar 4月 Apirl Api 5月 May May 6月 June Jun 7月 July Jul 8月 August Aug 9月 Settember Set 10月 October Oct 11月 November Nov 12月 December Dec 星期日 Sunday Sun 星期一 Monday Mon 星期二 Tuesday Tue 星期三 Wednesday Wed 星期四 Thursday Thu 星期五 Friday Fri 星期六 Saturday Sat ","date":"2025-03-27T23:32:39+08:00","permalink":"https://hublog.netlify.app/p/250327233239/","title":"英语中的日期"},{"content":"简介 tmux 是一个终端多路复用器，允许用户在单个终端窗口内运行多个终端会话。它类似于 GNU Screen，但功能更为强大和灵活。使用 tmux，可以在同一个窗口中分割多个面板，每个面板都可以运行不同的命令或进程。即使断开连接，tmux 也能保持会话状态，允许用户稍后重新连接到相同的会话，继续之前的工作。\n以下是 tmux 的一些主要功能：\n会话管理 用户可以创建、分离、重新连接和管理多个会话。\n每个会话都可以包含多个窗口和面板，方便在不同的任务之间快速切换。\n窗口与面板 可以在一个 tmux 会话中创建多个窗口，每个窗口都相当于一个独立的终端会话。\n窗口可以进一步分割为面板（垂直或水平），每个面板都独立运行，可以同时显示多个命令的输出。\n持久性 tmux 的最大优点之一是持久性。即使你关闭了终端或网络连接中断，tmux 会继续在后台保持运行，所有的进程都会继续执行。之后可以通过重新连接会话来恢复工作状态。\n快捷键 tmux 通过快捷键来高效操作。默认的控制前缀是 Ctrl + b，之后可以按不同的键来执行各种操作（如创建窗口、切换面板等）。\n快捷键 在 tmux 中操作很多都需要一个前缀名来触发\n默认快捷键是：ctrl+b，后续使用 C-b来表示\n使用 tmux 开头的命令表示在命令行执行\n会话管理 新建会话：\n1 tmux 新建会话并指定名字：\n1 tmux new -s 会话名 分离（离开但不关闭）会话：\n1 C-b d 查看所有的会话：\n1 tmux ls 重新进入会话：\n1 tmux a -t 会话名 重命名会话：\n1 C-b , 关闭会话：\n1 C-b \u0026amp; 关闭指定会话：\n1 tmux kill-session -t 会话名 关闭所有会话：\n1 tmux list-sessions | awk \u0026#39;{print $1}\u0026#39; | tr -d \u0026#39;:\u0026#39; | xargs -I {} tmux kill-session -t {} 关闭所有会话（另一种方法）：\n1 tmux kill-server 窗口管理 垂直分割窗口：\n1 C-b % 水平分割窗口：\n1 C-b \u0026#34; 在窗口中移动光标：\n1 C-b 方向键 关闭窗口：\n1 C-b x 输入 y 确定关闭。关闭最后一个窗口将会关闭会话。\n","date":"2025-03-27T11:01:45+08:00","permalink":"https://hublog.netlify.app/p/250327110145/","title":"tmux，终端复用神器"},{"content":"简介 本文将以图文的方式，展示如何在虚拟机上安装 NixOS。\n大致步骤\n下载镜像 选择地区，世间 格式化磁盘 挂在磁盘 可供参考的文档\nNixOS 中文 准备 点击下载镜像：latest-nixos-minimal-x86_64-linux.iso\n进入安装界面\n选择第一个，进入命令行\n连接网络 如果你是实体机，可以插上网络直连网络，或者通过WiFi连接\nWiFi连接跟着以下步骤\n1 2 3 4 5 # 切换到root用户 sudo su - # 启动 wpa_supplicant # wpa_supplicant 是nixos的wifi管理服务，可以通过 wpa_cli 配置网络 systemctl start wpa_supplicant 使用 wpa_cli配置网络\n。。。\n","date":"2025-03-26T20:20:40+08:00","permalink":"https://hublog.netlify.app/p/250326202040/","title":"nixos命令行安装（待续）"},{"content":"简介 国内访问 GitHub 还是时不时的抽风，有些时候配置代理需要额外且花费大量的代价，今天这个项目将使用修改 hosts 的方式加速访问 GitHub 的速度\n下面的地址无需访问 GitHub 即可获取到最新的 hosts 内容：\n文件：https://raw.hellogithub.com/hosts JSON：https://raw.hellogithub.com/hosts.json hosts 文件在每个系统的位置不一，详情如下：\nWindows 系统：C:\\Windows\\System32\\drivers\\etc\\hosts Linux 系统：/etc/hosts Mac（苹果电脑）系统：/etc/hosts Android（安卓）系统：/system/etc/hosts iPhone（iOS）系统：/etc/hosts 手动复制 点击展开 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 # GitHub520 Host Start 140.82.112.26 alive.github.com 140.82.112.5 api.github.com 185.199.109.153 assets-cdn.github.com 185.199.111.133 avatars.githubusercontent.com 185.199.111.133 avatars0.githubusercontent.com 185.199.111.133 avatars1.githubusercontent.com 185.199.111.133 avatars2.githubusercontent.com 185.199.111.133 avatars3.githubusercontent.com 185.199.111.133 avatars4.githubusercontent.com 185.199.111.133 avatars5.githubusercontent.com 185.199.111.133 camo.githubusercontent.com 140.82.113.21 central.github.com 185.199.111.133 cloud.githubusercontent.com 140.82.112.10 codeload.github.com 140.82.113.22 collector.github.com 127.0.0.100 desktop.githubusercontent.com 185.199.111.133 favicons.githubusercontent.com 140.82.112.4 gist.github.com 16.15.176.0 github-cloud.s3.amazonaws.com 16.182.106.249 github-com.s3.amazonaws.com 52.216.62.241 github-production-release-asset-2e65be.s3.amazonaws.com 52.216.48.33 github-production-repository-file-5c1aeb.s3.amazonaws.com 3.5.0.201 github-production-user-asset-6210df.s3.amazonaws.com 192.0.66.2 github.blog 140.82.114.3 github.com 140.82.114.17 github.community 185.199.108.154 github.githubassets.com 151.101.193.194 github.global.ssl.fastly.net 185.199.109.153 github.io 185.199.111.133 github.map.fastly.net 185.199.109.153 githubstatus.com 140.82.113.25 live.github.com 185.199.111.133 media.githubusercontent.com 185.199.111.133 objects.githubusercontent.com 13.107.42.16 pipelines.actions.githubusercontent.com 185.199.111.133 raw.githubusercontent.com 185.199.111.133 user-images.githubusercontent.com 140.82.114.21 education.github.com 185.199.111.133 private-user-images.githubusercontent.com # Update time: 2025-03-23T14:07:29+08:00 # Update url: https://raw.hellogithub.com/hosts # Star me: https://github.com/521xueweihan/GitHub520 # GitHub520 Host End 激活生效 大部分情况下是直接生效，如未生效可尝试下面的办法，刷新 DNS：\nWindows：在 CMD 窗口输入：ipconfig /flushdns Linux 命令：sudo nscd restart，如报错则须安装：sudo apt install nscd 或 sudo /etc/init.d/nscd restart Mac 命令：sudo killall -HUP mDNSResponder 自动更新 推荐 SwitchHosts 工具管理 hosts\n以 SwitchHosts 为例，看一下怎么使用的，配置参考下面：\nHosts 类型: Remote Hosts 标题: 随意 URL: https://raw.hellogithub.com/hosts 自动刷新: 最好选 1 小时 Windows Linux 1 sudo sh -c \u0026#39;sed -i \u0026#34;/# GitHub520 Host Start/Q\u0026#34; /etc/hosts \u0026amp;\u0026amp; curl https://raw.hellogithub.com/hosts \u0026gt;\u0026gt; /etc/hosts\u0026#39; Docker 1 cp /etc/hosts ~/hosts.new \u0026amp;\u0026amp; sed -i \u0026#34;/# GitHub520 Host Start/Q\u0026#34; ~/hosts.new \u0026amp;\u0026amp; curl https://raw.hellogithub.com/hosts \u0026gt;\u0026gt; ~/hosts.new \u0026amp;\u0026amp; cp -f ~/hosts.new /etc/hosts AdGuard 在 过滤器\u0026gt;DNS 封锁清单\u0026gt;添加阻止列表\u0026gt;添加一个自定义列表，配置如下：\n名称：随意 URL：https://raw.hellogithub.com/hosts（和上面 SwitchHosts 使用的一样） 更新间隔在 设置 \u0026gt; 常规设置 \u0026gt; 过滤器更新间隔（设置一小时一次即可），记得勾选上 使用过滤器和 Hosts 文件以拦截指定域名\n","date":"2025-03-23T15:49:52+08:00","permalink":"https://hublog.netlify.app/p/250323154952/","title":"GitHub520，加速访问GitHub的神器"},{"content":"简介 lazy.nvim is a modern plugin manager for Neovim.\n官网：https://lazy.folke.io/\n准备 Neovim \u0026gt;= 0.8.0 (needs to be built with LuaJIT) Git \u0026gt;= 2.19.0 (for partial clones support) a Nerd Font (optional) luarocks to install rockspecs. You can remove rockspec from opts.pkg.sources to disable this feature. 安装 推荐使用结构化的文件结构\n1 2 mkdir -p ~/.config/nvim vim ~/.config/nvim/init.lua 1 require(\u0026#34;config.lazy\u0026#34;) 1 2 mkdir -p ~/.config/nvim/lua/config vim ~/.config/nvim/lua/config/lazy.lua 1 mkdir -p ~/.config/nvim/lua/plugins 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 -- Bootstrap lazy.nvim local lazypath = vim.fn.stdpath(\u0026#34;data\u0026#34;) .. \u0026#34;/lazy/lazy.nvim\u0026#34; if not (vim.uv or vim.loop).fs_stat(lazypath) then local lazyrepo = \u0026#34;https://github.com/folke/lazy.nvim.git\u0026#34; local out = vim.fn.system({ \u0026#34;git\u0026#34;, \u0026#34;clone\u0026#34;, \u0026#34;--filter=blob:none\u0026#34;, \u0026#34;--branch=stable\u0026#34;, lazyrepo, lazypath }) if vim.v.shell_error ~= 0 then vim.api.nvim_echo({ { \u0026#34;Failed to clone lazy.nvim:\\n\u0026#34;, \u0026#34;ErrorMsg\u0026#34; }, { out, \u0026#34;WarningMsg\u0026#34; }, { \u0026#34;\\nPress any key to exit...\u0026#34; }, }, true, {}) vim.fn.getchar() os.exit(1) end end vim.opt.rtp:prepend(lazypath) -- Make sure to setup `mapleader` and `maplocalleader` before -- loading lazy.nvim so that mappings are correct. -- This is also a good place to setup other settings (vim.opt) vim.g.mapleader = \u0026#34; \u0026#34; vim.g.maplocalleader = \u0026#34;\\\\\u0026#34; -- Setup lazy.nvim require(\u0026#34;lazy\u0026#34;).setup({ spec = { -- import your plugins { import = \u0026#34;plugins\u0026#34; }, }, -- Configure any other settings here. See the documentation for more details. -- colorscheme that will be used when installing plugins. install = { colorscheme = { \u0026#34;habamax\u0026#34; } }, -- automatically check for plugin updates checker = { enabled = true }, }) You can then create your plugin specs in ~/.config/nvim/lua/plugins/. Each file should return a table with the plugins you want to install.\nFor more info see Structuring Your Plugins\n~/.config/nvim ├── lua │ ├── config │ │ └── lazy.lua │ └── plugins │ ├── spec1.lua │ ├── ** │ └── spec2.lua └── init.lua\n","date":"2025-03-23T15:24:52+08:00","permalink":"https://hublog.netlify.app/p/250323152452/","title":"lazy.nvim管理你的neovim配置"},{"content":"Hostwinds Hostwinds 在==西雅图==、==达拉斯==和==阿姆斯特丹==三个数据中心，提供==100MB==、==1GB==、==10GB==大小的 测速文件 下载。如果你需要测试连接这些国外地区的宽带速度，可以尝试在浏览器、服务器等需要测试的地方，直接下载如下链接的文件。\n西雅图测速文件 https://sea-repo.hostwinds.net/tests/100mb.zip https://sea-repo.hostwinds.net/tests/1gb.zip https://sea-repo.hostwinds.net/tests/10gb.zip 达拉斯测速文件 https://sea-repo.hostwinds.net/tests/100mb.zip https://sea-repo.hostwinds.net/tests/1gb.zip https://sea-repo.hostwinds.net/tests/10gb.zip 阿姆斯特丹测速文件 https://ams-repo.hostwinds.net/tests/100mb.zip https://ams-repo.hostwinds.net/tests/1gb.zip https://ams-repo.hostwinds.net/tests/10gb.zip ","date":"2025-03-22T18:52:02+08:00","permalink":"https://hublog.netlify.app/p/250322185202/","title":"VPS下载速度测试，测速文件"},{"content":"表基础知识 ","date":"2025-03-21T23:26:07+08:00","permalink":"https://hublog.netlify.app/p/pg-chapter05/","title":"PostgreSQL教程第5章：数据定义"},{"content":"DNS 列表-国内 阿里 阿里DNS已经限速，不建议使用\n1 2 3 4 5 6 IPv4: 223.5.5.5 IPv4: 223.6.6.6 IPv6: 2400:3200::1 IPv6: 2400:3200:baba::1 DoT: dns.alidns.com DoH: https://dns.alidns.com/dns-query 114dns 1 2 IPv4: 114.114.114.114 IPv4: 114.114.115.115 Dnspod 1 2 IPv4: 119.29.29.29 DoH: https://doh.pub/dns-query DNS 列表-国外 Google 1 2 3 4 IPv4: 8.8.8.8 IPv4: 8.8.4.4 DoT: dns.google DoH: https://dns.google/dns-query cloudflare 1 2 3 4 5 6 7 IPv4: 1.1.1.1 IPv4: 1.0.0.1 IPv6: 2606:4700:4700::1111 IPv6: 2606:4700:4700::1001 DoH：https://1.1.1.1/dns-query DoH：https://1.0.0.1/dns-query DoH：https://cloudflare-dns.com/dns-query DNS 泄露 ","date":"2025-03-21T17:51:25+08:00","permalink":"https://hublog.netlify.app/p/250321175125/","title":"DNS指南，公共DNS列表，DNS泄露"},{"content":"增加公共备注 ","date":"2025-03-20T16:12:05+08:00","permalink":"https://hublog.netlify.app/p/250320161205/","title":"哪吒探针配置"},{"content":" 警告\nserv00 官方更新 tos，不再支持 nezha 探针\n详情：https://forum.serv00.com/d/2787-april-cleaning-and-new-tos\n简介 Dashboard 地址：https://github.com/nezhahq/nezha\nAgent 地址：https://github.com/nezhahq/agent\n一键脚本-agent 交互安装 1 2 bash -c \u0026#34;$(curl -sL https://raw.githubusercontent.com/muyiacc/serv00-nezha/main/nezha-agent.sh)\u0026#34; \\ -- install 无交互安装 1 2 3 4 5 PANEL_ADDRESS=\u0026#34;example:8008\u0026#34; \\ SERVER_KEY=\u0026#34;iK3Snw4Ev78MzM\u0026#34; \\ ENABLE_TLS=false \\ bash -c \u0026#34;$(curl -sL https://raw.githubusercontent.com/muyiacc/serv00-nezha/main/nezha-agent.sh)\u0026#34; \\ -- install 指定 UUID\n1 2 3 4 5 6 PANEL_ADDRESS=\u0026#34;example:8008\u0026#34; \\ SERVER_KEY=\u0026#34;iK3Snw4Ev78MzM\u0026#34; \\ ENABLE_TLS=false \\ UUID=\u0026#34;6c3fe883-055b-11f0-8047-3cecef19f58c\u0026#34; \\ bash -c \u0026#34;$(curl -sL https://raw.githubusercontent.com/muyiacc/serv00-nezha/main/nezha-agent.sh)\u0026#34; \\ -- install 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/bin/sh # 定义变量 NEZHA_AGENT_DIR=\u0026#34;$HOME/.nezha/agent\u0026#34; NEZHA_AGENT_EXECUTABLE=\u0026#34;$NEZHA_AGENT_DIR/nezha-agent\u0026#34; NEZHA_START_SCRIPT=\u0026#34;$NEZHA_AGENT_DIR/start.sh\u0026#34; NEZHA_LOG_FILE=\u0026#34;$NEZHA_AGENT_DIR/nezha-agent.log\u0026#34; # 默认值，可以被 curl 覆盖 PANEL_ADDRESS=\u0026#34;面板域名或者ip:端口\u0026#34; SERVER_KEY=\u0026#34;服务器密钥\u0026#34; # 函数：启动哪吒探针 start_nezha_agent() { echo \u0026#34;启动哪吒探针...\u0026#34; nohup \u0026#34;$NEZHA_AGENT_EXECUTABLE\u0026#34; \u0026#34;-s\u0026#34; \u0026#34;$PANEL_ADDRESS\u0026#34; \u0026#34;-p\u0026#34; \u0026#34;$SERVER_KEY\u0026#34; \u0026#34;--tls\u0026#34; \u0026gt; \u0026#34;$NEZHA_LOG_FILE\u0026#34; 2\u0026gt;\u0026amp;1 \u0026amp; echo \u0026#34;哪吒探针已在后台启动，日志文件：$NEZHA_LOG_FILE\u0026#34; } # 函数：停止哪吒探针 stop_nezha_agent() { echo \u0026#34;停止哪吒探针...\u0026#34; # 查找哪吒探针的进程 ID 并杀死它 PID=$(ps aux | grep \u0026#34;$NEZHA_AGENT_EXECUTABLE\u0026#34; | grep -v grep | awk \u0026#39;{print $2}\u0026#39;) if [ -n \u0026#34;$PID\u0026#34; ]; then kill -9 \u0026#34;$PID\u0026#34; echo \u0026#34;哪吒探针进程 (PID: $PID) 已被杀死。\u0026#34; else echo \u0026#34;没有找到正在运行的哪吒探针进程。\u0026#34; fi } # 函数：处理 curl 请求 handle_curl_request() { if [ -n \u0026#34;$1\u0026#34; ]; then case \u0026#34;$1\u0026#34; in panel_address) PANEL_ADDRESS=\u0026#34;$2\u0026#34; echo \u0026#34;面板地址已更新为: $PANEL_ADDRESS\u0026#34; ;; server_key) SERVER_KEY=\u0026#34;$2\u0026#34; echo \u0026#34;服务器密钥已更新\u0026#34; ;; start) start_nezha_agent ;; stop) stop_nezha_agent ;; restart) stop_nezha_agent sleep 2 # 等待进程结束 start_nezha_agent ;; *) echo \u0026#34;无效的参数: $1\u0026#34; echo \u0026#34;用法: curl \u0026#39;http://\u0026lt;服务器IP\u0026gt;:\u0026lt;端口\u0026gt;?panel_address=你的面板地址\u0026amp;server_key=你的密钥\u0026amp;start\u0026#39;\u0026#34; echo \u0026#34; curl \u0026#39;http://\u0026lt;服务器IP\u0026gt;:\u0026lt;端口\u0026gt;?stop\u0026#39;\u0026#34; echo \u0026#34; curl \u0026#39;http://\u0026lt;服务器IP\u0026gt;:\u0026lt;端口\u0026gt;?restart\u0026#39;\u0026#34; exit 1 ;; esac else echo \u0026#34;没有提供参数。\u0026#34; echo \u0026#34;用法: curl \u0026#39;http://\u0026lt;服务器IP\u0026gt;:\u0026lt;端口\u0026gt;?panel_address=你的面板地址\u0026amp;server_key=你的密钥\u0026amp;start\u0026#39;\u0026#34; echo \u0026#34; curl \u0026#39;http://\u0026lt;服务器IP\u0026gt;:\u0026lt;端口\u0026gt;?stop\u0026#39;\u0026#34; echo \u0026#34; curl \u0026#39;http://\u0026lt;服务器IP\u0026gt;:\u0026lt;端口\u0026gt;?restart\u0026#39;\u0026#34; exit 1 fi } # 创建目录（如果不存在） mkdir -p \u0026#34;$NEZHA_AGENT_DIR\u0026#34; # 创建启动脚本 cat \u0026gt; \u0026#34;$NEZHA_START_SCRIPT\u0026#34; \u0026lt;\u0026lt;EOL #!/bin/sh nohup \u0026#34;$NEZHA_AGENT_EXECUTABLE\u0026#34; \u0026#34;-s\u0026#34; \u0026#34;$PANEL_ADDRESS\u0026#34; \u0026#34;-p\u0026#34; \u0026#34;$SERVER_KEY\u0026#34; \u0026#34;--tls\u0026#34; \u0026gt; \u0026#34;$NEZHA_LOG_FILE\u0026#34; 2\u0026gt;\u0026amp;1 \u0026amp; EOL # 赋予执行权限 chmod +x \u0026#34;$NEZHA_START_SCRIPT\u0026#34; # 检查是否需要处理 curl 请求 if [ -n \u0026#34;$QUERY_STRING\u0026#34; ]; then # 解析 QUERY_STRING IFS=\u0026#39;\u0026amp;\u0026#39; read -r -a PARAMS \u0026lt;\u0026lt;\u0026lt; \u0026#34;$QUERY_STRING\u0026#34; for PARAM in \u0026#34;${PARAMS[@]}\u0026#34;; do IFS=\u0026#39;=\u0026#39; read -r KEY VALUE \u0026lt;\u0026lt;\u0026lt; \u0026#34;$PARAM\u0026#34; case \u0026#34;$KEY\u0026#34; in panel_address) PANEL_ADDRESS=\u0026#34;$VALUE\u0026#34; ;; server_key) SERVER_KEY=\u0026#34;$VALUE\u0026#34; ;; action) ACTION=\u0026#34;$VALUE\u0026#34; ;; esac done # 根据 action 调用相应的函数 case \u0026#34;$ACTION\u0026#34; in start) start_nezha_agent ;; stop) stop_nezha_agent ;; restart) stop_nezha_agent sleep 2 start_nezha_agent ;; *) echo \u0026#34;无效的 action: $ACTION\u0026#34; exit 1 ;; esac else # 如果没有 curl 请求，则默认启动哪吒探针 start_nezha_agent fi exit 0 Agent 安装 下载解压\n1 mkdir -p $HOME/.nezha/tmp $HOME/.nezha/agent 1 curl -sL https://github.com/nezhahq/agent/releases/download/v1.9.6/nezha-agent_freebsd_amd64.zip -o $HOME/.nezha/tmp/nezha-agent_freebsd_amd64.zip 1 unzip $HOME/.nezha/tmp/nezha-agent_freebsd_amd64.zip -d $HOME/.nezha/agent 赋予运行权限\n1 chmod +x $HOME/.nezha/agent/nezha-agent 创建配置文件\n1 vim $HOME/.nezha/agent/config.yml 填入以下内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 client_secret: 安全密钥 debug: false disable_auto_update: false disable_command_execute: false disable_force_update: false disable_nat: false disable_send_query: false gpu: false insecure_tls: false ip_report_period: 0 report_delay: 0 self_update_period: 0 server: 服务地址 skip_connection_count: false skip_procs_count: false temperature: false tls: 服务是否使用tls连接 use_gitee_to_upgrade: false use_ipv6_country_code: false uuid: 随机uuid client_secret：安全密钥 server：面板设置的连接地址 tls：面板设置的连接是否启用 tls uuid：随机的 UUID 启动 1 $HOME/.nezha/agent/nezha-agent -c $HOME/.nezha/agent/config.yml 编写启动脚本\n1 vim $HOME/.nezha/agent/start.sh 修改下面的内容后保存\n1 2 #!/bin/sh nohup $HOME/.nezha/agent/nezha-agent -c $HOME/.nezha/agent/config.yml \u0026gt; $HOME/.nezha/agent/nezha-agent.log 2\u0026gt;\u0026amp;1 \u0026amp; 1 chmod +x $HOME/.nezha/agent/start.sh 启动\n1 $HOME/.nezha/agent/start.sh 卸载 1 2 3 4 5 6 7 ## 停止服务 killall nezha-agent ## 删除 agent 文件夹 rm -rf $HOME/.nezha/agent/ ## 删除整个哪吒文件夹 rm -rf $HOME/.nezha ","date":"2025-03-20T12:35:13+08:00","permalink":"https://hublog.netlify.app/p/250320123513/","title":"nezha，哪吒探针v1版之serv00安装"},{"content":"简介 Dashboard 最后一个 v0 版本截止到 v0.20.13\n地址：https://github.com/nezhahq/nezha/releases/tag/v0.20.13\n安装 1 2 mkdir -p /opt/nezha/dashboard cd /opt/nezha/dashboard 1 2 3 curl -OL https://github.com/nezhahq/nezha/releases/download/v0.20.13/dashboard-linux-amd64.zip unzip dashboard-linux-amd64.zip -d . chmod +x dashboard-linux-amd64 Agent 准备 准备一个带有 root 用户权限的用户操作\n下载\n1 wget -O nezha-agent.zip https://github.com/nezhahq/agent/releases/download/v0.20.5/nezha-agent_linux_amd64.zip 中国镜像加速\n1 wget -O nezha-agent.zip http://gh.ggf.ip-ddns.com/https://github.com/nezhahq/agent/releases/download/v0.20.5/nezha-agent_linux_amd64.zip 解压文件\n1 2 sudo mkdir -p /opt/nezha/agent sudo unzip nezha-agent.zip -d /opt/nezha/agent 赋予运行权限\n1 sudo chmod +x /opt/nezha/agent/nezha-agent 系统服务 1 sudo vim /etc/systemd/system/nezha-agent.service 如果没有面板使用，需要将 \u0026ldquo;\u0026ndash;tls\u0026rdquo; 删除\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 [Unit] Description=哪吒探针监控端 ConditionFileIsExecutable=/opt/nezha/nezha-agent [Service] StartLimitInterval=5 StartLimitBurst=10 ExecStart=/opt/nezha/agent/nezha-agent \u0026#34;-s\u0026#34; \u0026#34;面板域名或者ip:端口\u0026#34; \u0026#34;-p\u0026#34; \u0026#34;服务器密钥\u0026#34; \u0026#34;--tls\u0026#34; WorkingDirectory=用户目录 Restart=always RestartSec=120 EnvironmentFile=-/etc/sysconfig/nezha-agent [Install] WantedBy=multi-user.target 保存文件并重新加载服务配置\n1 sudo systemctl daemon-reload 启动 启动服务\n1 sudo systemctl start nezha-agent 开机自启动\n1 sudo systemctl enable nezha-agent 查看状态\n1 sudo systemctl status nezha-agent ","date":"2025-03-20T10:17:09+08:00","permalink":"https://hublog.netlify.app/p/250320101709/","title":"nezha，哪吒探针v0版安装"},{"content":"简介 开源、轻量、易用的服务器监控与运维工具\n一键安装 支持一键安装面板和监控服务，操作便捷。兼容主流系统，包括 Linux、Windows、macOS、OpenWRT 以及群晖。\n实时监控 支持同时监控多个服务器的状态，提供历史网络状态和延迟图表，监控网页、端口可用性和 SSL 证书状态。支持故障和流量等状态告警，可通过 Telegram、邮件、微信等多种方式提醒。\n轻松运维 提供 API 获取服务器状态，支持 WebSSH、DDNS 和流量监控。可设置定时和触发任务，并批量执行服务器任务。\n部署 dashboard 一键脚本 在面板服务器中，运行以下安装脚本：\n1 curl -L https://raw.githubusercontent.com/nezhahq/scripts/refs/heads/main/install.sh -o nezha.sh \u0026amp;\u0026amp; chmod +x nezha.sh \u0026amp;\u0026amp; sudo ./nezha.sh 如果你的服务器位于中国大陆，可以使用镜像：\n1 curl -L https://gitee.com/naibahq/scripts/raw/main/install.sh -o nezha.sh \u0026amp;\u0026amp; chmod +x nezha.sh \u0026amp;\u0026amp; sudo CN=true ./nezha.sh 以 Docker 安装为例，安装完成后按提示输入以下信息：\n请输入站点标题: - 自定义站点标题。 请输入暴露端口: - 公开访问端口（默认 8008，可自定义）。 请指定后台语言: - 选择语言偏好。 输入完成后，等待拉取 Docker 镜像。安装结束后，如果一切正常，你可以通过域名和端口号访问 Dashboard，例如：\nhttp://dashboard.example.com:8008\n如果需要再次运行安装脚本，可输入以下命令：\nbash\n1 ./nezha.sh 打开管理脚本。\nclaw 1 2 apt update apt install -y curl unzip 1 2 mkdir -p ~/.cache/nezha/dashboard mkdir -p ~/.local/nezha/dashboard 1 curl -L https://github.com/nezhahq/nezha/releases/download/v1.12.0/dashboard-linux-amd64.zip -o ~/.cache/nezha/dashboard/dashboard-linux-amd64.zip 1 unzip ~/.cache/nezha/dashboard/dashboard.zip -d ~/.local/nezha/dashboard 1 chmod +x ~/.local/nezha/dashboard/dashboard-linux-amd64 Agent 安装 Agent 找到后台，复制对应的操作系统命令粘贴执行\n卸载 Agent 卸载单个服务\n1 2 3 4 ## 停止并卸载服务 /opt/nezha/agent/nezha-agent service uninstall ## 删除 Agent 文件夹 rm -rf /opt/nezha/agent/ 安装了多个服务并想要全部卸载，可以使用 Agent 安装脚本的卸载功能\n1 2 3 4 ## 多个服务全部卸载 curl -L https://raw.githubusercontent.com/nezhahq/scripts/main/agent/install.sh | bash uninstall ## 删除 Agent 文件夹 rm -rf /opt/nezha/agent claw ","date":"2025-03-20T09:13:55+08:00","permalink":"https://hublog.netlify.app/p/250320091355/","title":"nezha，哪吒探针v1版安装"},{"content":"External Player 使用外部播放器播放网页中的视频\n支持的网站\nyt-dlp 支持的网站 B 站 B 站直播 樱花动漫 Girigiri 爱动漫 / Girigiri 爱动漫 LIBVIO 吐槽弹幕网 萌番动漫馆 巴哈姆特 官方 GitHub 仓库：https://github.com/LuckyPuppy514/external-player\n安装 安装油猴插件：https://www.tampermonkey.net/index.php 安装脚本：https://greasyfork.org/zh-CN/scripts/518677-external-player 安装 URL Scheme Handler URL Scheme Handler 为 Windows 应用添加自定义 URL Scheme 以便从浏览器调用\n项目地址：https://github.com/LuckyPuppy514/url-scheme-handler\n下载地址：\nscheme-handler.exe：v1.0.4 油猴插件 地址：https://www.tampermonkey.net/index.php\n","date":"2025-03-19T22:09:20+08:00","permalink":"https://hublog.netlify.app/p/250319220920/","title":"MPV播放器入门指南-第五期：B站视频播放利器，兼顾PotPlayer，IINA"},{"content":"简介 Nginx（发音为\u0026quot;engine-x\u0026quot;）是一个高性能的开源 Web 服务器，也可以用作反向代理服务器、负载均衡器和 HTTP 缓存。\nNginx 官网文档：https://nginx.org/en/docs/\n部署 包管理器 debian/ubuntu\n1 2 sudo apt update sudo apt install nginx centos\n1 2 3 sudo yum update sudo yum install nginx 官方仓库 Debian 前提条件：\n1 sudo apt install curl gnupg2 ca-certificates lsb-release debian-archive-keyring 导入密钥，验证包的正确性：\n1 2 curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\ | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg \u0026gt;/dev/null 验证下载的文件是否包含正确的密钥：\n1 gpg --dry-run --quiet --no-keyring --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg 输出应包含完整指纹 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 如下:\npub rsa2048 2011-08-19 [SC] [expires: 2024-06-14] 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 uid nginx signing key signing-key@nginx.com\n如果指纹不同，删除文件。\n二选一：\n要为稳定的 nginx 包设置 apt 存储库，请运行以下命令： 1 2 3 echo \u0026#34;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\ http://nginx.org/packages/mainline/debian `lsb_release -cs` nginx\u0026#34; \\ | sudo tee /etc/apt/sources.list.d/nginx.list 如果希望使用 mainline nginx 包，请改为运行以下命令: 1 2 3 echo \u0026#34;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\ http://nginx.org/packages/mainline/debian `lsb_release -cs` nginx\u0026#34; \\ | sudo tee /etc/apt/sources.list.d/nginx.list 设置存储库固定，使用 Nginx 官方的软件包而不是发行版提供的软件包：\n1 2 echo -e \u0026#34;Package: *\\nPin: origin nginx.org\\nPin: release o=nginx\\nPin-Priority: 900\\n\u0026#34; \\ | sudo tee /etc/apt/preferences.d/99nginx 要安装 nginx，请运行以下命令:\n1 2 sudo apt update sudo apt install nginx 参考教程 https://nginx.org/en/linux_packages.html#Debian\nUbuntu 前提条件：\n1 sudo apt install curl gnupg2 ca-certificates lsb-release ubuntu-keyring 导入密钥，验证包的正确性：\n1 2 curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\ | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg \u0026gt;/dev/null 验证下载的文件是否包含正确的密钥：\n1 gpg --dry-run --quiet --no-keyring --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg 输出应包含完整指纹 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 如下:\npub rsa2048 2011-08-19 [SC] [expires: 2024-06-14] 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 uid\n如果指纹不同，删除文件。\n二选一：\n要为稳定的 nginx 包设置 apt 存储库，请运行以下命令： 1 2 3 echo \u0026#34;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\ http://nginx.org/packages/ubuntu `lsb_release -cs` nginx\u0026#34; \\ | sudo tee /etc/apt/sources.list.d/nginx.list 如果希望使用 mainline nginx 包，请改为运行以下命令: 1 2 3 echo \u0026#34;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\ http://nginx.org/packages/mainline/ubuntu `lsb_release -cs` nginx\u0026#34; \\ | sudo tee /etc/apt/sources.list.d/nginx.list 设置存储库固定，使其更喜欢我们的软件包而不是发行版提供的软件包：\n1 2 echo -e \u0026#34;Package: *\\nPin: origin nginx.org\\nPin: release o=nginx\\nPin-Priority: 900\\n\u0026#34; \\ | sudo tee /etc/apt/preferences.d/99nginx 要安装 nginx，请运行以下命令:\n1 2 sudo apt update sudo apt install nginx 参考教程 https://nginx.org/en/linux_packages.html#Ubuntu\n配置文件 通过包管理工具安装的 Nginx 一般在 /etc/nginx下\n其中有一个 nginx.conf 文件，它就是 Nginx 的配置文件，但是为了方便管理，一般不直接修改该文件，而是在 /etc/nginx/conf.d/ 下新建文件。\n在默认的 nginx.conf中 http模块下，有这样一条命令 include /etc/nginx/conf.d/*.conf; 它表示包含了 /etc/nginx/conf.d/下所有文件，所以我们在/etc/nginx/conf.d/直接添加新文件即可，如果没有该命令需要手动把文件的路径添加到 nginx.conf中\n配置⽂件结构 Nginx 的配置⽂件是由模块（⼀系列的指令）组成的，每个模块都是由⼀个或者多个指令+参数组成的。\n指令和参数之间使⽤空格来分隔，指令以分号 ; 结尾，参数可以使⽤单引号或者双引号来包裹。\n配置⽂件分为以下⼏个模块：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # 全局块 worker_processes 1; # events块 events { } # http块 http { # server块 server { # location块 location / { } } } 全局块 全局块是配置⽂件的第⼀个块，也是配置⽂件的主体部分，主要⽤来设置⼀些影响 Nginx 服务器整体运⾏的配置指令，主要包括配置运⾏ Nginx 服务器的⽤户（组）、允许⽣成的 workerprocess 数、进程 PID 存放路径、⽇志存放路径和类型以及配置⽂件引⼊等。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 指定运⾏Nginx服务器的⽤户，只能在全局块配置 # 将user指令注释掉，或者配置成nobody的话所有⽤户都可以运⾏ # user [user] [group] # user nobody nobody; user nginx; # 指定⽣成的worker进程的数量，也可使⽤⾃动模式，只能在全局块配置 worker_processes 1; # 错误⽇志存放路径和类型 error_log /var/log/nginx/error.log warn; # 进程PID存放路径 pid /var/run/nginx.pid; events 块 1 2 3 4 5 6 events { # 指定使⽤哪种⽹络IO模型，只能在events块中进⾏配置 # use epoll # 每个worker process允许的最⼤连接数 worker_connections 1024; } http 块 http 块是配置⽂件的主要部分，包括 http 全局块和其下的 server 块。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 http { # nginx 可以使用include指令引入其他配置文件 include /etc/nginx/mime.types; # 默认类型，如果请求的URL没有包含文件类型，会使用默认类型 default_type application/octet-stream; # 默认类型 # 开启高效文件传输模式 sendfile on; # 连接超时时间 keepalive_timeout 65; # access_log 日志存放路径和类型 # 格式为：access_log \u0026lt;path\u0026gt; [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]]; access_log /var/log/nginx/access.log main; # 定义日志格式 log_format main \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#34;$request\u0026#34; $status $body_bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;; # 设置sendfile最大传输片段大小，默认为0，表示不限制 # sendfile_max_chunk 1m; # 每个连接的请求次数 # keepalive_requests 100; # keepalive超时时间 keepalive_timeout 65; # 开启gzip压缩 # gzip on; # 开启gzip压缩的最小文件大小 # gzip_min_length 1k; # gzip压缩级别，1-9，级别越高压缩率越高，但是消耗CPU资源也越多 # gzip_comp_level 2; # gzip压缩文件类型 # gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; # upstream指令用于定义一组服务器，一般用来配置反向代理和负载均衡 upstream www.example.com { # ip_hash指令用于设置负载均衡的方式，ip_hash表示使用客户端的IP进行hash，这样可以保证同一个客户端的请求每次都会分配到同一个服务器，解决了session共享的问题 ip_hash; # weight 用于设置权重，权重越高被分配到的几率越大 server 192.168.50.11:80 weight=3; server 192.168.50.12:80; server 192.168.50.13:80; } server { # 参考server块的配置 } } server 块 server 块是配置虚拟主机的，⼀个 http 块可以包含多个 server 块，每个 server 块就是⼀个虚拟主机。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 server { # 监听IP和端口 # listen的格式为： # listen [ip]:port [default_server] [ssl] [http2] [spdy] [proxy_protocol] [setfib=number] [fastopen=number] [backlog=number]; # listen指令非常灵活，可以指定多个IP和端口，也可以使用通配符 # 下面是几个实际的例子： # listen 127.0.0.1:80; # 监听来自127.0.0.1的80端口的请求 # listen 80; # 监听来自所有IP的80端口的请求 # listen *:80; # 监听来自所有IP的80端口的请求，同上 # listen 127.0.0.1; # 监听来自来自127.0.0.1的80端口，默认端口为80 listen 80; # server_name 用来指定虚拟主机的域名，可以使用精确匹配、通配符匹配和正则匹配等方式 # server_name example.org www.example.org; # 精确匹配 # server_name *.example.org; # 通配符匹配 # server_name ~^www\\d+\\.example\\.net$; # 正则匹配 server_name localhost; # location 块 location / { # ... } # error_page 用于指定错误页面，可以指定多个，按照优先级从高到低依次查找 error_page 500 502 503 504 /50x.html; # 错误页面 location = /50x.html { root /usr/share/nginx/html; } } location 块 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 server { ############# # server 块配置... ############# # location块用来配置请求的路由，一个server块可以包含多个location块，每个location块就是一个请求路由 # location块的格式是： # location [=|~|~*|^~] /uri/ { ... } # = 表示精确匹配，只有完全匹配上才能生效 # ~ 表示区分大小写的正则匹配 # ~* 表示不区分大小写的正则匹配 # ^~ 表示普通字符匹配，如果匹配成功，则不再匹配其他location # /uri/ 表示请求的URI，可以是字符串，也可以是正则表达式 # { ... } 表示location块的配置内容 location / { # root指令用于指定请求的根目录，可以是绝对路径，也可以是相对路径 root /usr/share/nginx/html; # 根目录 # index指令用于指定默认文件，如果请求的是目录，则会在目录下查找默认文件 index index.html index.htm; # 默认文件 } # 下面是一些location的示例： location = / { # 精确匹配请求 root /usr/share/nginx/html; index index.html index.htm; } location ^~ /images/ { # 匹配以/images/开头的请求 root /usr/share/nginx/html; } location ~* \\.(gif|jpg|jpeg)$ { # 匹配以gif、jpg或者jpeg结尾的请求 root /usr/share/nginx/html; } location !~ \\.(gif|jpg|jpeg)$ { # 不匹配以gif、jpg或者jpeg结尾的请求 root /usr/share/nginx/html; } location !~* \\.(gif|jpg|jpeg)$ { # 不匹配以gif、jpg或者jpeg结尾的请求 root /usr/share/nginx/html; } } SSL/TLS 在 server 块增加\n1 2 3 4 5 6 7 8 9 10 # 证书文件路径 ssl_certificate /path/to/yourdomain/cert.pem; # 私钥文件路径 ssl_certificate_key /path/to/yourdomain/key.pem; # SSL 配置 (推荐的配置) ssl_protocols TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers on; ssl_ciphers \u0026#34;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\u0026#34;; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; 一些常见的需求 设置客户端 body 最大值 client_max_body_size 这个指令定义了客户端请求主体的最大允许大小，在网盘项目中，需要设置。\n默认值是 1m\n可以在 http, server, location中设置\n设置方法 在 http 块中设置 (全局设置)：\n这将对 Nginx 处理的所有站点和所有请求生效。适用于你的所有网站都有相似上传需求的情况。\n1 2 3 4 5 6 7 8 9 10 11 # /etc/nginx/nginx.conf (或你的主配置文件) http { client_max_body_size 100m; # 允许最大上传100MB的文件 # ... 其他 http 配置 ... server { # ... } } 在 server 块中设置 (针对特定网站)： 如果你有多个网站，并且每个网站的上传需求不同，可以在每个 server 块中单独设置。\n1 2 3 4 5 6 7 8 9 10 # /etc/nginx/sites-available/your_website.conf server { listen 80; server_name your_domain.com; client_max_body_size 500m; # 该网站允许最大上传500MB的文件 # ... 其他 server 配置 ... } 在 location 块中设置 (针对特定 URL 路径)： 这是最细粒度的控制，只对匹配特定 URL 路径的请求生效。例如，你可能只在 /upload 路径下允许大文件上传。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 server { listen 80; server_name your_domain.com; location / { # 默认的或较小的上传限制 client_max_body_size 10m; # ... } location /upload { # 仅此上传路径允许较大的文件 client_max_body_size 2g; # 允许最大上传2GB的文件 # ... } } 设置单位 size 可以使用以下单位：\nk 或 K (千字节) m 或 M (兆字节) g 或 G (吉字节) 例如：100k, 10m, 2g。\n设置为 \u0026ldquo;无限制\u0026rdquo; (不推荐) 将 client_max_body_size 设置为 0 会禁用对客户端请求主体大小的检查。这意味着 Nginx 会接受任意大小的请求主体。 但请注意： 设置为 0 意味着请求体根本不会被读取，实际上就是不允许上传文件。 如果你真的需要允许非常大的文件上传，应该设置一个非常大的具体值，而不是 0。\n例如，允许非常大的文件（但仍有上限）：\n1 client_max_body_size 10g; # 允许最大10GB的文件 常用命令 1 2 3 4 5 6 7 8 9 10 11 12 13 systemctl start nginx # 启动Nginx (默认已经启动) systemctl stop nginx\t# 关闭Nginx systemctl status nginx # 查看Nginx状态 sudo nginx -t # 检查Nginx配置文件语法是否正确 sudo nginx -s reload\t# 重新加载Nginx配置 sudo nginx # 启动Nginx sudo nginx -c filename # 指定配置⽂件 nginx -V # 查看Nginx的版本和编译参数等信息 sudo nginx -s quit # 优雅停⽌Nginx sudo nginx -s stop # 快速停⽌Nginx sudo nginx -s reopen # 重新打开⽇志⽂件 案例 简单示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 server { listen 80; server_name seektao.cc; return 301 https://www.seektao.cc$request_uri; } server { listen 80; server_name www.seektao.cc; return 301 https://$host$request_uri; } server { listen 443 ssl http2; server_name www.seektao.cc; } 这个 Nginx 配置文件包含了三个 server 块，每个块定义了不同的虚拟主机配置。\n第一个 server 块： listen 80;: 监听 80 端口，表示这个 server 块用于处理 HTTP 请求。 server_name seektao.cc;: 指定服务器的域名为seektao.cc。 return 301 https://www.seektao.cc$request_uri;: 当有 HTTP 请求访问seektao.cc时，返回 301 重定向到https://www.seektao.cc$request_uri，即将 HTTP 请求重定向到 HTTPS 协议的www.seektao.cc。 第二个 server 块： listen 80;: 同样监听 80 端口，处理 HTTP 请求。 server_name www.seektao.cc;: 指定服务器的域名为www.seektao.cc。 return 301 https://$host$request_uri;: 当有 HTTP 请求访问www.seektao.cc时，返回 301 重定向到https://$host$request_uri，即将 HTTP 请求重定向到 HTTPS 协议的www.seektao.cc。 第三个 server 块： listen 443 ssl http2;: 监听 443 端口，启用 SSL 和 HTTP/2 协议。 server_name www.seektao.cc;: 指定服务器的域名为www.seektao.cc。 这个配置文件的作用是：\n当有 HTTP 请求访问seektao.cc或www.seektao.cc时，会将请求重定向到相应的 HTTPS 地址。 对于 HTTPS 请求，只有www.seektao.cc会被处理 这是一个简单的配置示例，实际环境中还需要根据具体需求进行进一步配置，例如配置 SSL 证书、代理、缓存等功能。\nweb 服务器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 server { listen 443 ssl; server_name yourdomain.com www.yourdomain.com; ssl_certificate /etc/nginx/ssl/yourdomain.com.crt; ssl_certificate_key /etc/nginx/ssl/yourdomain.com.key; # SSL 配置 (推荐的配置) ssl_protocols TLSv1.2 TLSv1.3; ssl_prefer_server_ciphers on; ssl_ciphers \u0026#34;EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\u0026#34;; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; # HSTS (HTTP Strict Transport Security) - 强制浏览器使用 HTTPS add_header Strict-Transport-Security \u0026#34;max-age=31536000; includeSubDomains; preload\u0026#34;; # Content Security Policy (CSP) - 进一步加强安全性 (根据你的需求配置) # add_header Content-Security-Policy \u0026#34;default-src \u0026#39;self\u0026#39;; script-src \u0026#39;self\u0026#39; \u0026#39;unsafe-inline\u0026#39;; style-src \u0026#39;self\u0026#39; \u0026#39;unsafe-inline\u0026#39;; img-src \u0026#39;self\u0026#39; data:;\u0026#34;; root /var/www/yourdomain.com; # 替换为你的网站根目录 index index.html index.htm index.php; location / { try_files $uri $uri/ =404; } # PHP 配置 (如果你的网站使用 PHP) location ~ \\.php$ { include snippets/fastcgi-php.conf; fastcgi_pass unix:/run/php/php7.4-fpm.sock; # 替换为你的 PHP-FPM 套接字路径 } location ~ /\\.ht { deny all; } } # 可选: 将 HTTP 请求重定向到 HTTPS server { listen 80; server_name yourdomain.com www.yourdomain.com; return 301 https://$host$request_uri; } 反向代理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 server { if ($host = yourdomain.com) { return 301 https://$host$request_uri; } # managed by Certbot listen 80; server_name yourdomain.com; return 301 https://yourdomain.com$request_uri; } server { listen 443 ssl; http2 on; server_name yourdomain.com; # SSL 证书配置 ssl_certificate /etc/nginx/ssl/yourdomain.com/cert.pem; ssl_certificate_key /etc/nginx/ssl/yourdomain.com/key.pem; # 安全设置 ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; # 反向代理 location / { proxy_pass http://127.0.0.1:8080/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto https; } # 上传的最大文件尺寸 client_max_body_size 200000m; # 设置超时时间，单位为秒 proxy_connect_timeout 600; proxy_send_timeout 600; proxy_read_timeout 600; # 日志配置 access_log /var/log/nginx/yourdomain.com.access.log; error_log /var/log/nginx/yourdomain.com.error.log; } ","date":"2025-03-19T08:48:54+08:00","permalink":"https://hublog.netlify.app/p/250319084854/","title":"Nginx，一个高性能的开源 Web 服务器，Nginx指南"},{"content":" 警告\nserv00 官方更新 tos，不再支持 nezha 探针\n详情：https://forum.serv00.com/d/2787-april-cleaning-and-new-tos\n简介 最后一个 v0 版本截止到 v0.20.5\n地址：https://github.com/nezhahq/agent/releases/tag/v0.20.5\n准备 下载\n1 wget -O nezha-agent.zip https://github.com/nezhahq/agent/releases/download/v0.20.5/nezha-agent_freebsd_amd64.zip 解压文件\n1 2 mkdir -p $HOME/.nezha/agent unzip nezha-agent.zip -d $HOME/.nezha/agent 赋予运行权限\n1 chmod +x $HOME/.nezha/agent/nezha-agent 启动 如果没有面板使用 tls，需要将 \u0026ldquo;\u0026ndash;tls\u0026rdquo; 删除\n编写启动脚本\n1 vim $HOME/.nezha/agent/start.sh 修改下面的内容后保存\n1 2 #!/bin/sh nohup $HOME/.nezha/agent/nezha-agent \u0026#34;-s\u0026#34; \u0026#34;面板域名或者ip:端口\u0026#34; \u0026#34;-p\u0026#34; \u0026#34;服务器密钥\u0026#34; \u0026#34;--tls\u0026#34; \u0026gt; $HOME/.nezha/agent/nezha-agent.log 2\u0026gt;\u0026amp;1 \u0026amp; 1 chmod +x $HOME/.nezha/agent/start.sh 启动\n1 $HOME/.nezha/agent/start.sh 一键脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 #!/bin/sh # 定义变量 NEZHA_AGENT_DIR=\u0026#34;$HOME/.nezha/agent\u0026#34; NEZHA_AGENT_EXECUTABLE=\u0026#34;$NEZHA_AGENT_DIR/nezha-agent\u0026#34; NEZHA_START_SCRIPT=\u0026#34;$NEZHA_AGENT_DIR/start.sh\u0026#34; NEZHA_LOG_FILE=\u0026#34;$NEZHA_AGENT_DIR/nezha-agent.log\u0026#34; # 默认值，可以被 curl 覆盖 PANEL_ADDRESS=\u0026#34;面板域名或者ip:端口\u0026#34; SERVER_KEY=\u0026#34;服务器密钥\u0026#34; # 函数：启动哪吒探针 start_nezha_agent() { echo \u0026#34;启动哪吒探针...\u0026#34; nohup \u0026#34;$NEZHA_AGENT_EXECUTABLE\u0026#34; \u0026#34;-s\u0026#34; \u0026#34;$PANEL_ADDRESS\u0026#34; \u0026#34;-p\u0026#34; \u0026#34;$SERVER_KEY\u0026#34; \u0026#34;--tls\u0026#34; \u0026gt; \u0026#34;$NEZHA_LOG_FILE\u0026#34; 2\u0026gt;\u0026amp;1 \u0026amp; echo \u0026#34;哪吒探针已在后台启动，日志文件：$NEZHA_LOG_FILE\u0026#34; } # 函数：停止哪吒探针 stop_nezha_agent() { echo \u0026#34;停止哪吒探针...\u0026#34; # 查找哪吒探针的进程 ID 并杀死它 PID=$(ps aux | grep \u0026#34;$NEZHA_AGENT_EXECUTABLE\u0026#34; | grep -v grep | awk \u0026#39;{print $2}\u0026#39;) if [ -n \u0026#34;$PID\u0026#34; ]; then kill -9 \u0026#34;$PID\u0026#34; echo \u0026#34;哪吒探针进程 (PID: $PID) 已被杀死。\u0026#34; else echo \u0026#34;没有找到正在运行的哪吒探针进程。\u0026#34; fi } # 函数：处理 curl 请求 handle_curl_request() { if [ -n \u0026#34;$1\u0026#34; ]; then case \u0026#34;$1\u0026#34; in panel_address) PANEL_ADDRESS=\u0026#34;$2\u0026#34; echo \u0026#34;面板地址已更新为: $PANEL_ADDRESS\u0026#34; ;; server_key) SERVER_KEY=\u0026#34;$2\u0026#34; echo \u0026#34;服务器密钥已更新\u0026#34; ;; start) start_nezha_agent ;; stop) stop_nezha_agent ;; restart) stop_nezha_agent sleep 2 # 等待进程结束 start_nezha_agent ;; *) echo \u0026#34;无效的参数: $1\u0026#34; echo \u0026#34;用法: curl \u0026#39;http://\u0026lt;服务器IP\u0026gt;:\u0026lt;端口\u0026gt;?panel_address=你的面板地址\u0026amp;server_key=你的密钥\u0026amp;start\u0026#39;\u0026#34; echo \u0026#34; curl \u0026#39;http://\u0026lt;服务器IP\u0026gt;:\u0026lt;端口\u0026gt;?stop\u0026#39;\u0026#34; echo \u0026#34; curl \u0026#39;http://\u0026lt;服务器IP\u0026gt;:\u0026lt;端口\u0026gt;?restart\u0026#39;\u0026#34; exit 1 ;; esac else echo \u0026#34;没有提供参数。\u0026#34; echo \u0026#34;用法: curl \u0026#39;http://\u0026lt;服务器IP\u0026gt;:\u0026lt;端口\u0026gt;?panel_address=你的面板地址\u0026amp;server_key=你的密钥\u0026amp;start\u0026#39;\u0026#34; echo \u0026#34; curl \u0026#39;http://\u0026lt;服务器IP\u0026gt;:\u0026lt;端口\u0026gt;?stop\u0026#39;\u0026#34; echo \u0026#34; curl \u0026#39;http://\u0026lt;服务器IP\u0026gt;:\u0026lt;端口\u0026gt;?restart\u0026#39;\u0026#34; exit 1 fi } # 创建目录（如果不存在） mkdir -p \u0026#34;$NEZHA_AGENT_DIR\u0026#34; # 创建启动脚本 cat \u0026gt; \u0026#34;$NEZHA_START_SCRIPT\u0026#34; \u0026lt;\u0026lt;EOL #!/bin/sh nohup \u0026#34;$NEZHA_AGENT_EXECUTABLE\u0026#34; \u0026#34;-s\u0026#34; \u0026#34;$PANEL_ADDRESS\u0026#34; \u0026#34;-p\u0026#34; \u0026#34;$SERVER_KEY\u0026#34; \u0026#34;--tls\u0026#34; \u0026gt; \u0026#34;$NEZHA_LOG_FILE\u0026#34; 2\u0026gt;\u0026amp;1 \u0026amp; EOL # 赋予执行权限 chmod +x \u0026#34;$NEZHA_START_SCRIPT\u0026#34; # 检查是否需要处理 curl 请求 if [ -n \u0026#34;$QUERY_STRING\u0026#34; ]; then # 解析 QUERY_STRING IFS=\u0026#39;\u0026amp;\u0026#39; read -r -a PARAMS \u0026lt;\u0026lt;\u0026lt; \u0026#34;$QUERY_STRING\u0026#34; for PARAM in \u0026#34;${PARAMS[@]}\u0026#34;; do IFS=\u0026#39;=\u0026#39; read -r KEY VALUE \u0026lt;\u0026lt;\u0026lt; \u0026#34;$PARAM\u0026#34; case \u0026#34;$KEY\u0026#34; in panel_address) PANEL_ADDRESS=\u0026#34;$VALUE\u0026#34; ;; server_key) SERVER_KEY=\u0026#34;$VALUE\u0026#34; ;; action) ACTION=\u0026#34;$VALUE\u0026#34; ;; esac done # 根据 action 调用相应的函数 case \u0026#34;$ACTION\u0026#34; in start) start_nezha_agent ;; stop) stop_nezha_agent ;; restart) stop_nezha_agent sleep 2 start_nezha_agent ;; *) echo \u0026#34;无效的 action: $ACTION\u0026#34; exit 1 ;; esac else # 如果没有 curl 请求，则默认启动哪吒探针 start_nezha_agent fi exit 0 ","date":"2025-03-17T10:15:43+08:00","permalink":"https://hublog.netlify.app/p/250317101543/","title":"哪吒探针v0版之serv00"},{"content":"随时更新 https://www.wetest.vip/page/cloudflare/cname.html https://ipdb.030101.xyz/bestdomain/ 优选域名 1 2 3 4 5 6 7 8 9 10 icook.tw:443#icook.tw alphacoders.com:443#alphacoders.com visa.com.cn:443#visa.com.cn www.dogfight360.com:443#www.dogfight360.com cloudflare.182682.xyz:443#cloudflare.182682.xyz fast-fast.asuscomm.com:443#fast-fast.asuscomm.com bestcf.top:443#bestcf.top cfip.cfcdn.vip:443#cfip.cfcdn.vip dns.123zy.cool:443#dns.123zy.cool bestproxy.030101.xyz:443#bestproxy.030101.xyz 优选 IP 1 2 104.17.179.183:443#104.17.179.183 172.67.78.125:443#172.67.78.125 1 2 3 4 5 6 7 [2606:4700:3003:0:18:969c:26a6:9e51]:443#[2606:4700:3003:0:18:969c:26a6:9e51] [2606:4700:3010:2dd2:53d3:1e18:8231:665b]:443#[2606:4700:3010:2dd2:53d3:1e18:8231:665b] [2606:4700:3003:c8e:17ff:834a:525:a70d]:443#[2606:4700:3003:c8e:17ff:834a:525:a70d] [2606:4700:3003::bf:c09f]:443#[2606:4700:3003::bf:c09f] [2606:4700:3010:2dd2:53a5:9dfe:639c:2c8b]:443#[2606:4700:3010:2dd2:53a5:9dfe:639c:2c8b] [2606:4700:3010:73ed:2959:4cdb:b656:9aaa]:443#[2606:4700:3010:73ed:2959:4cdb:b656:9aaa] [2606:4700:3010:2d55:d795:96ed:10f8:89f9]:443#[2606:4700:3010:2d55:d795:96ed:10f8:89f9] 优选反代 IP 443 端口 cloudflare-dns.com\nfofa.info\n1 server==\u0026#34;cloudflare\u0026#34; \u0026amp;\u0026amp; asn==\u0026#34;45102\u0026#34; \u0026amp;\u0026amp; port==\u0026#34;443\u0026#34; \u0026amp;\u0026amp; country==\u0026#34;CN\u0026#34; 搜索 ip\n8.218.175.216 8.217.64.226 8.217.131.231 47.76.46.220 149.129.115.111 47.238.170.225 47.242.192.198 47.57.13.107\n","date":"2025-03-16T22:22:49+08:00","permalink":"https://hublog.netlify.app/p/250316222249/","title":"cloudflare优选域名，优选ip，优选反代IP"},{"content":"cloudns 上的域名需要双向解析才可以使用\n这里介绍如何方便的使用双向解析\n关于注册不做介绍\n不使用优选域名 在 cloudflare 添加域名，获取 ns 名称服务器，记录下来 删除 cloudns 所有记录 cloudns 添加两条 ns 记录，host 不填，指向 cloudflare 获取的 ns 名称服务器 cloudns 再添加两条 ns 记录，host 值为 _acme-challenge，指向 cloudflare 获取的 ns 名称服务器 cloudns 添加一条 cname 记录，host 为*，指向其中一条 ns 名称服务器 如下所示\nHost Type Points to TTL wto.ip-ddns.com NS savanna.ns.cloudflare.com 1h wto.ip-ddns.com NS trey.ns.cloudflare.com 1h *.wto.ip-ddns.com CNAME savanna.ns.cloudflare.com 1h _acme-challenge.wto.ip-ddns.com NS savanna.ns.cloudflare.com 1h _acme-challenge.wto.ip-ddns.com NS trey.ns.cloudflare.com 1h 以后子级域名只需要在 cloudflare 上操作即可。\n使用优选域名 在 cloudflare 添加域名，获取 ns 名称服务器，记录下来 删除 cloudns 所有记录 cloudns 添加两条 ns 记录，host 不填，指向 cloudflare 获取的 ns 名称服务器 cloudns 再添加两条 ns 记录，host 值为 _acme-challenge，指向 cloudflare 获取的 ns 名称服务器 cloudns 再添加两条 ns 记录，host 值为 maintunnel，指向 cloudflare 获取的 ns 名称服务器 cloudns 添加一条 cname 记录，host 为*，指向 maintunnel.你的域名.ip-ddns.com cloudflare 添加一条 cname 记录，host 为 maintunnel指向优选的域名，比如cloudflare.182682.xyz或者fast-fast.asuscomm.com，关闭小黄云 如下所示\nHost Type Points to TTL wto.ip-ddns.com NS savanna.ns.cloudflare.com 1h wto.ip-ddns.com NS trey.ns.cloudflare.com 1h *.wto.ip-ddns.com CNAME maintunnel.wto.ip-ddns.com 1h maintunnel.wto.ip-ddns.com NS savanna.ns.cloudflare.com 1h maintunnel.wto.ip-ddns.com NS trey.ns.cloudflare.com 1h _acme-challenge.wto.ip-ddns.com NS savanna.ns.cloudflare.com 1h _acme-challenge.wto.ip-ddns.com NS trey.ns.cloudflare.com 1h 以后子级域名只需要在 cloudflare 上操作即可。\n主域名解析 对于主域名 wto.ip-ddns.com 的解析操作分为两种情况（假设服务器 IP 是 10.20.30.40）\n完全走 CDN 【推荐使用这种方案】\n1 2 3 4 #cloudns 类型 A 主机 留空 指向到 104.18.15.19 #cloudflare 开启小黄云 类型 A 主机 @ 指向到 10.20.30.40 并开启小黄云 完全不走 CDN 【仅需要原始解析时使用】\n1 2 3 4 #cloudns 类型 A 主机 留空 指向到 10.20.30.40 #cloudflare 不开启小黄云 类型 A 主机 @ 指向到 10.20.30.40 ","date":"2025-03-16T21:18:37+08:00","permalink":"https://hublog.netlify.app/p/250316211837/","title":"cloudns双向解析"},{"content":"数据类型 Name Aliases Description bigint int8 signed eight-byte integer bigserial serial8 autoincrementing eight-byte integer bit [ (n) ] fixed-length bit string bit varying [ (n) ] varbit [ (n) ] variable-length bit string boolean bool logical Boolean (true/false) box rectangular box on a plane bytea binary data (\u0026ldquo;byte array\u0026rdquo;) character [ (n) ] char [ (n) ] fixed-length character string character varying [ (n) ] varchar [ (n) ] variable-length character string cidr IPv4 or IPv6 network address circle circle on a plane date calendar date (year, month, day) double precision float8 double precision floating-point number (8 bytes) inet IPv4 or IPv6 host address integer int, int4 signed four-byte integer interval [ fields ] time span [ (p) ] json textual JSON data jsonb binary JSON data, decomposed line infinite line on a plane lseg line segment on a plane macaddr MAC (Media Access Control) address macaddr8 MAC (Media Access Control) address (EUI-64 format) money currency amount numeric [ (p, s) ] decimal [ (p, s) ] exact numeric of selectable precision path geometric path on a plane pg_lsn PostgreSQL Log Sequence Number pg_snapshot user-level transaction ID snapshot point geometric point on a plane polygon closed geometric path on a plane real float4 single precision floating-point number (4 bytes) smallint int2 signed two-byte integer smallserial serial2 autoincrementing two-byte integer serial serial4 autoincrementing four-byte integer text variable-length character string time [ (p) ] [ without time zone ] time of day (no time zone) time [ (p) ] with time zone timez time of day, including time zone timestamp [ (p) ] [ without time zone ] date and time (no time zone) timestamp [ (p) ] with time zone timestamptz date and time, including time zone tsquery text search query tsvector text search document txid_snapshot user-level transaction ID snapshot (deprecated; see pg_snapshot) uuid universally unique identifier xml XML data ","date":"2025-03-15T20:18:01+08:00","permalink":"https://hublog.netlify.app/p/pg-chapter08/","title":"PostgreSQL教程第8章：数据类型"},{"content":"安装 Linux 安装 jdk\n1 apt install openjdk-17-jdk 下载 datax\n1 curl -l https://datax-opensource.oss-cn-hangzhou.aliyuncs.com/202309/datax.tar.gz ","date":"2025-03-14T21:44:12+08:00","permalink":"https://hublog.netlify.app/p/250314214412/","title":"datax安装"},{"content":"在 Obsdiain 中粘贴图片会变成 ![[url]]的方式，并且会保存在本地\n我粘贴 markdown 图片格式![描述](url) 后发现本地多了一些图片\n发现这个问题\n为了不在本地存储或者通用性，使用 makrdown 格式保存图片\n关闭方法：\n设置 -\u0026gt; 文件与链接-\u0026gt; 关闭使用Wiki链接\n","date":"2025-03-14T13:40:58+08:00","permalink":"https://hublog.netlify.app/p/250314134058/","title":"Obsidian设置图片为markdown标准格式"},{"content":"Scala (Metals) 如果下载失败，ctrl+,打开设置，搜索\n1 Metals: Custom Repositories 添加\n1 https://maven.aliyun.com/repository/central Scala Syntax (official) ","date":"2025-03-11T19:46:38+08:00","permalink":"https://hublog.netlify.app/p/250311194638/","title":"VSCode开发Spark插件"},{"content":"常见问题 Java 17 运行 spark3.3.1 需要在vm中加入的参数\n1 2 3 4 5 --add-exports java.base/sun.nio.ch=ALL-UNNAMED --add-exports java.base/sun.util.calendar=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.nio=ALL-UNNAMED --add-opens java.base/java.lang.invoke=ALL-UNNAMED 问题1 模块访问受限 Exception in thread \u0026ldquo;main\u0026rdquo; java.lang.IllegalAccessError: class org.apache.spark.storage.StorageUtils$ (in unnamed module @0x71a8adcf) cannot access class sun.nio.ch.DirectBuffer (in module java.base) because module java.base does not export sun.nio.ch to unnamed module @0x71a8adcf\n关于这个问题在 stackoverflow上的讨论\n解决办法\n在 IDEA 方法添加 VM 参数\n1 --add-exports java.base/sun.nio.ch=ALL-UNNAMED 新版 IDEA 图示\n问题2 系统缺少文件 Exception in thread \u0026ldquo;main\u0026rdquo; ExitCodeException exitCode=-1073741515:\n参考这篇博客：https://blog.csdn.net/psp0001060/article/details/83057663\n原因：\n操作系统缺少 msvcr120.dll文件\n下载地址\n链接: https://pan.baidu.com/s/1rQSzzFn97hs7V0ZYoiF6ZQ?pwd=bdsa 提取码: bdsa 复制这段内容后打开百度网盘手机 App，操作更方便哦\n放置 dll:\n32 位\\msvcr120.dll 粘贴到 _C:\\Windows\\System32 目录中 64 位\\msvcr120.dll 粘贴到 _C:\\Windows\\SysWOW64 目录中 问题3 模块访问受限 Exception in thread \u0026ldquo;main\u0026rdquo; java.lang.IllegalAccessError: class org.apache.spark.sql.catalyst.util.DateTimeUtils$ (in unnamed module @0x17f62e33) cannot access class sun.util.calendar.ZoneInfo (in module java.base) because module java.base does not export sun.util.calendar to unnamed module @0x17f62e33\n这个报错和问题 1 相似，vm 运行缺少 java.base/sun.util.calendar模块，需要手动指定\n像以上的问题，都是因为模块没有导入的问题，需要手动指定\n1 --add-exports java.base/sun.util.calendar=ALL-UNNAMED 确保程序运行时 vm 中有这个内容，idea 运行时添加可参考问题 1\n问题4 模块访问受限 Exception in thread \u0026ldquo;main\u0026rdquo; java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not \u0026ldquo;opens java.util\u0026rdquo; to unnamed module @783a467b\nvm 参数加入\n1 --add-opens java.base/java.util=ALL-UNNAMED 问题5 Exception in thread \u0026ldquo;main\u0026rdquo; java.lang.IllegalArgumentException: Unable to create serializer \u0026ldquo;com.esotericsoftware.kryo.serializers.FieldSerializer\u0026rdquo; for class: java.nio.HeapByteBuffer\n。。。\n问题6 模块访问受限 Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field final byte[] java.nio.ByteBuffer.hb accessible: module java.base does not \u0026ldquo;opens java.nio\u0026rdquo; to unnamed module @6574a52c\nvm参数加入\n1 --add-opens java.base/java.nio=ALL-UNNAMED 问题7 模块访问受限 Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make private java.lang.Object java.lang.invoke.SerializedLambda.readResolve() throws java.io.ObjectStreamException accessible: module java.base does not \u0026ldquo;opens java.lang.invoke\u0026rdquo; to unnamed module @2cf3d63b\nvm参数加入\n1 --add-opens java.base/java.lang.invoke=ALL-UNNAMED ","date":"2025-03-11T17:56:24+08:00","permalink":"https://hublog.netlify.app/p/250311175624/","title":"Spark开发中遇到的疑难杂症"},{"content":"Scala 与 Java 兼容关系 JDK 3 2.13 2.12 2.11 22 (ea) 3.3.4* 2.13.12 2.12.19 21 (LTS) 3.3.1 2.13.11 2.12.18 17 (LTS) 3.0.0 2.13.6 2.12.15 11 (LTS) 3.0.0 2.13.0 2.12.4 2.11.12 8 (LTS) 3.0.0 2.13.0 2.12.0 2.11.0 参考网址：docs.scala-lang.org.cn\n构建工具兼容性表 最低工作版本\nJDK sbt mill 21 (LTS) 1.9.0 0.11.5 17 (LTS) 1.6.0 0.7.0 11 (LTS) 1.1.0 0.1.5 8 (LTS) 1.0.0 0.1.0 Spark 与 Scala 兼容关系 如何寻找？\n方式一 通过 Spark GitHub 仓库，选择 Tags，找到对应的spark版本，查看pom.xml文件，搜索 scala.version 找到 scala 版本\n仓库地址：https://github.com/apache/spark\n方式二 通过 mvnrepository 搜索 spark-core找到 spark 对应依赖的 scala 版本\nmvnrepository地址：https://mvnrepository.com/artifact/org.apache.spark/spark-core\n这里整理了一些\nSpark Scala 发布时间 3.5.5 2.12.18 2025-02-27 09:11 3.5.0 2.12.18 2023-09-13 02:08 3.4.4 2.12.17 2024-10-25 08:10 3.4.0 2.12.17 2023-04-13 17:54 3.3.4 2.12.15 2022-06-17 11:11 3.3.1 2.12.15 2022-10-25 07:33 3.3.0 2.12.15 2022-06-17 11:11 3.2.4 2.12.15 2023-04-13 13:46 3.2.0 2.12.15 2021-10-13 09:09 3.1.3 2.12.10 2022-06-17 11:12 3.1.1 2.12.10 2021-03-02 11:01 3.0.3 2.12.10 2022-06-17 11:12 3.0.0 2.12.10 2020-06-16 09:19 2.4.8 2.11.12 2022-06-17 11:13 2.4.0 2.11.12 2018-11-02 04:28 2.3.4 2.11.8 2019-09-09 09:19 2.3.0 2.11.8 2018-05-04 15:42 2.2.3 2.11.8 2019-01-12 18:28 2.2.0 2.11.8 2018-05-04 15:31 总结 Spark、Java、Scala兼容的最低版本\nSpark Java Scala2.12.x Scala2.13.x 3.5.0 21 2.12.18 2.13.11 3.2.0 17 2.12.15 2.13.6 3.0.0 11 2.12.4 2.13.0 3.0.0 8 2.12.0 2.13.0 下载地址 Scala Scala历史版本下载地址：https://scala-lang.org.cn/download/all.html\n2.12.15：https://scala-lang.org/download/2.12.15.html 2.12.18：https://scala-lang.org/download/2.12.18.html 2.13.11：https://scala-lang.org/download/2.13.11.html Spark 所有版本：https://archive.apache.org/dist/spark/\n3.3.1： ","date":"2025-03-11T15:56:15+08:00","permalink":"https://hublog.netlify.app/p/250311155615/","title":"Spark、Scala、Java版本对应关系"},{"content":"简介 本文将介绍常见系统的环境变量设置\nLinux Bash 配置环境变量的文件\n.bashrc .bash_profile .profile /etc/profile /etc/profile.d/* Zsh 配置环境变量的文件\n.zshrc .zsh_profile /etc/profile /etc/profile.d/* Windows 界面编辑 打开环境变量设置界面的几种方式\nwin+s 搜索 环境变量，点击 编辑系统环境变量，高级 -\u0026gt; 环境变量 如果桌面有 此电脑，右键 此电脑，点击属性，打开关于，右侧找到并点击 高级系统设置 ，点击环境变量 win+i打开设置，点击 系统，左侧下滑点击 关于 ，右侧找到并点击 高级系统设置 ，点击环境变量 \u0026hellip; 方式很多，还有控制面板也可以打开\n打开环境变量设置界面之后，就可以新建了。\n如果要让 cmd或者powershell 中任何位置可以执行程序，需要在 Path 增加指定的程序所在路径\nCMD 查看所有的环境变量\n它会混合显示用户环境变量、系统环境变量和当前会话中临时设置的变量\n1 set 查看指定的环境变量\n例如：查看 path 环境变量值\n1 set path 设置当前会话环境变量\n1 set MYENV=myenv 取消当前会话环境变量\n1 set MYENV= 设置永久用户环境变量\n例如：设置一个名为 MY_USER_ENV，变量值为 my_user_env的系统环境变量\n1 setx MY_USER_ENV \u0026#34;my_user_env\u0026#34; 查看刚才设置的环境变量，需要新开会话才会生效。 set MY_USER_ENV\n取消永久用户环境变量\n这样做只是修改变量为空值，没有真正删除变量\n1 setx MY_USER_ENV \u0026#34;\u0026#34; 设置永久系统环境变量（管理员权限）\n需要加一个参数 /m， 需要用管理员权限打开 CMD 例如：设置一个名为 SYSMYENV，变量值为 sysmyenv的系统环境变量\n1 setx /m MY_SYS_ENV \u0026#34;my_sys_env\u0026#34; 取消永久系统环境变量（管理员权限）\n这样做只是修改变量为空值，没有真正删除变量\n1 setx /m MY_SYS_ENV \u0026#34;\u0026#34; PowerShell 查看所有的环境变量\n它会混合显示用户环境变量、系统环境变量和当前会话中临时设置的变量\n1 Get-ChildItem Env: 查看指定的环境变量\n例如：查看 path 环境变量值\n1 $env:Path 设置当前会话环境变量\n1 $env:MYENV = \u0026#34;myenv\u0026#34; 取消当前会话环境变量\n1 Remove-Item Env:MYENV 设置永久用户环境变量\n例如：设置一个名为 MY_USER_ENV，变量值为 my_user_env的系统环境变量\n1 [Environment]::SetEnvironmentVariable(\u0026#34;MY_USER_ENV\u0026#34;, \u0026#34;my_user_env\u0026#34;, \u0026#34;User\u0026#34;) 查看刚才设置的环境变量，需要新开会话才会生效。 $env:MY_USER_ENV\n取消永久用户环境变量\n1 [Environment]::SetEnvironmentVariable(\u0026#34;MY_USER_ENV\u0026#34;, $null, \u0026#34;User\u0026#34;) 设置永久系统环境变量（管理员权限）\n需要用管理员权限打开 PowerShell 例如：设置一个名为 MY_SYS_ENV，变量值为 my_sys_env的系统环境变量\n1 [Environment]::SetEnvironmentVariable(\u0026#34;MY_SYS_ENV\u0026#34;, \u0026#34;my_sys_env\u0026#34;, \u0026#34;Machine\u0026#34;) 取消永久系统环境变量（管理员权限）\n1 [Environment]::SetEnvironmentVariable(\u0026#34;MY_SYS_ENV\u0026#34;, $null, \u0026#34;Machine\u0026#34;) ","date":"2025-03-11T12:48:50+08:00","permalink":"https://hublog.netlify.app/p/250311124850/","title":"系统环境变量设置"},{"content":"简介 VSCode 使用终端的时候，有时候路径太长，比如像这样\n路径后面输入的命令不好查看，最好的办法就是第一行显示路径，换行之后输入执行的命令\n解决办法 这个问题实际上是修改终端的提示符\n归根在于使用什么终端模拟器，一般情况下，VSCode 的默认终端使用的 Powerrshell,实际上是修改 Powerrshell终端提示符。\nPowerShell 在 VSCode 终端输入\n1 notepad $PROFILE 最后一行加入\n1 2 3 4 5 6 function prompt { # 显示当前路径 Write-Host \u0026#34;$PWD\u0026#34; -ForegroundColor Green # 提供第二行输入命令 return \u0026#34;\u0026gt; \u0026#34; } 刷新\n1 . $PROFILE 最终样式\nCMD 临时修改\n1 PROMPT=$P$_$G $P：显示当前路径。 $_：换行符。 $G：显示 \u0026gt;。 永久修改\n在用户环境变量或者系统环境变量新增PROMPT，变量值为\n1 $P$_$G 保存重启\n","date":"2025-03-11T10:28:21+08:00","permalink":"https://hublog.netlify.app/p/250311102821/","title":"VSCode终端美化显示，第一行显示路径，第二行输入命令"},{"content":"简介 本次介绍的项目是通过 cloudflare workers 部署的临时域名邮箱网站，可生成随机前缀，用于注册不知名的小众网站，保护个人邮箱\n项目：cloudflare_temp_email\n官网：https://temp-mail-docs.awsl.uk/\nGitHub Action 部署 创建 D1 数据库 打开 cloudflare 控制台，选择 Storage \u0026amp; Databases -\u0026gt; # D1 SQL Database -\u0026gt; Create，点击创建数据库\n打开 Console 标签页，输入 schema.sql 的内容，点击 Execute 执行\n可在这里查看全部的数据库文件 db\nGithub Actions 配置 首先 Fork 项目\n打开仓库的 Actions 页面，找到 Deploy Backend 和 Deploy Frontend，点击 enable workflow 启用 workflow\n然后在仓库页面 Settings -\u0026gt; Secrets and variables -\u0026gt; Actions -\u0026gt; Repository secrets, 添加以下 secrets:\nCLOUDFLARE_ACCOUNT_ID: Cloudflare 账户 ID, 参考文档 CLOUDFLARE_API_TOKEN: Cloudflare API Token, 参考文档 BACKEND_TOML: 后端配置文件，参考此处 FRONTEND_ENV: 前端配置文件，请复制 frontend/.env.example的内容，并将 VITE_API_BASE的地址修改为上一步后端的地址。 可参考此处修改 FRONTEND_NAME: 你在 Cloudflare Pages 创建的项目名称，可通过 用户界面 或者 命令行 创建 FRONTEND_BRANCH: (可选) pages 部署的分支，可不配置，默认 production TG_FRONTEND_NAME: (可选) 你在 Cloudflare Pages 创建的项目名称，同 FRONTEND_NAME，如果需要 Telegram Mini App 功能，请填写 DEBUG_MODE: (可选) 是否开启调试模式，配置为 true 开启, 默认 worker 部署日志不会输出到 Github Actions 页面，开启后会输出 BACKEND_USE_MAIL_WASM_PARSER: (可选) 是否使用 wasm 解析邮件，配置为 true 开启, 功能参考 配置 worker 使用 wasm 解析邮件 打开仓库的 Actions 页面，找到 Deploy Backend 和 Deploy Frontend，点击 Run workflow 选择分支手动部署\n","date":"2025-03-10T19:09:14+08:00","permalink":"https://hublog.netlify.app/p/250310190914/","title":"cloudflare_temp_email，自建域名临时邮箱"},{"content":"简介 Open-WebUI 是一个开源的、功能丰富且用户友好的自托管 AI 平台，主要设计用于与各种大型语言模型 (LLM) 运行器进行交互，并提供一个直观的 Web 用户界面。\n主要特点和用途：\nLLM 前端界面： 它提供了一个美观、响应式的 Web 界面，让用户可以方便地与本地或远程部署的大型语言模型（如通过 Ollama 运行的模型）进行对话和交互。它也支持与 OpenAI 兼容的 API。 离线运行能力： 设计为可以完全离线运行，这意味着你可以在本地机器上托管并与 AI 模型交互，无需依赖外部云服务。 多模型支持： 能够管理和切换不同的 LLM 模型，支持包括 LLaMA、Mistral、Qwen、Gemma 等多种开源模型。 会话管理： 提供多会话管理、指令模式等功能，方便用户组织和回顾与 AI 的对话历史。 RAG（检索增强生成）集成： 内置推理引擎，支持 RAG 功能，这意味着它可以结合外部文档或知识库来增强模型的回答，例如与本地 PDF、CSV、TXT、MD、DOCX 等文档进行对话。 功能扩展： 允许通过 Functions 和 Pipelines 等机制进行功能扩展，例如实现自定义函数调用、构建复杂的 RAG 流程、消息监控、速率限制过滤、实时翻译等。 易于部署： 支持通过 Docker、Kubernetes 等容器化技术轻松部署，简化了设置过程。 用户权限管理： 提供细粒度的用户权限和用户组管理功能，确保多用户环境下的安全性和定制化体验。 部署 source uv(未完成) 安装 uv\n1 2 # On macOS and Linux. curl -LsSf https://astral.sh/uv/install.sh | sh 1 2 # On Windows. powershell -ExecutionPolicy ByPass -c \u0026#34;irm https://astral.sh/uv/install.ps1 | iex\u0026#34; 创建环境，并激活\n1 2 uv venv source .venv/bin/activate 下载 vllm\n1 uv pip install vllm 运行模型\n1 2 # Load and run the model: vllm serve \u0026#34;HuggingFaceTB/SmolLM-135M\u0026#34; pip 1 pip install open-webui 1 open-webui serve docker compose 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 services: open-webui: image: ghcr.io/open-webui/open-webui:latest container_name: open-webui ports: - 8080:8080 environment: - ENABLE_OPENAI_API=False # 禁用 OpenAI 集成，卡死的原因就是这个 - OFFLINE_MODE=True # 启用离线模式，不从 HuggingFace 拉取模型数据 # - OLLAMA_BASE_URL=http://\u0026lt;Ollama-Server-IP\u0026gt;:\u0026lt;Port\u0026gt; - USE_OLLAMA_DOCKER=False # 不使用集成 Ollama 容器 - TZ=Asia/Shanghai restart: unless-stopped volumes: - ./open-webui_data:/app/backend/data 访问 IP:8080\n配置 使用 OpenAI 格式兼容的 API 服务 左下角或者右上角头像 Admin Panel Settings Connections，开启OpenAI API 添加 api，注意 url 端点需要加上版本号v1 图像生成 左下角或者右上角头像 Admin Panel Settings Images 开启图像生成 选择图像生成服务 Provider URL KEY Model Gemini https://generativelanguage.googleapis.com/v1beta gemini-2.0-flash-preview-image-generation ","date":"2025-03-10T18:54:32+08:00","permalink":"https://hublog.netlify.app/p/250310185432/","title":"Open-WebUI，一个用户友好界面友好的大模型客户端"},{"content":"查看当前时区\n1 timedatectl 查看所有可用时区\n1 timedatectl list-timezones 设置新时区\n1 sudo timedatectl set-timezone Asia/Shanghai 查看硬件时钟\n1 sudo hwclock --show 同步硬件时钟到系统时间\n1 sudo hwclock --systohc 同步系统时间到硬件时钟\n1 sudo hwclock --hctosys ","date":"2025-03-10T18:45:01+08:00","permalink":"https://hublog.netlify.app/p/250310184501/","title":"Linux设置时间，时区，同步硬件时钟"},{"content":"在多级器批量操作的时候，使用脚本需要用到 sudo 权限，如果需要输入密码会导致脚本执行失败，所以需要配置\n1 sudo visudo 在最后面新增一行\n1 用户名 ALL=(ALL:ALL) NOPASSWD: ALL 保存退出\n","date":"2025-03-10T14:31:56+08:00","permalink":"https://hublog.netlify.app/p/250310143156/","title":"Linux设置sudo无须密码"},{"content":" 1 sudo update-alternatives --config editor 选择对应的编辑器\n","date":"2025-03-10T14:29:23+08:00","permalink":"https://hublog.netlify.app/p/250310142923/","title":"Linux修改默认编辑器"},{"content":"yarn 默认端口\n8088：http服务 ","date":"2025-03-10T00:52:41+08:00","permalink":"https://hublog.netlify.app/p/250310005241/","title":"Hadoop之yarn"},{"content":"简介 ","date":"2025-03-09T19:22:41+08:00","permalink":"https://hublog.netlify.app/p/250309192241/","title":"Hadoop高可用配置"},{"content":"启动系统时 长按 Shift 键进入 grub 菜单\n按 e 编辑启动项\n找到以 linux 开头的行\n删除最后部分 ro Quiet...\n替换为 rw init=/bin/bash\nCtrl+x 或者 F10 重启系统\n重置密码 passwd\n重启\n","date":"2025-03-08T11:34:48+08:00","permalink":"https://hublog.netlify.app/p/250308113448/","title":"Linux忘记root账户密码恢复办法"},{"content":"简介 本篇将介绍 Pandas 的基础知识\n准备 快速创建一个可以使用 Pandas 的环境，可以使用 Minconda 快速创建\n1 2 3 conda create --name pandas conda activate pandas conda install pandas 使用 VSCode 编写代码\n安装插件 jupyter\nDataFrame 关于这部分的内容，通过代码分享作为说明\n","date":"2025-03-05T22:30:57+08:00","permalink":"https://hublog.netlify.app/p/250305223057/","title":"Pandas入门教程"},{"content":"简介 安装 Windows 下载地址：https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe\n配置 配置包下载加速镜像 使用 Anaconda Prompt 进入 conda 环境\n修改用户目录下的 .condarc 文件来使用镜像站。\n不同系统下的 .condarc 目录如下：\nLinux: ${HOME}/.condarc macOS: ${HOME}/.condarc Windows: C:\\Users\\\u0026lt;YourUserName\u0026gt;\\.condarc 修改 conda 源为国内镜像源\n1 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ 1 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ 1 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ 设置搜索时，显示通道的地址\n1 conda config --set show_channel_urls yes 查看通道地址\n1 conda config --show channels 使用 使用 Anaconda Prompt 进入 conda 环境\n创建环境名为 pandas 的环境\n1 conda create --name pandas 激活环境\n1 conda activate pandas 取消激活的环境\n1 conda deactivate pandas 查看当前环境下的包\n1 conda list 添加指定名字的包\n1 conda install pandas ","date":"2025-03-05T22:26:07+08:00","permalink":"https://hublog.netlify.app/p/250305222607/","title":"Minconda安装使用"},{"content":"简介 本文将介绍 MySQL 基础知识\nSQL 语句根据功能分为四种：\n数据定义语言 DDL：Data Definition Language 数据操纵语言 DML：Data Maniplation Language 数据控制语言 DCL：Data Control Language 数据查询语言 DQL：Data Query Language DDL 数据定义语言\n作用：用于定义数据库的结构，例如数据库对象（表、索引、视图、存储过程）的创建、修改和删除\n主要语句：\nCREATE：创建数据库对象，例如：CREATE TABLE，CREATE INDEX，CREATE INDEX ALTER：修改数据库对象，例如 ALTER TABLE DROP：删除数据库对象，例如 DROP TABLE，DROP INDEX，DROP VIEW TRUNCATE：清空表中数据，但保留表结构，例如 TRUNCATE TABLE RENAME：重命名数据库对象，例如 REANME TABLE DML DCL DQL ","date":"2025-03-04T17:21:36+08:00","permalink":"https://hublog.netlify.app/p/250304172136/","title":"MySQL初识"},{"content":"简介 本文将介绍如何利用 ai 工具生成 PPT 文档\n使用 deepseek-r1 生成高质量内容 得益于 deepseek-r1 的强大，我们可以使用它来生成 PPT 的内容，输出为 markdown 格式，\n为了让 r1 更好的理解我们的需求，所以写提示词是一个技术活，需要把自己的需求写清晰\n提示词模板\n1 请用Markdown格式生成一份关于[你的主题]的PPT大纲，需包含封面、目录、3个核心章节（每章至少2个子论点）、总结页，语言简洁专业。 小技巧：加上“避免口语化”“需数据支撑”等要求，内容会更严谨\n提供 DeepSeek-R1 服务的网站\ndeepseek 官网 火山引擎：含邀请码 4AUI6XW8，最高可获 145 元代金券 火山引擎：无邀请码 硅基流动：含邀请码 Uazrw9Jb，可获 2000 万 Tokens 硅基流动：无邀请码 使用 Kimi+PPT 助手生成 PPT deepseek-r1 虽然能输出内容，但是却不能直接生成 PPT，自己排版也是个技术活，这种东西也可以交给第三方工具\nKimi+PPT 助手点击跳转\n进入助手之后，将内容粘贴进对话框，确认内容后，选好一个 PPT 模板，就可以自动生成 PPT 了\n","date":"2025-03-02T23:46:45+08:00","permalink":"https://hublog.netlify.app/p/250302234645/","title":"使用deepseek-r1和kimi+PPT助手生成PPT演示文档"},{"content":"简介 Ollama 是一个开源的，可部署在本地的大模型工具\n本篇将介绍通过网络空间测绘找到暴露在公网的ollama服务\nfofa 地址：https://fofa.info\n搜索语法\n1 app=\u0026#34;Ollama\u0026#34; \u0026amp;\u0026amp; is_domain=false \u0026amp;\u0026amp; country=\u0026#34;CN\u0026#34; Shodan 地址：https://www.shodan.io/\n搜索语法\n1 Ollama is running 使用 查看支持的模型\n1 IP:11434/api/tags ","date":"2025-03-02T23:01:44+08:00","permalink":"https://hublog.netlify.app/p/250302230144/","title":"Ollama可被网络空间扫描找到"},{"content":"简介 go 可以在一个平台上编译其他平台的可执行文件，称为交叉编译\n交叉编译 使用交叉编译只需要设置以下几步\n设置 CGO_ENABLED 为 0 设置 GOOS 环境变量，选择你的目标操作系统 设置 GOARCH 环境变量，选择你的目标 CPU 架构 Windows 下编译\n编译为 windows amd64\n1 2 3 4 set CGO_ENABLED=0 set GOOS=windows set GOARCH=amd64 go build 编译为 windows arm64\n1 2 3 4 set CGO_ENABLED=0 set GOOS=windows set GOARCH=arm64 go build 编译为 linux amd64\n1 2 3 4 set CGO_ENABLED=0 set GOOS=linux set GOARCH=amd64 go build 案例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 # Define configuration file and extract app name/version APP_CONFIG_FILE := ./config/config.toml APP_NAME := $(shell sed -n \u0026#39;s/^name = \u0026#34;\\(.*\\)\u0026#34;/\\1/p\u0026#39; \u0026lt; $(APP_CONFIG_FILE)) APP_VERSION := $(shell sed -n \u0026#39;s/^version = \u0026#34;\\(.*\\)\u0026#34;/\\1/p\u0026#39; \u0026lt; $(APP_CONFIG_FILE)) # Build directory BUILD_DIR := ./build # Supported platforms PLATFORMS := windows-amd64 linux-amd64 darwin-amd64 # Platform-specific suffixes WINDOWS_SUFFIX := .exe DEFAULT_SUFFIX := # Clean build artifacts clean: go clean rm -rf $(BUILD_DIR) # Build for all platforms build: @mkdir -p $(BUILD_DIR) @for platform in $(PLATFORMS); do \\ os=$$(echo $$platform | cut -d \u0026#39;-\u0026#39; -f 1); \\ arch=$$(echo $$platform | cut -d \u0026#39;-\u0026#39; -f 2); \\ suffix=$$DEFAULT_SUFFIX; \\ if [ \u0026#34;$$os\u0026#34; = \u0026#34;windows\u0026#34; ]; then \\ suffix=$(WINDOWS_SUFFIX); \\ fi; \\ echo \u0026#34;Building for GOOS=$$os GOARCH=$$arch platform=$$platform with suffix $$suffix\u0026#34;; \\ GOOS=$$os GOARCH=$$arch go build -o $(BUILD_DIR)/$(APP_NAME)-$(APP_VERSION)-$$platform$$suffix main.go; \\ done # Default target all: clean build 执行如下命令编译\n1 make all 附录 GOOS 和 GOARCH 可选值对应表 $GOOS $GOARCH aix ppc64 android 386 android amd64 android arm android arm64 darwin amd64 darwin arm64 dragonfly amd64 freebsd 386 freebsd amd64 freebsd arm illumos amd64 ios arm64 js wasm linux 386 linux amd64 linux arm linux arm64 linux loong64 linux mips linux mipsle linux mips64 linux mips64le linux ppc64 linux ppc64le linux riscv64 linux s390x netbsd 386 netbsd amd64 netbsd arm openbsd 386 openbsd amd64 openbsd arm openbsd arm64 plan9 386 plan9 amd64 plan9 arm solaris amd64 wasip1 wasm windows 386 windows amd64 windows arm windows arm64 参考：https://go.dev/doc/install/source#environment\n","date":"2025-03-02T10:17:46+08:00","permalink":"https://hublog.netlify.app/p/250302101746/","title":"Go语言交叉编译"},{"content":"简介 之前介绍了一片 Windows 安装 gcc 环境，今天介绍第二种选择\nw64devkit\n项目地址：https://github.com/skeeto/w64devkit\n安装 直接下载：https://github.com/skeeto/w64devkit/releases/download/v2.1.0/w64devkit-x64-2.1.0.exe\n下载之后，Windows 10 上报毒，我查看了 issuse，这是一个误报，所以在 Windows 安全中心信任它\n安装下载的可执行文件\n将解压的文件夹目录下 bin 文件夹所在的路径添加到环境变量\n","date":"2025-03-02T10:09:16+08:00","permalink":"https://hublog.netlify.app/p/250302100916/","title":"Windows安装gcc环境第二种选择，w64devkit"},{"content":" 信息\n站点已使用 vercount 开启统计功能，包含：\n总访问量统计 总访客量统计 页面访问量统计 ","date":"2025-03-01T22:09:46+08:00","permalink":"https://hublog.netlify.app/p/250301220946/","title":"2025-03-01开启站点统计"},{"content":"简介 有时候需要在 Linux 处理数据，Linux 上有三种命令行工具：\nawk：一种强大的文本处理工具，常用于模式匹配和数据提取。 sed：流编辑器，用于对文本进行基本的编辑和转换，适合批量处理文件内容。 grep：用于搜索文本文件中匹配特定模式的行，支持正则表达式。 这三者结合可以很方便的处理和分析数据，是 Linux 系统管理员和开发者的重要工具。\n人称 shell 三剑客\ngrep 这是一个命令行搜索工具，可以在文件或输入流中搜索特定模式的行\n结合管道命令将执行的结果传递给后面，对于完成一些复杂的操作很友好\n语法：\n1 grep [选项] 模式 [文件...] 常见选项\n-i：忽略大小写 -v：反向匹配，只显示不匹配的内容 sed sed 是一个文本处理工具，用于在命令行中对文件中的文本进行修改。它的输入可以是文件，也可以从管道读取数据\n语法：\n1 sed [选项] \u0026#39;命令\u0026#39; [文件...] 常见选项\n-i：直接修改文件内容 -n：静默输出，不输出文件中的内容 常见命令\ns/pattern/replacement/flag：这是最常用的命令，用于将匹配的 pattern 替换为 replacement 案例\n将文件中所有 \u0026ldquo;apple\u0026rdquo; 替换为 \u0026ldquo;orange\u0026rdquo;\n1 sed \u0026#39;s/apple/orange/g\u0026#39; myfile.txt awk awk 是一种文本处理工具，主要用于从文本文件中提取数据并进行格式化输出。 它是一种编程语言，允许你编写脚本来处理文本数据。 awk 逐行读取输入文件，将每一行分割成字段，然后根据你定义的规则对这些字段进行处理。\n语法：\n1 awk [选项] \u0026#39;模式 {动作}\u0026#39; [文件...] 常见选项：\n-F：指定字段分隔符，默认是空格或制表符 1 awk -F\u0026#39;:\u0026#39; \u0026#39;{print $1}\u0026#39; /etc/passwd # 使用 \u0026#34;:\u0026#34; 作为分隔符，打印 /etc/passwd 文件的第一个字段 (用户名) -v：定义变量 1 awk -v name=\u0026#34;John\u0026#34; \u0026#39;{print \u0026#34;Hello, \u0026#34; name}\u0026#39; myfile.txt # 定义变量 name 并打印 内置变量：\n$0：整行文本 $1，$2，\u0026hellip;：第一个字段，第二字段 NF：当前行的字段数 NR：当前行的行号 模式：\n正则表达式： 1 awk \u0026#39;/pattern/ {print $0}\u0026#39; myfile.txt # 打印包含 \u0026#34;pattern\u0026#34; 的行 关系表达式： 1 awk \u0026#39;$1 \u0026gt; 10 {print $0}\u0026#39; myfile.txt # 打印第一个字段大于 10 的行 ","date":"2025-03-01T18:29:05+08:00","permalink":"https://hublog.netlify.app/p/250301182905/","title":"SHELL三剑客grep，sed，awk使用教程"},{"content":" 1 cat /etc/os-release 1 cat /etc/lsb-release 1 lsb_release -a 1 cat /etc/issue 1 hostnamectl ","date":"2025-03-01T10:11:34+08:00","permalink":"https://hublog.netlify.app/p/250301101134/","title":"Linux查看当前系统发行版本"},{"content":"简介 Linux 下负责配置 DNS 服务器是在/etc/resolv.conf文件中，但是修改它重启就会失效\nUbuntu 使用 netplan 配置 DNS 也是无法生效\n查看 /etc/resolv.conf 文件，它是一个软链接，指向 /run/systemd/resolve/resolv.conf\n原因是它是由 systemd-resoved 服务接管自动配置\n按理说 netplan 设置也会生效，为何不生效？\n经我测试，netplan 设置后确实生效，/run/systemd/resolve/resolv.conf的内容被修改了，但是，/etc/resolv.conf虽然是一个软链接到 /run/systemd/resolve/resolv.conf，但还是原来的内容。说明这个软链接是个假的软链接。\n解决办法就是删除 /etc/resolv.conf ，重新创建它，指向/run/systemd/resolve/resolv.conf\n1 sudo rm -rf /etc/resolv.conf 1 sudo ln -s /run/systemd/resolve/resolv.conf /etc/ DNS 配置 根据前文所说，有两种方式配置 DNS，\n一种是修改 netplan 配置 一种是修改 /etc/systemd/resolved.conf 二选其一即可，推荐修改 netplan 配置\n方式一 修改 netplan 配置，50-cloud-init.yaml 为配置文件，你的可能不一样\n1 sudo vim /etc/netplan/50-cloud-init.yaml 在 配置文件中指定 DNS 服务器\n1 2 3 4 5 6 7 8 9 10 network: ethernets: enp0s3: dhcp4: true nameservers: addresses: [223.5.5.5,8.8.8.8] #dns enp0s8: dhcp4: false addresses: [192.168.56.102/24] version: 2 应用配置\n1 sudo netplan apply 查看 /run/systemd/resolve/resolv.conf 中的内容\n1 sudo cat /run/systemd/resolve/resolv.conf 如下\n1 2 3 4 5 6 7 nameserver 223.5.5.5 nameserver 8.8.8.8 nameserver 10.0.2.3 # Too many DNS servers configured, the following entries may be ignored. nameserver fd00::3 nameserver 192.168.56.1 search lan 方式二 修改 /etc/systemd/resolved.conf\n1 sudo vim /etc/systemd/resolved.conf 在 配置文件中指定 DNS 服务器\n1 2 3 4 5 6 [Resolve] # Some examples of DNS servers which may be used for DNS= and FallbackDNS=: # Cloudflare: 1.1.1.1#cloudflare-dns.com 1.0.0.1#cloudflare-dns.com 2606:4700:4700::1111#cloudflare-dns.com 2606:4700:4700::1001#cloudflare-dns.com # Google: 8.8.8.8#dns.google 8.8.4.4#dns.google 2001:4860:4860::8888#dns.google 2001:4860:4860::8844#dns.google # Quad9: 9.9.9.9#dns.quad9.net 149.112.112.112#dns.quad9.net 2620:fe::fe#dns.quad9.net 2620:fe::9#dns.quad9.net DNS=223.5.5.5 8.8.8.8 保存退出，重启 systemd-resolved，\n1 sudo systemctl restart systemd-resolved 查看 /run/systemd/resolve/resolv.conf 中的内容\n1 sudo cat /run/systemd/resolve/resolv.conf 如下\n1 2 3 4 5 6 7 nameserver 223.5.5.5 nameserver 8.8.8.8 nameserver 10.0.2.3 # Too many DNS servers configured, the following entries may be ignored. nameserver fd00::3 nameserver 192.168.56.1 search lan ","date":"2025-03-01T09:39:37+08:00","permalink":"https://hublog.netlify.app/p/250301093937/","title":"Ubuntu22.04修改DNS"},{"content":"4A4RR-813DK-M81A9-4U35H-06KND\nNZ4RR-FTK5H-H81C1-Q30QH-1V2LA\nJU090-6039P-08409-8J0QH-2YR7F\n4Y09U-AJK97-089Z0-A3054-83KLA\n4C21U-2KK9Q-M8130-4V2QH-CF810\nMC60H-DWHD5-H80U9-6V85M-8280D\nZA30U-DXF84-4850Q-UMMXZ-W6K8F\nAC590-2XW97-48EFZ-TZPQE-MYHEA\nYF39K-DLFE5-H856Z-6NWZE-XQ2XD\nAC15R-FNZ16-H8DWQ-WFPNV-M28E2\nCZ1J8-A0D82-489LZ-ZMZQT-P3KX6\nYA11K-6YE8H-H89ZZ-EXM59-Y6AR0\n==========================================\nVMware Workstation16 密钥：\nZF3R0-FHED2-M80TY-8QYGC-NPKYF YF390-0HF8P-M81RQ-2DXQE-M2UT6 ZF71R-DMX85-08DQY-8YMNC-PPHV8 VMware Workstation Pro 15 激活许可证：\nUY758-0RXEQ-M81WP-8ZM7Z-Y3HDA VF750-4MX5Q-488DQ-9WZE9-ZY2D6 UU54R-FVD91-488PP-7NNGC-ZFAX6 YC74H-FGF92-081VZ-R5QNG-P6RY4 YC34H-6WWDK-085MQ-JYPNX-NZRA2 VMware Workstation Pro 14 激活许可证：\nFF31K-AHZD1-H8ETZ-8WWEZ-WUUVA CV7T2-6WY5Q-48EWP-ZXY7X-QGUWD VMware Workstation Pro 12 激活许可证：\n5A02H-AU243-TZJ49-GTC7K-3C61N VF5XA-FNDDJ-085GZ-4NXZ9-N20E6 UC5MR-8NE16-H81WY-R7QGV-QG2D8 ZG1WH-ATY96-H80QP-X7PEX-Y30V4 AA3E0-0VDE1-0893Z-KGZ59-QGAVF ","date":"2025-02-28T17:53:05+08:00","permalink":"https://hublog.netlify.app/p/250228175305/","title":"VMware Workstation 17 Pro许可证"},{"content":" 检查防火墙 检查myid 在 zoo.cfg 中添加如下\n1 quorumListenOnAllIPs=true 表示监听所有网卡\n重启服务器\n","date":"2025-02-28T15:11:07+08:00","permalink":"https://hublog.netlify.app/p/250228151107/","title":"zookeeper进程启动成功，查看状态却显示不在运行"},{"content":"简介 使用 ubuntu22.04 ubuntu24.04 这几个版本时候发现，ssh 连接后直接执行命令找不到环境变量\n原因在于 用户 .bashrc 最开始有这样一段 bash 脚本\n1 2 3 4 5 # If not running interactively, don\u0026#39;t do anything case $- in *i*) ;; *) return;; esac 它的作用是阻止脚本在非交互式环境下执行某些操作\n所以 ssh 后直接执行命令 无法执行。\n解决办法 注释掉 $HOME/.bashrc 开头的这段代码\n1 vim $HOME/.bashrc 1 2 3 4 5 # If not running interactively, don\u0026#39;t do anything case $- in *i*) ;; *) return;; esac 如果额外想要在 ssh 后直接可以读取 /etc/profile.d/*.sh 下的环境变量\n可以在 $HOME/.bashrc添加如下的脚本\n1 2 3 4 5 6 7 8 9 for i in /etc/profile.d/*.sh /etc/profile.d/sh.local; do if [ -r \u0026#34;$i\u0026#34; ]; then if [ \u0026#34;${-#*i}\u0026#34; != \u0026#34;$-\u0026#34; ]; then . \u0026#34;$i\u0026#34; else . \u0026#34;$i\u0026#34; \u0026gt;/dev/null fi fi done ","date":"2025-02-28T14:16:42+08:00","permalink":"https://hublog.netlify.app/p/250228141642/","title":"Ubuntu使用ssh连接执行命令找不到环境变量"},{"content":"简介 这篇文章将介绍 Obsidian 下实用的插件，在精不在多\nHidden Folder 隐藏文件夹\nGit 对当前的仓库实行 Git 管理，不再需要打开终端执行 Git 命令\nFile Hider 隐藏文件\nTemplater 模板，可快速创建对应模板的新文件\nPanGu 格式化文档，中英文中间自动加空格\n快捷键：ctrl+shift+s\nRemotely Save 远程备份，支持多种方式的备份，也支持 Webdav\nImage Auto Upload 使用 Picgo 或者 picgo-core 自动上传图片\n","date":"2025-02-26T12:53:46+08:00","permalink":"https://hublog.netlify.app/p/250226125346/","title":"Obsidian插件"},{"content":"简介 Ubuntu24.04 的网络配置是通过 netplan 配置的，\n配置文件在/etc/netplan下，格式为 yaml\n配置静态 ip 首先查看网络接口\n1 ip a 如下所示\nenp0s3 是 nat 网卡，用于访问外部网络的。 enp0s8 是主机和虚拟机之间访问的网卡。 配置 enp0s8 接口\n编辑 /etc/netplan/ 的文件\n1 sudo vim /etc/netplan/50-cloud-init.yaml 如下所示\n1 2 3 4 5 6 7 8 9 10 network: ethernets: enp0s3: dhcp4: true nameservers: addresses: [223.5.5.5,8.8.8.8] #dns enp0s8: dhcp4: false addresses: [192.168.56.100/24] version: 2 保存退出\nnetplan 命令应用配置\n1 sudo netplan apply 网络被重置 通过 Virtualbox 虚拟机安装 ubuntu，配置静态 ip 之后，可以生效，但是，重启之后，发现配置被重置了\n解决办法：禁用云初始化\n1 sudo vim /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg 写入\n1 network: {config: disabled} 重启 cloud-init 服务\n1 sudo systemctl restart cloud-init 重启虚拟机\n","date":"2025-02-24T14:47:52+08:00","permalink":"https://hublog.netlify.app/p/250224144752/","title":"Ubuntu24.04静态ip配置，重启虚拟机网络被重置解决办法"},{"content":"简介 alist-tvbox 是一个 AList 代理，支持 xiaoya 版 AList 界面管理\n源码：https://github.com/power721/alist-tvbox\n功能 管理界面 海报墙 多个 AList 站点 多个阿里云盘账号 挂载我的云盘 支持夸克、UC、115 网盘 自动签到 自动刷新阿里 Token 自定义 TvBox 配置 安全订阅配置 TvBox 配置聚合 添加阿里云盘分享 添加 PikPak 分享 支持 BiliBili 管理 AList 服务 小雅配置文件管理 构建索引 在线日志 部署 native 版本 native 版本内存占用更少\n1 2 mkdir -p /opt/service/alist-tvbox cd /opt/service/alist-tvbox 1 vim docker-compose.yml 填入内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 version: \u0026#39;3.9\u0026#39; services: xiaoya-tvbox: image: \u0026#39;haroldli/xiaoya-tvbox:native\u0026#39; container_name: xiaoya-tvbox restart: unless-stopped volumes: - \u0026#39;./xiaoya-tvbox_data:/data\u0026#39; environment: - ALIST_PORT=5344 ports: - \u0026#39;5344:80\u0026#39; - \u0026#39;4567:4567\u0026#39; deploy: resources: limits: cpus: \u0026#39;0.85\u0026#39; # 限制 CPU 最大 85% networks: - alist_network networks: alist_network: external: true 1 docker compose up -d 默认用户名和密码：\nusername: admin\npassword: admin\n","date":"2025-02-21T18:24:33+08:00","permalink":"https://hublog.netlify.app/p/250221182433/","title":"alist-tvbox，AList代理，支持xiaoya版AList界面管理"},{"content":"简介 csdn 广告太多、内容大多都是互相复制粘贴，质量很差，唯独搜索引擎的比重还很高，每次搜索都会出现头部列表都是它们\nzhihu 虽然比 csdn 好点，但是需要登录，需要跳转，都很烦，最好的办法是通过搜索引擎屏蔽掉\n方式一 办法是在搜索 后面加上\n1 -site csdn.net -site zhihu.com 不过每次搜索都要输入未免麻烦，最好的办法是加入自定义搜索引擎，每次通过地址栏搜索都会自动添加它们，但是 Firefox 默认 是不能添加自定义搜索引擎的，今天教大家如何开启\n方式二 地址栏输入\n1 about:config 同意，搜索\n1 browser.urlbar.update2.engineAliasRefresh 点击切换按钮，将值改为 true\n打开设置下的搜索，地址栏输入\n1 about:preferences#search 滑到最下面，快捷搜索出现 添加按钮，点击添加：\n搜索引擎名称：自定义，如：Bing (-csdn,-zhihu) 搜索引擎 URL： 1 https://bing.com/search?q=%s+-site%3Acsdn.net+-site%3Azhihu.com 别名：可不填 添加，回到最上面，将 默认搜索引擎修改为 Bing (-csdn,-zhihu)\n大功告成。\n","date":"2025-02-21T15:04:44+08:00","permalink":"https://hublog.netlify.app/p/250221150444/","title":"Firefox自定义搜索引擎，屏蔽csdn，zhihu等网站"},{"content":"简介 起因：\n我在使用 go 编写的程序，用到 SQLite 数据库 在 Windows 平台使用 SQLite 需要有 gcc 环境， 不过，Windows 上使用 gcc 还真是麻烦，搜索引擎搜出来的答案不尽人意，有的过时，有的下载后报毒。\n花了一番功夫，总算找到了一个很好的安装 gcc 环境的方法。\n下载 这里使用 Github 下载的软件，无毒\n下载地址：https://github.com/niXman/mingw-builds-binaries/releases/tag/14.2.0-rt_v12-rev1\n选择 x86_64-14.2.0-release-mcf-seh-ucrt-rt_v12-rev1.7z 即可\n解压，加入环境变量，终端运行\n1 gcc -v 结果显示如下，表示 gcc 可用\n1 2 3 4 5 6 7 8 Using built-in specs. COLLECT_GCC=D:\\develop\\mingw64\\bin\\gcc.exe COLLECT_LTO_WRAPPER=D:/develop/mingw64/bin/../libexec/gcc/x86_64-w64-mingw32/14.2.0/lto-wrapper.exe Target: x86_64-w64-mingw32 Configured with: ../../../src/gcc-14.2.0/configure --host=x86_64-w64-mingw32 --build=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 --prefix=/mingw64 --with-sysroot=/c/buildroot/x86_64-1420-mcf-seh-ucrt-rt_v12-rev1/mingw64 --enable-host-shared --disable-multilib --enable-languages=c,c++,fortran,lto --enable-libstdcxx-time=yes --enable-threads=mcf --enable-libgomp --enable-libatomic --enable-lto --enable-graphite --enable-checking=release --enable-fully-dynamic-string --enable-version-specific-runtime-libs --enable-libstdcxx-filesystem-ts=yes --disable-libssp --disable-libstdcxx-pch --disable-libstdcxx-debug --enable-bootstrap --disable-rpath --disable-win32-registry --disable-nls --disable-werror --disable-symvers --with-gnu-as --with-gnu-ld --with-arch=nocona --with-tune=core2 --with-libiconv --with-system-zlib --with-gmp=/c/buildroot/prerequisites/x86_64-w64-mingw32-static --with-mpfr=/c/buildroot/prerequisites/x86_64-w64-mingw32-static --with-mpc=/c/buildroot/prerequisites/x86_64-w64-mingw32-static --with-isl=/c/buildroot/prerequisites/x86_64-w64-mingw32-static --with-pkgversion=\u0026#39;x86_64-mcf-seh-rev1, Built by MinGW-Builds project\u0026#39; --with-bugurl=https://github.com/niXman/mingw-builds LD_FOR_TARGET=/c/buildroot/x86_64-1420-mcf-seh-ucrt-rt_v12-rev1/mingw64/bin/ld.exe --with-boot-ldflags=\u0026#39;-pipe -fno-ident -L/c/buildroot/x86_64-1420-mcf-seh-ucrt-rt_v12-rev1/mingw64/opt/lib -L/c/buildroot/prerequisites/x86_64-zlib-static/lib -L/c/buildroot/prerequisites/x86_64-w64-mingw32-static/lib -Wl,--disable-dynamicbase -static-libstdc++ -static-libgcc\u0026#39; Thread model: mcf Supported LTO compression algorithms: zlib gcc version 14.2.0 (x86_64-mcf-seh-rev1, Built by MinGW-Builds project) 版本选择 mcf vs. posix: 这涉及到编译器和标准库的实现。 mcf: 这可能指的是 MinGW Cross Framework，它是一个用于在 Windows 上构建 Unix 风格程序的工具集。 mcf 版本通常更倾向于与 MinGW 环境集成。 posix: POSIX (Portable Operating System Interface) 是一组标准，旨在确保不同操作系统之间的软件可移植性。 posix 版本通常更倾向于遵循 POSIX 标准，并且可能包含一些与 POSIX 兼容的库。 ucrt vs. msvcrt: 这指的是 C 运行时库。 ucrt: Universal C Runtime，是 Windows 10 及更高版本上的标准 C 运行时库。它是 Windows 操作系统的核心组件。 msvcrt: Microsoft Visual C++ Runtime Library，是旧版本的 Windows 上使用的 C 运行时库。 你应该选择哪个？\n如果你在 Windows 10 或更高版本上开发，并且希望使用最新的 C 运行时库，那么 ucrt 版本是更好的选择。 这是最常见的选择。 mcf-seh-ucrt-rt_v12-rev1.7z 可能是最适合你的，因为它明确使用了 ucrt，并且 mcf 意味着它可能针对 MinGW 环境进行了优化。 posix 版本通常用于需要跨平台兼容性的项目。除非你有明确的需求，否则通常不需要 posix 版本。 msvcrt 版本通常用于支持旧版本的 Windows。除非你需要支持旧版本的 Windows，否则不需要 msvcrt 版本。 总结:\n通常情况下，x86_64-14.2.0-release-mcf-seh-ucrt-rt_v12-rev1.7z 是一个好的选择，因为它使用了最新的 ucrt 运行时库。 如果你确实需要与 POSIX 兼容，那就选择带有 posix 和 ucrt的版本。 除非你需要支持非常旧的 Windows 版本，否则避免使用 msvcrt 版本。\n","date":"2025-02-18T22:42:47+08:00","permalink":"https://hublog.netlify.app/p/250218224247/","title":"Windows安装gcc环境，mingw-builds-binaries"},{"content":"简介 Window 平台上，很多软件需要开机自启动，后台运行，但软件本身没有提供这样的功能，这时候可以借助 NSSM 帮助创建系统服务，实现像 Linux 那样的 systemd 单元。\n安装 下载地址：https://nssm.cc/release/nssm-2.24.zip\n加速下载地址：https://www.123912.com/s/4MOKVv-QZspd?提取码:nsJD\n备用地址：https://www.123865.com/s/4MOKVv-QZspd?提取码:nsJD\n解压，配置环境变量\n打开终端，输入 nssm，出现如下即可\n1 2 3 NSSM: The non-sucking service manager Version 2.24 64-bit, 2014-08-31 Usage: nssm \u0026lt;option\u0026gt; [\u0026lt;args\u0026gt; ...] 使用 安装服务\n1 nssm install \u0026lt;服务名\u0026gt; \u0026lt;应用程序\u0026gt; [参数 ...] 启动服务\n1 nssm start \u0026lt;服务名\u0026gt; 停止服务\n1 nssm stop \u0026lt;服务名\u0026gt; 删除服务\n1 nssm remove \u0026lt;服务名\u0026gt; 重启服务\n1 nssm restart \u0026lt;服务名\u0026gt; 案例 创建 alist 系统服务 方式 1\n1 nssm install alist \u0026#34;D:\\Program Files\\alist\\alist.exe\u0026#34; \u0026#34;server --data=\\\u0026#34;D:\\Program Files\\alist\\data\\\u0026#34;\u0026#34; 方式 2\n1 nssm install alist \u0026#34;D:\\remote\\alist\\alist.exe\u0026#34; \u0026#34;server\u0026#34; \u0026#34;--data\u0026#34; \u0026#34;D:\\remote\\alist\\data\u0026#34; 创建 syncthing 服务 1 nssm install syncthing \u0026#34;D:\\remote\\syncthing-windows-amd64-v1.29.2\\syncthing.exe\u0026#34; -no-browser 创建 sing-box@config-mixed 服务 1 nssm install sing-box@config-mixed \u0026#34;C:\\Users\\taoone\\AppData\\Local\\Microsoft\\WinGet\\Links\\sing-box.exe\u0026#34; \u0026#34;-D\u0026#34; \u0026#34;E:\\backup\\application\\sing-box\\client\\windows\u0026#34; \u0026#34;-c\u0026#34; \u0026#34;E:\\backup\\application\\sing-box\\client\\windows\\config-mixed.json\u0026#34; \u0026#34;run\u0026#34; 进入服务，找到 sing-box@config-mixed，设置用户为当前用户，启动\n1 nssm start sing-box@config-mixed 1 nssm remove sing-box@config-mixed 1 nssm stop sing-box@config-mixed ","date":"2025-02-18T17:06:59+08:00","permalink":"https://hublog.netlify.app/p/250218170659/","title":"nssm，创建Windows系统服务的工具"},{"content":"简介 Syncthing 是一个跨平台的同步工具，支持 Windows、MacOS、Linux、FreeBSD、Android 等等平台。\n特点：易于使用，界面简单，支持版本管理\nsyncthing 首页主要分为三类：\n文件夹：同步的文件夹 此设备：设备的信息 远程设备：同步文件夹的远程设备 安装 Windows 下载地址：https://github.com/syncthing/syncthing/releases/tag/v1.29.2\n解压，点击 syncthing.exe 即可运行\n浏览器打开：http://127.0.0.1:8384/\nLinux 使用包管理器安装\n1 2 # Debian/Ubuntu sudo apt install syncthing 如果觉得自带的包管理器版本低，可以添加 syncthing 的仓库\n1 2 3 # Add the release PGP keys: sudo mkdir -p /etc/apt/keyrings sudo curl -L -o /etc/apt/keyrings/syncthing-archive-keyring.gpg https://syncthing.net/release-key.gpg 1 2 # Add the \u0026#34;stable\u0026#34; channel to your APT sources: echo \u0026#34;deb [signed-by=/etc/apt/keyrings/syncthing-archive-keyring.gpg] https://apt.syncthing.net/ syncthing stable\u0026#34; | sudo tee /etc/apt/sources.list.d/syncthing.list 1 2 3 # Update and install syncthing: sudo apt-get update sudo apt-get install syncthing 启动\n1 systemctl --user start syncthing 停止\n1 systemctl --user stop syncthing 开机自动启动\n1 systemctl --user enable syncthing 删除开机自动启动\n1 systemctl --user disable syncthing 浏览器打开：http://127.0.0.1:8384/\n如果是服务器，需要编辑修改监听地址\n1 vim $HOME/.config/syncthing/config.xml 1 2 3 4 5 \u0026lt;address\u0026gt;127.0.0.1:8384\u0026lt;/address\u0026gt; 修改为 \u0026lt;address\u0026gt;0.0.0.0:8384\u0026lt;/address\u0026gt; 重启服务\nAndroid syncthing-fork 这是第三方开发的 app\n下载方式：\n谷歌商店：点此跳转 Github：点此跳转 f-droid：点此跳转 安装根据提示即可\n远程设备 远程设备顾名思义，表示需要同步的设备\n配对设备 首次使用需要配对设备，步骤：\n添加远程设备：找到需要添加的设备 ID，添加即可，手机可直接扫码 在目标设备同意添加 设备地址 发现设备默认采用dynamic策略，会自动判断同步网络情况选择合适的网络传输\n如果需要设置优先策略，比如局域网内设备传输，可以优先设置局域网地址。步骤：\n点击 添加远程设备或 编辑 已经添加的设备 找到 高级，更改地址 在 dynamic前添加设备的 IP 地址和端口，格式：tcp://ip:port，多个地址使用英文 ,隔开 示例：tcp://192.168.68.11:22000, dynamic 同步文件夹 表示同步的文件夹，实现跨设备自动后台同步\n步骤：\n回到主页，找到 文件夹分类，点击 添加文件夹 填写相关信息，参考后续介绍 常规 文件夹标签：描述性标识，可随意定制，建议使用 文件夹/文件夹这种命名，这样做的好处一是识别性，二是在其他设备可自动作为文件夹目录，同步到 Android 设备尤为有用 文件夹 ID：文件夹的唯一标识，不需要更改，也没必要更改 文件夹路径：要想分享的文件夹的路径 共享 选择共享设备，以及密码设置，中转设备加密设置技巧：\n密码不为空：强制要求目标设备加密，可以用在中转设备上，这样中转设备上的文件将会加密，再从中转设备上添加的文件夹分享给第三个设备，第三个设备填入第一个设备设置的密码，就可以解密。 密码为空：目标设备不加密 文件版本控制 syncthing 支持文件版本控制，在同步文件夹自动创建 .stversions文件夹，删除的文件会自动放入此文件夹\n不启用文件版本控制 顾名思义\n回收站版本控制 当 Syncthing 替换或删除文件时，文件将移动到 .stversions 目录。\n简单文件版本控制 当 Syncthing 替换或删除文件时，文件将移动到 .stversions 目录中，文件名带有日期戳版本。\n阶段文件版本控制 当 Syncthing 替换或删除文件时，文件将移动到 .stversions 目录中，文件名带有日期戳版本。 超过最长保留时间，或者不满足下列条件的历史版本，则会自动删除\u0026hellip;\u0026hellip;\n外部文件版本控制 外部命令处理版本控制。必须从共享文件夹中移除文件。如果应用程序的路径包含空格，应用半角引号括起来。\n忽略模式 这个忽略模式适用于本机设备，只针对本次分享的文件夹的忽略，开启后会在同步文件夹新建 .stignore文件用于保存忽略语法\n例如：\nWindows 上想同步某个文件夹，但是某些文件夹不想同步，就可以设置 Android 上会产生一些 .开头的文件夹，同步到其他设备会污染文件夹，也可以忽略 具体情况请自行把握\n语法：\n1 2 3 4 5 6 (?d) 此前缀表示，如果文件阻止删除目录则文件可被删除 (?i) 此前缀表示，后面的模式在匹配时不区分大小写 ! 给定条件的反转（即不排除） * 单级通配符（仅匹配单层文件夹） ** 多级通配符（用以匹配多层文件夹） // 注释，在行首使用 高级 监视更改：使用来自文件系统的通知来检测更改的项目。 监视更改无需定期扫描即可发现大多数更改。 文件夹类型：可以选择发送接收，只发送，只接受，加密接收 完全重新扫描间隔（秒）：默认 3600 秒，表示间隔 1 小时会重新扫描一次文件夹是否有更改 其他暂略\u0026hellip;\u0026hellip;\n系统服务 Windows 直接运行 syncthing 会有一个前台的窗口，关掉就会退出运行，解决方法是安装为系统服务，让系统开机自动启动\n要想实现这个功能，需要借助第三方工具，NSSM\n关于 NSSM 介绍和安装可查看这篇文章：nssm，创建 Windows 系统服务的工具\n创建 syncthing 服务\n1 nssm install syncthing \u0026#34;D:\\remote\\syncthing\\syncthing.exe\u0026#34; -no-browser 修改 syncthing 服务，指定运行用户\n1 nssm edit syncthing 找到 Log on，选择 This account，输入当前用户，密码。保存退出\n启动服务\n1 nssm start syncthing 停止服务\n1 nssm stop syncthing 删除服务\n1 nssm remove syncthing 软件数据备份和恢复 对 syncthing 软件本身的设置（包括同步文件夹和设备等等）备份和恢复\nWindows 配置文件所在位置：\n1 %USERPROFILE%\\AppData\\Local\\Syncthing 备份该文件夹的内容即可，恢复放入此文件即可\nLinux 配置文件所在位置：\n1 $HOME/.config/syncthing 备份该文件夹的内容即可，恢复放入此文件即可\nAndroid syncthing-fork 点击左上角 三横杠打开设置 左下角点击设置 点击 导入与导出 具体的路径页面有所提示，目前是：\n1 backups/syncthing/ 恢复也需要在此文件夹存在文件\n备份模式 如果想要达到备份效果，即是在某一端设备不会自动删除文件，可以在\n操作-高级-文件夹，选中某一个共享的文件夹，找到Ignore Delete，选中。\n这样就不会在同步时，如果某一方设备删除了文件，本地设备不会跟着删除，达到备份效果。\n常见用途：备份照片，视频等。\n重要提示 软件升级前一定要查看发布日志！！，防止升级导致的兼容问题从而导致数据丢失 问题汇总 问题 1 Documents/school\u0026quot; (l9jth-kpuji): folder marker missing (this indicates potential data loss, search docs/forum to get information about how to proceed\n出现这样的错误，需要在分享的文件下新建 .stfolder 文件夹，重新确认\n","date":"2025-02-18T14:56:18+08:00","permalink":"https://hublog.netlify.app/p/250218145618/","title":"syncthing，跨平台远程自动同步工具"},{"content":"Win + R\n输入\n1 %localappdata%\\Programs\\cursor\\resources\\app\\bin 删除\n1 2 code code.cmd 注销\n现在就可以实现 code 打开 VSCode ，cursor 打开 cursor\n","date":"2025-02-17T21:05:05+08:00","permalink":"https://hublog.netlify.app/p/250217210505/","title":"解决cursor安装后code默认打开为cursor"},{"content":"简介 官网：https://github.com/shyiko/jabba\n安装 macOS / Linux https://github.com/shyiko/jabba?tab=readme-ov-file#macos\u0026ndash;linux\nWindows powershell\n1 2 3 4 [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12 Invoke-Expression ( Invoke-WebRequest https://github.com/shyiko/jabba/raw/master/install.ps1 -UseBasicParsing ).Content 卸载 1 Remove-Item \u0026#34;$env:USERPROFILE\\.jabba\u0026#34; -Recurse -Force -ErrorAction SilentlyContinue 使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 # list available JDK\u0026#39;s jabba ls-remote # you can use any valid semver range to narrow down the list jabba ls-remote zulu@~1.8.60 jabba ls-remote \u0026#34;*@\u0026gt;=1.6.45 \u0026lt;1.9\u0026#34; --latest=minor # install Oracle JDK jabba install 1.15.0 # install Oracle Server JRE jabba install sjre@1.8 # install Adopt OpenJDK (Hotspot) jabba install adopt@1.8-0 # install Adopt OpenJDK (Eclipse OpenJ9) jabba install adopt-openj9@1.9-0 # install Zulu OpenJDK jabba install zulu@1.8 jabba install zulu@~1.8.144 # same as \u0026#34;zulu@\u0026gt;=1.8.144 \u0026lt;1.9\u0026#34; # install IBM SDK, Java Technology Edition jabba install ibm@1.8 # install GraalVM CE jabba install graalvm@1.0-0 # install OpenJDK jabba install openjdk@1.10-0 # install OpenJDK with Shenandoah GC jabba install openjdk-shenandoah@1.10-0 # install from custom URL # (supported qualifiers: zip (since 0.3.0), tgz, tgx (since 0.10.0), dmg, bin, exe) jabba install 1.8.0-custom=tgz+http://example.com/distribution.tar.gz jabba install 1.8.0-custom=tgx+http://example.com/distribution.tar.xz jabba install 1.8.0-custom=zip+file:///opt/distribution.zip # uninstall JDK jabba uninstall zulu@1.6.77 # link system JDK jabba link system@1.8.72 /Library/Java/JavaVirtualMachines/jdk1.8.0_72.jdk # list all installed JDK\u0026#39;s jabba ls # switch to a different version of JDK (it must be already `install`ed) jabba use adopt@1.8 jabba use zulu@~1.6.97 echo \u0026#34;1.8\u0026#34; \u0026gt; .jabbarc # switch to the JDK specified in .jabbarc (since 0.5.0) jabba use # set default java version on shell (since 0.2.0) # this version will automatically be \u0026#34;jabba use\u0026#34;d every time you open up a new terminal jabba alias default 1.8 附录 jabba ls-remote 失败？ 出现\n1 Get https://github.com/shyiko/jabba/raw/master/index.json: net/http: TLS handshake timeout 需要设置代理，端口设置为自己代理所在的端口\nwindows terminal:\n1 $Env:http_proxy=\u0026#34;http://127.0.0.1:10808\u0026#34;;$Env:https_proxy=\u0026#34;http://127.0.0.1:10808\u0026#34; cmd:\n1 set http_proxy=http://127.0.0.1:10808 \u0026amp; set https_proxy=http://127.0.0.1:10808 如果链接不稳定，下载还是失败，可以尝试这样\n1 jabba install graalvm-ce-java8@21.0.0=tgz+https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-21.0.0.2/graalvm-ce-java8-windows-amd64-21.0.0.2.zip ","date":"2025-02-17T15:49:14+08:00","permalink":"https://hublog.netlify.app/p/250217154914/","title":"Java版本管理工具，jabba"},{"content":"浏览器 打开网页使用浏览器下载\n下载工具 Gopeed idm Git clone 官方工具 huggingface-cli 和 hf_transfer 是 hugging face 官方提供的专门为下载而设计的工具链。前者是一个命令行工具，后者是下载加速模块。\nhuggingface-cli 下载依赖\n1 pip install -U huggingface_hub 使用方法\n下载模型\n1 huggingface-cli download Qwen/Qwen2.5-3B-Instruct-GGUF qwen2.5-3b-instruct-fp16-00001-of-00002.gguf --local-dir . 这条命令的含义：下载 Qwen/Qwen2.5-3B-Instruct-GGUF 下 qwen2.5-3b-instruct-fp16-00001-of-00002.gguf 文件，指定目录为当前目录\n下载数据集\n1 huggingface-cli download --repo-type dataset lavita/medical-qa-shared-task-v1-toy hf_transfer 下载依赖\n1 pip install -U hf-transfer 启用 hf_transfer\n1 export HF_HUB_ENABLE_HF_TRANSFER=1 配置镜像 https://hf-mirror.com/ 1 export HF_ENDPOINT=https://hf-mirror.com 设置以上，速度就可以飞起来了\n","date":"2025-02-16T16:25:55+08:00","permalink":"https://hublog.netlify.app/p/250216162555/","title":"大模型仓库huggingface下载指南"},{"content":"概述 Node Version Manager，NodeJS 版本管理工具\n地址：https://github.com/coreybutler/nvm-windows\n安装 下载程序即可\n下载地址：https://github.com/coreybutler/nvm-windows/releases/tag/1.1.11\n使用 查看帮助信息\n1 nvm --help 查看可下载的 Node 版本\n1 nvm list available 安装指定 Node 版本\n1 nvm install 20.18.0 查看已经安装的 Node 版本\n1 nvm list 使用指定的 Node 版本\n1 nvm use 20.18.0 ","date":"2025-02-15T17:51:05+08:00","permalink":"https://hublog.netlify.app/p/250215175105/","title":"nvm-windows，Windows下Node版本管理工具"},{"content":"简介 A CLI to manage virtual envs with pyenv-win\n一个命令行工具，用于使用 pyenv-win 管理虚拟环境。\n安装 1 2 Invoke-WebRequest -UseBasicParsing -Uri \u0026#34;https://raw.githubusercontent.com/pyenv-win/pyenv-win-venv/main/bin/install-pyenv-win-venv.ps1\u0026#34; -OutFile \u0026#34;$HOME\\install-pyenv-win-venv.ps1\u0026#34;; \u0026amp;\u0026#34;$HOME\\install-pyenv-win-venv.ps1\u0026#34; 卸载 1 2 Invoke-WebRequest -UseBasicParsing -Uri \u0026#34;https://raw.githubusercontent.com/pyenv-win/pyenv-win-venv/main/bin/install-pyenv-win-venv.ps1\u0026#34; -OutFile \u0026#34;$HOME\\install-pyenv-win-venv.ps1\u0026#34;; \u0026amp;\u0026#34;$HOME\\install-pyenv-win-venv.ps1\u0026#34; -Uninstall 使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026gt; pyenv-win-venv pyenv-win-venv v0.6 Copyright (c) Arbaaz Laskar \u0026lt;arzkar.dev@gmail.com\u0026gt; Usage: pyenv-win-venv \u0026lt;command\u0026gt; \u0026lt;args\u0026gt; A CLI to manage virtual envs with pyenv-win Commands: init search for .python-version file in the current directory and activate the env activate activate an env deactivate deactivate an env completion autocomplete script for powershell install install an env uninstall uninstall an env uninstall self uninstall the CLI and its envs list \u0026lt;command\u0026gt; list all installed envs/python versions local set the given env in .python-version file config show the app directory update self update the CLI to the latest version which \u0026lt;command\u0026gt; show the full path to an executable help \u0026lt;command\u0026gt; show the CLI/\u0026lt;command\u0026gt; menu Flags: debug To show debug log ","date":"2025-02-15T17:21:03+08:00","permalink":"https://hublog.netlify.app/p/250215172103/","title":"pyenv-win-venv，Windows下的pyenv-win插件"},{"content":"简介 官网：https://github.com/pyenv-win/pyenv-win\n安装 Powershell 1 Invoke-WebRequest -UseBasicParsing -Uri \u0026#34;https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1\u0026#34; -OutFile \u0026#34;./install-pyenv-win.ps1\u0026#34;; \u0026amp;\u0026#34;./install-pyenv-win.ps1\u0026#34; 这个安装会家目录添加 .pyenv 文件夹，会在当前用户添加如下环境变量\nPYENV PYENV_HOME PYENV_ROOT PATH下\nC:\\Users\\用户名\\.pyenv\\pyenv-win\\bin C:\\Users\\用户名\\.pyenv\\pyenv-win\\shims 重新打开终端运行 pyenv即可\n如果出现权限问题，使用管理员打开 powershell，运行下面的命令之后重新安装\n1 `Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine` 默认安装的位置\n1 %USERPROFILE%\\.pyenv 卸载 1 2 cd $HOME/.pyenv\\pyenv-win .\\install-pyenv-win.ps1 -Uninstall 配置 设置加速镜像源\n添加环境变量 PYTHON_BUILD_MIRROR_URL，值为：\n1 https://jedore.netlify.app/tools/python-mirrors/ 使用 查看可下载的版本\n1 pyenv install --list 安装指定的版本\n1 pyenv install 3.12 设置全局版本\n1 pyenv global 3.12 查看所有可用的python\n1 pyenv versions 查看当前的版本\n1 pyenv version 插件 pyenv-virtualenv pyenv-virtualenv is a pyenv plugin that provides features to manage virtualenvs and conda environments for Python on UNIX-like systems.\n","date":"2025-02-15T14:04:44+08:00","permalink":"https://hublog.netlify.app/p/250215140444/","title":"pyenv-win，Windows下的Python环境，项目管理工具"},{"content":"简介 ollama\n安装 Windows\nhttps://ollama.com/download/OllamaSetup.exe\nLinux\n1 curl -fsSL https://ollama.com/install.sh | sh MacOS\nhttps://ollama.com/download/Ollama-darwin.zip\n配置 修改监听地址，让其他设备可以访问\n将其从默认的 127.0.0.1（只允许本地访问）改为 0.0.0.0（允许所有网络接口访问）。\n运行模型 直接运行 示例\n1 ollama run modelscope.cn/unsloth/DeepSeek-R1-Distill-Qwen-14B-GGUF 1 ollama run hf.co/unsloth/DeepSeek-R1-Distill-Qwen-14B-GGUF:Q4_K_M 运行 ollama list 可以看到下载的模型\n不过这种方式有个小缺点，名字太长\n导入模型 新建单个文件夹，从网站下载模型\n新建 Modelfile文件\n填入类似内容 FROM ./DeepSeek-R1-Distill-Qwen-14B-Q4_K_M.gguf\n在文件夹打开终端\n运行如下命令，创建名为 deepseek-r1:14b的模型\n1 ollama create deepseek-r1:14b -f Modelfile 运行 ollama list 可以看到刚才的模型\n模型 模型库 如下模型库收集了超级多的模型，都可以直接下载\nmodelscope：https://modelscope.cn（国内）\nhuggingface：https://huggingface.co（国外）\n这些模型也提供了对应的下载工具\n1 2 # modelscope 提供 modelscope pip install modelscope 1 2 # huggingface 提供 huggingface-cli pip install -U huggingface_hub 使用方法\n简单示例\n1 2 # modelscope modelscope download --model=Qwen/Qwen2.5-Coder-3B-Instruct-GGUF qwen2.5-coder-3b-instruct-q5_k_m.gguf --local_dir . 1 2 # huggingface-cli huggingface-cli download Qwen/Qwen2.5-3B-Instruct-GGUF qwen2.5-3b-instruct-q5_k_m.gguf --local-dir . --local-dir-use-symlinks False Chat 1 ollama run deepseek-r1:1.5b Embedding 1 ollama pull bge-m3 实际案例 Qwen/Qwen2.5-Coder-3B-Instruct-GGUF 创建文件夹\n1 mkdir -p d:/llm/models/ 1 cd d:/llm/models 1 mkdir -p Qwen/Qwen2.5-Coder-3B-Instruct-GGUF 1 cd Qwen/Qwen2.5-Coder-3B-Instruct-GGUF 使用 modelscope 下载模型\n1 modelscope download --model=Qwen/Qwen2.5-Coder-3B-Instruct-GGUF qwen2.5-coder-3b-instruct-q5_k_m.gguf --local_dir . windows 下在 powershell 中可以这样打开文件管理器 ：explorer.exe .\n新建一个 Modelfile 文件，名字就叫 qwen2.5-coder-3b-instruct-q5_k_m.Modelfile\n打开填入以下内容\n1 FROM ./qwen2.5-coder-3b-instruct-q5_k_m.gguf 使用 ollama 加载模型\n1 ollama create qwen2.5-coder-3b-instruct:q5km -f ./qwen2.5-coder-3b-instruct-q5_k_m.Modelfile ollama 查看模型\n1 ollama list 结果如下\n1 2 3 PS D:\\llm\\models\\Qwen\\Qwen2.5-Coder-3B-Instruct-GGUF\u0026gt; ollama list NAME ID SIZE MODIFIED qwen2.5-coder-3b-instruct:q5km 3c865efbc32c 2.4 GB 16 seconds ago ","date":"2025-02-13T15:29:41+08:00","permalink":"https://hublog.netlify.app/p/250213152941/","title":"ollama本地部署大模型"},{"content":"chatanywhere models https://chatanywhere.apifox.cn/api-92222074\ncurl --location --request GET 'https://api.chatanywhere.tech/v1/models' \\ --header 'Authorization: Bearer sk-1f58Sv45ZeqmDtrQzqDdMtFYtCMucKGDkpSnxH9oszqBMUTy'\n原始模型 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 chatgpt-4o-latest chatgpt-4o-latest-ca claude-3-5-haiku-20241022 claude-3-5-sonnet-20240620 claude-3-5-sonnet-20241022 dall-e-2 dall-e-3 deepseek-reasoner gemini-1.5-flash-latest gemini-1.5-pro-latest gemini-2.0-flash gemini-2.0-flash-exp gemini-2.0-flash-thinking-exp gemini-2.0-pro-exp-02-05 gemini-exp-1206 gpt-3.5-turbo gpt-3.5-turbo-0125 gpt-3.5-turbo-1106 gpt-3.5-turbo-16k gpt-3.5-turbo-16k-0613 gpt-3.5-turbo-ca gpt-3.5-turbo-instruct gpt-3.5-turbo-instruct-0914 gpt-4 gpt-4-0125-preview gpt-4-0613 gpt-4-1106-preview gpt-4-1106-vision-preview gpt-4-ca gpt-4-turbo gpt-4-turbo-2024-04-09 gpt-4-turbo-ca gpt-4-turbo-preview gpt-4-turbo-preview-ca gpt-4-vision-preview gpt-4o gpt-4o-2024-05-13 gpt-4o-2024-08-06 gpt-4o-2024-11-20 gpt-4o-audio-preview gpt-4o-audio-preview-2024-10-01 gpt-4o-ca gpt-4o-mini gpt-4o-mini-2024-07-18 gpt-4o-mini-2024-07-18-ca gpt-4o-mini-ca o1 o1-2024-12-17 o1-mini o1-mini-2024-09-12 o1-mini-ca o1-preview o1-preview-2024-09-12 o1-preview-ca o3-mini o3-mini text-embedding-3-large text-embedding-3-small text-embedding-ada-002 tts-1 tts-1-1106 tts-1-hd tts-1-hd-1106 whisper-1 重定向模型 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 chatanywhere/chatgpt-4o-latest-ca chatanywhere/claude-3-5-haiku-20241022 chatanywhere/claude-3-5-sonnet-20240620 chatanywhere/claude-3-5-sonnet-20241022 chatanywhere/dall-e-2 chatanywhere/dall-e-3 chatanywhere/deepseek-reasoner chatanywhere/gemini-1.5-flash-latest chatanywhere/gemini-1.5-pro-latest chatanywhere/gemini-2.0-flash chatanywhere/gemini-2.0-flash-exp chatanywhere/gemini-2.0-flash-thinking-exp chatanywhere/gemini-2.0-pro-exp-02-05 chatanywhere/gemini-exp-1206 chatanywhere/gpt-3.5-turbo chatanywhere/gpt-3.5-turbo-0125 chatanywhere/gpt-3.5-turbo-1106 chatanywhere/gpt-3.5-turbo-16k chatanywhere/gpt-3.5-turbo-16k-0613 chatanywhere/gpt-3.5-turbo-ca chatanywhere/gpt-3.5-turbo-instruct chatanywhere/gpt-3.5-turbo-instruct-0914 chatanywhere/gpt-4 chatanywhere/gpt-4-0125-preview chatanywhere/gpt-4-0613 chatanywhere/gpt-4-1106-preview chatanywhere/gpt-4-1106-vision-preview chatanywhere/gpt-4-ca chatanywhere/gpt-4-turbo chatanywhere/gpt-4-turbo-2024-04-09 chatanywhere/gpt-4-turbo-ca chatanywhere/gpt-4-turbo-preview chatanywhere/gpt-4-turbo-preview-ca chatanywhere/gpt-4-vision-preview chatanywhere/gpt-4o chatanywhere/gpt-4o-2024-05-13 chatanywhere/gpt-4o-2024-08-06 chatanywhere/gpt-4o-2024-11-20 chatanywhere/gpt-4o-audio-preview chatanywhere/gpt-4o-audio-preview-2024-10-01 chatanywhere/gpt-4o-ca chatanywhere/gpt-4o-mini chatanywhere/gpt-4o-mini-2024-07-18 chatanywhere/gpt-4o-mini-2024-07-18-ca chatanywhere/gpt-4o-mini-ca chatanywhere/o1 chatanywhere/o1-2024-12-17 chatanywhere/o1-mini chatanywhere/o1-mini-2024-09-12 chatanywhere/o1-mini-ca chatanywhere/o1-preview chatanywhere/o1-preview-2024-09-12 chatanywhere/o1-preview-ca chatanywhere/o3-mini chatanywhere/text-embedding-3-large chatanywhere/text-embedding-3-small chatanywhere/text-embedding-ada-002 chatanywhere/tts-1 chatanywhere/tts-1-1106 chatanywhere/tts-1-hd chatanywhere/tts-1-hd-1106 chatanywhere/whisper-1 重定向 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 { \u0026#34;chatanywhere/chatgpt-4o-latest\u0026#34;: \u0026#34;chatgpt-4o-latest\u0026#34;, \u0026#34;chatanywhere/chatgpt-4o-latest-ca\u0026#34;: \u0026#34;chatgpt-4o-latest-ca\u0026#34;, \u0026#34;chatanywhere/claude-3-5-haiku-20241022\u0026#34;: \u0026#34;claude-3-5-haiku-20241022\u0026#34;, \u0026#34;chatanywhere/claude-3-5-sonnet-20240620\u0026#34;: \u0026#34;claude-3-5-sonnet-20240620\u0026#34;, \u0026#34;chatanywhere/claude-3-5-sonnet-20241022\u0026#34;: \u0026#34;claude-3-5-sonnet-20241022\u0026#34;, \u0026#34;chatanywhere/dall-e-2\u0026#34;: \u0026#34;dall-e-2\u0026#34;, \u0026#34;chatanywhere/dall-e-3\u0026#34;: \u0026#34;dall-e-3\u0026#34;, \u0026#34;chatanywhere/deepseek-reasoner\u0026#34;: \u0026#34;deepseek-reasoner\u0026#34;, \u0026#34;chatanywhere/gemini-1.5-flash-latest\u0026#34;: \u0026#34;gemini-1.5-flash-latest\u0026#34;, \u0026#34;chatanywhere/gemini-1.5-pro-latest\u0026#34;: \u0026#34;gemini-1.5-pro-latest\u0026#34;, \u0026#34;chatanywhere/gemini-2.0-flash\u0026#34;: \u0026#34;gemini-2.0-flash\u0026#34;, \u0026#34;chatanywhere/gemini-2.0-flash-exp\u0026#34;: \u0026#34;gemini-2.0-flash-exp\u0026#34;, \u0026#34;chatanywhere/gemini-2.0-flash-thinking-exp\u0026#34;: \u0026#34;gemini-2.0-flash-thinking-exp\u0026#34;, \u0026#34;chatanywhere/gemini-2.0-pro-exp-02-05\u0026#34;: \u0026#34;gemini-2.0-pro-exp-02-05\u0026#34;, \u0026#34;chatanywhere/gemini-exp-1206\u0026#34;: \u0026#34;gemini-exp-1206\u0026#34;, \u0026#34;chatanywhere/gpt-3.5-turbo\u0026#34;: \u0026#34;gpt-3.5-turbo\u0026#34;, \u0026#34;chatanywhere/gpt-3.5-turbo-0125\u0026#34;: \u0026#34;gpt-3.5-turbo-0125\u0026#34;, \u0026#34;chatanywhere/gpt-3.5-turbo-1106\u0026#34;: \u0026#34;gpt-3.5-turbo-1106\u0026#34;, \u0026#34;chatanywhere/gpt-3.5-turbo-16k\u0026#34;: \u0026#34;gpt-3.5-turbo-16k\u0026#34;, \u0026#34;chatanywhere/gpt-3.5-turbo-16k-0613\u0026#34;: \u0026#34;gpt-3.5-turbo-16k-0613\u0026#34;, \u0026#34;chatanywhere/gpt-3.5-turbo-ca\u0026#34;: \u0026#34;gpt-3.5-turbo-ca\u0026#34;, \u0026#34;chatanywhere/gpt-3.5-turbo-instruct\u0026#34;: \u0026#34;gpt-3.5-turbo-instruct\u0026#34;, \u0026#34;chatanywhere/gpt-3.5-turbo-instruct-0914\u0026#34;: \u0026#34;gpt-3.5-turbo-instruct-0914\u0026#34;, \u0026#34;chatanywhere/gpt-4\u0026#34;: \u0026#34;gpt-4\u0026#34;, \u0026#34;chatanywhere/gpt-4-0125-preview\u0026#34;: \u0026#34;gpt-4-0125-preview\u0026#34;, \u0026#34;chatanywhere/gpt-4-0613\u0026#34;: \u0026#34;gpt-4-0613\u0026#34;, \u0026#34;chatanywhere/gpt-4-1106-preview\u0026#34;: \u0026#34;gpt-4-1106-preview\u0026#34;, \u0026#34;chatanywhere/gpt-4-1106-vision-preview\u0026#34;: \u0026#34;gpt-4-1106-vision-preview\u0026#34;, \u0026#34;chatanywhere/gpt-4-ca\u0026#34;: \u0026#34;gpt-4-ca\u0026#34;, \u0026#34;chatanywhere/gpt-4-turbo\u0026#34;: \u0026#34;gpt-4-turbo\u0026#34;, \u0026#34;chatanywhere/gpt-4-turbo-2024-04-09\u0026#34;: \u0026#34;gpt-4-turbo-2024-04-09\u0026#34;, \u0026#34;chatanywhere/gpt-4-turbo-ca\u0026#34;: \u0026#34;gpt-4-turbo-ca\u0026#34;, \u0026#34;chatanywhere/gpt-4-turbo-preview\u0026#34;: \u0026#34;gpt-4-turbo-preview\u0026#34;, \u0026#34;chatanywhere/gpt-4-turbo-preview-ca\u0026#34;: \u0026#34;gpt-4-turbo-preview-ca\u0026#34;, \u0026#34;chatanywhere/gpt-4-vision-preview\u0026#34;: \u0026#34;gpt-4-vision-preview\u0026#34;, \u0026#34;chatanywhere/gpt-4o\u0026#34;: \u0026#34;gpt-4o\u0026#34;, \u0026#34;chatanywhere/gpt-4o-2024-05-13\u0026#34;: \u0026#34;gpt-4o-2024-05-13\u0026#34;, \u0026#34;chatanywhere/gpt-4o-2024-08-06\u0026#34;: \u0026#34;gpt-4o-2024-08-06\u0026#34;, \u0026#34;chatanywhere/gpt-4o-2024-11-20\u0026#34;: \u0026#34;gpt-4o-2024-11-20\u0026#34;, \u0026#34;chatanywhere/gpt-4o-audio-preview\u0026#34;: \u0026#34;gpt-4o-audio-preview\u0026#34;, \u0026#34;chatanywhere/gpt-4o-audio-preview-2024-10-01\u0026#34;: \u0026#34;gpt-4o-audio-preview-2024-10-01\u0026#34;, \u0026#34;chatanywhere/gpt-4o-ca\u0026#34;: \u0026#34;gpt-4o-ca\u0026#34;, \u0026#34;chatanywhere/gpt-4o-mini\u0026#34;: \u0026#34;gpt-4o-mini\u0026#34;, \u0026#34;chatanywhere/gpt-4o-mini-2024-07-18\u0026#34;: \u0026#34;gpt-4o-mini-2024-07-18\u0026#34;, \u0026#34;chatanywhere/gpt-4o-mini-2024-07-18-ca\u0026#34;: \u0026#34;gpt-4o-mini-2024-07-18-ca\u0026#34;, \u0026#34;chatanywhere/gpt-4o-mini-ca\u0026#34;: \u0026#34;gpt-4o-mini-ca\u0026#34;, \u0026#34;chatanywhere/o1\u0026#34;: \u0026#34;o1\u0026#34;, \u0026#34;chatanywhere/o1-2024-12-17\u0026#34;: \u0026#34;o1-2024-12-17\u0026#34;, \u0026#34;chatanywhere/o1-mini\u0026#34;: \u0026#34;o1-mini\u0026#34;, \u0026#34;chatanywhere/o1-mini-2024-09-12\u0026#34;: \u0026#34;o1-mini-2024-09-12\u0026#34;, \u0026#34;chatanywhere/o1-mini-ca\u0026#34;: \u0026#34;o1-mini-ca\u0026#34;, \u0026#34;chatanywhere/o1-preview\u0026#34;: \u0026#34;o1-preview\u0026#34;, \u0026#34;chatanywhere/o1-preview-2024-09-12\u0026#34;: \u0026#34;o1-preview-2024-09-12\u0026#34;, \u0026#34;chatanywhere/o1-preview-ca\u0026#34;: \u0026#34;o1-preview-ca\u0026#34;, \u0026#34;chatanywhere/o3-mini\u0026#34;: \u0026#34;o3-mini\u0026#34;, \u0026#34;chatanywhere/text-embedding-3-large\u0026#34;: \u0026#34;text-embedding-3-large\u0026#34;, \u0026#34;chatanywhere/text-embedding-3-small\u0026#34;: \u0026#34;text-embedding-3-small\u0026#34;, \u0026#34;chatanywhere/text-embedding-ada-002\u0026#34;: \u0026#34;text-embedding-ada-002\u0026#34;, \u0026#34;chatanywhere/tts-1\u0026#34;: \u0026#34;tts-1\u0026#34;, \u0026#34;chatanywhere/tts-1-1106\u0026#34;: \u0026#34;tts-1-1106\u0026#34;, \u0026#34;chatanywhere/tts-1-hd\u0026#34;: \u0026#34;tts-1-hd\u0026#34;, \u0026#34;chatanywhere/tts-1-hd-1106\u0026#34;: \u0026#34;tts-1-hd-1106\u0026#34;, \u0026#34;chatanywhere/whisper-1\u0026#34;: \u0026#34;whisper-1\u0026#34; } google models https://ai.google.dev/gemini-api/docs/models/gemini?hl=zh-cn https://ai.google.dev/gemini-api/docs/models/experimental-models?hl=zh-cn\ncurl https://generativelanguage.googleapis.com/v1beta/models?key=$GOOGLE_API_KEY\n原始模型 1 2 3 4 5 6 7 8 9 10 11 12 13 14 gemini-2.0-flash gemini-2.0-flash-lite-preview-02-05 gemini-1.5-flash gemini-1.5-flash-8b gemini-1.5-pro text-embedding-004 aqa gemini-2.0-pro-exp-02-05 gemini-2.0-flash-thinking-exp gemini-2.0-flash-thinking-exp-01-21 gemini-2.0-flash-exp gemini-exp-1206 learnlm-1.5-pro-experimental siliconflow 硅基流动 https://cloud.siliconflow.cn/models\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 免费 对话 deepseek-ai/DeepSeek-R1-Distill-Llama-8B deepseek-ai/DeepSeek-R1-Distill-Qwen-7B deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B Qwen/Qwen2.5-7B-Instruct Qwen/Qwen2.5-Coder-7B-Instruct internlm/internlm2_5-7b-chat meta-llama/Meta-Llama-3.1-8B-Instruct Qwen/Qwen2-7B-Instruct Qwen/Qwen2-1.5B-Instruct THUDM/glm-4-9b-chat THUDM/chatglm3-6b 01-ai/Yi-1.5-9B-Chat-16K 01-ai/Yi-1.5-6B-Chat google/gemma-2-9b-it AIDC-AI/Marco-o1 生图 black-forest-labs/FLUX.1-schnell stabilityai/stable-diffusion-3-5-large stabilityai/stable-diffusion-3-medium deepseek-ai/Janus-Pro-7B 图生图 stabilityai/stable-diffusion-xl-base-1.0 stabilityai/stable-diffusion-2-1 嵌入式 BAAI/bge-m3 netease-youdao/bce-embedding-base_v1 BAAI/bge-large-zh-v1.5 BAAI/bge-large-en-v1.5 重排序 netease-youdao/bce-reranker-base_v1 BAAI/bge-reranker-v2-m3 语音 FunAudioLLM/SenseVoiceSmall 付费 deepseek-ai/DeepSeek-V3 deepseek-ai/DeepSeek-R1 Qwen/Qwen2.5-Coder-32B-Instruct groq https://console.groq.com/docs/models\nhttps://api.groq.com/openai/v1/models\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 Preview Models qwen-2.5-32b deepseek-r1-distill-qwen-32b deepseek-r1-distill-llama-70b-specdec deepseek-r1-distill-llama-70b llama-3.3-70b-specdec llama-3.2-1b-preview llama-3.2-3b-preview llama-3.2-11b-vision-preview llama-3.2-90b-vision-preview Production Models distil-whisper-large-v3-en gemma2-9b-it llama-3.3-70b-versatile llama-3.1-8b-instant llama-guard-3-8b llama3-70b-8192 llama3-8b-8192 mixtral-8x7b-32768 whisper-large-v3 whisper-large-v3-turbo nvidia https://build.nvidia.com/models\n原始模型 1 2 3 4 5 6 7 meta/llama-3.3-70b-instruct deepseek-ai/deepseek-r1 qwen/qwen2.5-coder-32b-instruct nvidia/cosmos-nemotron-34b stabilityai/stable-diffusion-3-medium 重定向模型 1 2 deepseek-r1-nvidia qwen2.5-coder-32b-instruct-nvidia 重定向 1 2 3 4 { \u0026#34;deepseek-r1-nvidia\u0026#34;:\u0026#34;deepseek-ai/deepseek-r1\u0026#34;, \u0026#34;qwen2.5-coder-32b-instruct-nvidia\u0026#34;:\u0026#34;qwen/qwen2.5-coder-32b-instruct\u0026#34; } aliyun 阿里云百炼 https://bailian.console.aliyun.com/#/model-market\ntencent 腾讯云 https://cloud.tencent.com/document/product/1772/115969\n1 2 deepseek-v3 deepseek-r1 openrouter https://openrouter.ai/models\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 cognitivecomputations/dolphin3.0-r1-mistral-24b:free cognitivecomputations/dolphin3.0-mistral-24b:free google/gemini-2.0-flash-lite-preview-02-05:free google/gemini-2.0-pro-exp-02-05:free qwen/qwen-vl-plus:free qwen/qwen2.5-vl-72b-instruct:free mistralai/mistral-small-24b-instruct-2501:free deepseek/deepseek-r1-distill-llama-70b:free google/gemini-2.0-flash-thinking-exp:free deepseek/deepseek-r1:free sophosympatheia/rogue-rose-103b-v0.2:free deepseek/deepseek-chat:free google/gemini-2.0-flash-thinking-exp-1219:free google/gemini-2.0-flash-exp:free google/gemini-exp-1206:free meta-llama/llama-3.3-70b-instruct:free google/learnlm-1.5-pro-experimental:free nvidia/llama-3.1-nemotron-70b-instruct:free meta-llama/llama-3.2-11b-vision-instruct:free mistralai/mistral-nemo:free google/gemma-2-9b-it:free mistralai/mistral-7b-instruct:free microsoft/phi-3-mini-128k-instruct:free microsoft/phi-3-medium-128k-instruct:free meta-llama/llama-3-8b-instruct:free openchat/openchat-7b:free undi95/toppy-m-7b:free huggingfaceh4/zephyr-7b-beta:free gryphe/mythomax-l2-13b:free xunfei 讯飞星辰 https://training.xfyun.cn/modelSquare\n1 2 3 4 5 xdeepseekv3 xdeepseekr1 xunfei/deepseek-v3 xunfei/deepseek-r1 1 2 3 4 { \u0026#34;xunfei/deepseek-v3\u0026#34;:\u0026#34;xdeepseekv3\u0026#34;, \u0026#34;xunfei/deepseek-r1\u0026#34;:\u0026#34;xdeepseekr1\u0026#34; } mistral https://docs.mistral.ai/getting-started/models/models_overview/\nhttps://docs.mistral.ai/api/#tag/models/operation/list_models_v1_models_get\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 ministral-3b-2410 ministral-3b-latest ministral-8b-2410 ministral-8b-latest open-mistral-7b mistral-tiny mistral-tiny-2312 open-mistral-nemo open-mistral-nemo-2407 mistral-tiny-2407 mistral-tiny-latest open-mixtral-8x7b mistral-small mistral-small-2312 open-mixtral-8x22b open-mixtral-8x22b-2404 mistral-small-2402 mistral-small-2409 mistral-medium-2312 mistral-medium mistral-medium-latest mistral-large-2402 mistral-large-2407 mistral-large-2411 mistral-large-latest pixtral-large-2411 pixtral-large-latest mistral-large-2502-15-1-rc2 mistral-large-pixtral-2411 codestral-2405 codestral-2501 codestral-latest codestral-2412 codestral-2411-rc5 codestral-mamba-2407 open-codestral-mamba codestral-mamba-latest pixtral-12b-2409 pixtral-12b pixtral-12b-latest mistral-small-2501 mistral-small-latest mistral-embed mistral-moderation-2411 mistral-moderation-latest stability https://platform.stability.ai/docs/api-reference\nctyun 天翼云 原始模型 1 2 3 4 5 6 7 8 DeepSeek-R1-昇腾版 4bd107bff85941239e27b1509eccfe98 DeepSeek-R1-英伟达版 7ba7726dad4c4ea4ab7f39c7741aea68 DeepSeek-V3-昇腾版 9dc913a037774fc0b248376905c85da5 重定向模型 1 2 3 4 5 6 7 8 DeepSeek-R1-昇腾版 deepseek-r1-s-ctyun DeepSeek-R1-英伟达版 deepseek-r1-n-ctyun DeepSeek-V3-昇腾版 deepseek-v3-s-ctyun 重定向 1 2 3 4 5 { \u0026#34;deepseek-r1-s-ctyun\u0026#34;:\u0026#34;4bd107bff85941239e27b1509eccfe98\u0026#34;, \u0026#34;deepseek-r1-n-ctyun\u0026#34;:\u0026#34;7ba7726dad4c4ea4ab7f39c7741aea68\u0026#34;, \u0026#34;deepseek-v3-s-ctyun\u0026#34;:\u0026#34;9dc913a037774fc0b248376905c85da5\u0026#34;, } ","date":"2025-02-12T13:27:19+08:00","permalink":"https://hublog.netlify.app/p/250212132719/","title":"llm-models，语言大模型服务提供商支持的模型列表"},{"content":"安装 Install uv with our standalone installers:\n1 2 # On macOS and Linux. curl -LsSf https://astral.sh/uv/install.sh | sh 1 2 # On Windows. powershell -ExecutionPolicy ByPass -c \u0026#34;irm https://astral.sh/uv/install.ps1 | iex\u0026#34; Or, from PyPI:\n1 2 # With pip. pip install uv 1 2 # Or pipx. pipx install uv If installed via the standalone installer, uv can update itself to the latest version:\n1 uv self update 使用 创建虚拟环境\n1 uv venv 附录 中文文档：https://hellowac.github.io/uv-zh-cn/\n","date":"2025-02-11T10:35:09+08:00","permalink":"https://hublog.netlify.app/p/250211103509/","title":"uv，Rust编写的Python包、项目管理工具"},{"content":"前言 刮削 意为：为影视资源收集海报、简介信息，让第三方软件（Jellyfin、Emby、Infuse、Plex、VidHub、网易爆米花）识别生成资源库，拥有好看的海报，简介信息。\n一般刮削信息包含 .nfo , .jpg等格式文件用于第三方软件识别。\n影响刮削的关键部分：\n文件夹 名字 文件 名字 按照我的经验，对刮削软件细分又可分为两种：\n主要通过 文件夹名字 获取刮削的信息 Jellyfin Emby Infuse Plex 主要通过 文件名字 获取刮削的信息 VidHub 网易爆米花 下面分别选用两种作为介绍 Jellyfin、Vidhub\n刮削带播放 Vidhub VidHub 是一款 macOS/iOS/tvOS 全平台的影视资源管理和播放软件。支持本地文件，NAS，Samba/WebDav/AList，以及阿里云盘，百度网盘等各种网盘视频的整理和刮削，自动生成优雅的影视海报墙。同时支持 Emby/Plex/Jellyfin 服务器。所有的在线影视信息和图片均来自开源网站 TMDB。\nTMDB 是一个拥有海量影视海报，简介的网站。\n为了保证自动刮削搜索电影剧集的准确性，请按照下面的规则命名文件名。\n1 - 自动刮削搜索电影剧集时唯一关联的是文件名，和文件夹名字以及文件夹的结构无关。\n2 - 电影文件名以影片的完整名字开头 (中英文均可)，后面带上其他相关的文件信息如有同名电影，请务必在文件名中带上电影发行日期。\nThe.Irishman. 爱尔兰人.2019.1080p.x264.mp4\n3 - 电视剧分集文件名以剧名开头 (同一部剧所有分集文件开头的剧名保持一致，中英文均可)，后面必须跟上季和集的信息 (S01E01 / 第一季第一集)。\nShameless. 无耻之徒.S01E01.1080p.AMZN.WEB-DL.mkv\nShameless. 无耻之徒.S03E03.720p.AMZN.WEB-DL.mkv\n4 - 电视剧花絮、特别篇文件名以剧名开头，后面的季数信息必须设置为0，并指定集数 (S00E01)。\nShameless. 无耻之徒.S00E01.Sneak Peek.1080p.AMZN.mkv\n5 - 当自动匹配的电影和剧集错误时，你可以通过修改文件名 (macOS/iOS 端均支持在 App 内直接重命名单个文件 / 批量重命名文件)，或者直接在 App 内长按 / 鼠标右键错误的项目，选择手动编辑信息来修改为正确的影视信息。\n6 - tmdbid 相关支持情况\nvidhub 安卓 1.1.2 版本以上和苹果 1.7.15 版本以上支持 tmdbid 刮削识别，以下格式都支持：\n{tmdb-27205}\n{tmdbid-27205}\n{tmdb=27205}\n{tmdbid=27205}\n[tmdb-27205]\n[tmdbid-27205]\n[tmdb=27205]\n[tmdbid=27205]\n举例：[tmdbid=27205].mkv\n备注：刮削会优先识别 tmdbid。\nJellyfin https://jellyfin.org/\nJellyfin 是一套多媒体应用程序软件套装，旨在组织、管理和共享数字媒体文件。\nJellyfin 分为服务端和客户端应用程序，服务端应用程序安装在运行 Microsoft Windows、MacOS、Linux 等系统的服务器上或 Docker 上，客户端应用程序安装在智能手机、平板电脑、智能电视、网络机顶盒、电子游戏机或网页浏览器上[2]。支持 DLNA 以及插有 Chromecast 的设备也能接收 Jellyfin 服务端发来的文件[3]。\nJellyfin 是 Emby 的一个自由开源分叉。[4]\n以上内容来源于维基百科\n主要说说 Jellyfin 是如何识别文件信息的。\nJellyfin 媒体库常用主要分为电影和节目两个分类，这两个分类决定了文件的不同组织格式，其中\n电影：\n1 Movies/电影名/电影文件 电视剧：\n1 Tvplay/电视剧名/Season X/电视剧文件 Season X 一般表示第几季，例如 Season 1表示第 1 季、Season 2 表示第 2 季\n如果某个电视剧没有分季，也不知道是否有第二季，那也要单独建立一个 Season 1\n同一个电视剧不同的季集应该放在同一个电视剧名目录下的不同季下，比如\n1 2 3 4 5 6 Tvplay 爱情公寓 (2009) Season 1 爱情公寓第一季文件 Season 2 爱情公寓第二季文件 这里可以看出电视剧名后面加了一个年份，这是发行年份，这是为了分辨如果出现相同名字，以便区分，大多数情况下，也推荐这么做。\n额外的，年份和电视剧名中间有个空格，用的是英文下的括号。\n对于规则的详细命名，可查看官网介绍\nJellyfin 命名规则和 Emby、Infuse、Plex有些细微区别，但大差不差。\n说完这些自带播放的软件，下面介绍专门做刮削的软件\n专门刮削 专门刮削软件存在的目的是为了补足上面软件刮削效果不好的问题，先刮削之后，再使用上述软件生成海报墙，跳过刮削的步骤。\ntinymediamanager https://www.tinymediamanager.org/\n关于使用，网络上已经有很多资源\n使用的时候，修改一下文件夹名可以确保更好的自动识别\n","date":"2025-01-26T10:26:12+08:00","permalink":"https://hublog.netlify.app/p/250126102612/","title":"影视刮削指南"},{"content":"软件：linuxqq\n修改 hyprland 配置文件\n1 vim $HOME/.config/hypr/hyprland.conf 1 2 3 4 5 6 # 禁用XWayland的缩放 xwayland { force_zero_scaling = true } env = GDK_SCALE,2 如果输入法字体太小，修改 输入法字体大小\n","date":"2025-01-24T22:18:47+08:00","permalink":"https://hublog.netlify.app/p/250124221847/","title":"Hyprland下解决QQ高分辨率模糊的问题"},{"content":"简介 由于 使用 Hyprland 用到许多快捷键，最好使用终端上的软件，减少鼠标的操作，介绍介绍我使用 Huprland中用到的软件\nKitty 这是终端模拟器，最常打交道\n也是 Hyprland 默认使用的终端\n","date":"2025-01-17T16:09:36+08:00","permalink":"https://hublog.netlify.app/p/250117160936/","title":"ArchLinux使用Hyprland安装的软件"},{"content":"简介 安装 qBittorrent/qBittorrentEE qBittorrentEE 全称为 qBittorrent-Enhanced-Edition，是 qBittorrent 的增强版，自带防止迅雷吸血\n下载地址：\nqBittorrent：https://www.qbittorrent.org/download qBittorrentEE：https://github.com/c0re100/qBittorrent-Enhanced-Edition/releases 二选其一\n安装位置建议非 C 盘，非空目录\n配置 qBittorrent/qBittorrentEE tracker 服务器 设置 -\u0026gt; Bittorrent\n滑到最下面配置 tracker 服务器。\ntracker 服务器列表\n维护更新的网站：https://trackerslist.com/#/zh\n订阅链接：https://cf.trackerslist.com/all.txt\n直接使用：\n点击展开tracker列表http://1337.abcvg.info:80/announce http://207.241.226.111:6969/announce http://207.241.231.226:6969/announce http://[2a04:ac00:1:3dd8::1:2710]:2710/announce http://bittorrent-tracker.e-n-c-r-y-p-t.net:1337/announce http://bt.okmp3.ru:2710/announce http://ch3oh.ru:6969/announce http://ipv4.rer.lol:2710/announce http://ipv4announce.sktorrent.eu:6969/announce http://ipv6.rer.lol:6969/announce http://nyaa.tracker.wf:7777/announce http://open.tracker.cl:1337/announce http://open.tracker.ink:6969/announce http://p4p.arenabg.com:1337/announce http://public.tracker.vraphim.com:6969/announce http://retracker.hotplug.ru:2710/announce http://t.overflow.biz:6969/announce http://taciturn-shadow.spb.ru:6969/announce http://tk.greedland.net:80/announce http://torrentsmd.com:8080/announce http://tr.nyacat.pw:80/announce http://tr1.aag.moe:2095/announce http://tracker-zhuqiy.dgj055.icu:80/announce http://tracker.beeimg.com:6969/announce http://tracker.bt4g.com:2095/announce http://tracker.edkj.club:6969/announce http://tracker.mywaifu.best:6969/announce http://tracker.opentrackr.org:1337/announce http://tracker.qu.ax:6969/announce http://tracker.renfei.net:8080/announce http://tracker.srv00.com:6969/announce http://tracker.vraphim.com:6969/announce http://tracker.waaa.moe:6969/announce http://tracker2.itzmx.com:6961/announce http://tracker3.itzmx.com:6961/announce http://tracker4.itzmx.com:2710/announce http://wepzone.net:6969/announce http://www.all4nothin.net:80/announce.php http://www.wareztorrent.com:80/announce https://1337.abcvg.info:443/announce https://api.ipv4online.uk:443/announce https://retracker.x2k.ru:443/announce https://sparkle.ghostchu-services.top:443/announce https://t.213891.xyz:443/announce https://torrent.tracker.durukanbal.com:443/announce https://tr.burnabyhighstar.com:443/announce https://tr.nyacat.pw:443/announce https://tr.zukizuki.org:443/announce https://tr2.trkb.ru:443/announce https://tracker-zhuqiy.dgj055.icu:443/announce https://tracker.aburaya.live:443/announce https://tracker.bjut.jp:443/announce https://tracker.bt4g.com:443/announce https://tracker.cloudit.top:443/announce https://tracker.gcrenwp.top:443/announce https://tracker.itscraftsoftware.my.id:443/announce https://tracker.kuroy.me:443/announce https://tracker.leechshield.link:443/announce https://tracker.lilithraws.org:443/announce https://tracker.moeking.me:443/announce https://tracker.pmman.tech:443/announce https://tracker.yemekyedim.com:443/announce https://tracker1.520.jp:443/announce https://trackers.mlsub.net:443/announce udp://207.241.226.111:6969/announce udp://207.241.231.226:6969/announce udp://52.58.128.163:6969/announce udp://[2a03:7220:8083:cd00::1]:451/announce udp://[2a04:ac00:1:3dd8::1:2710]:2710/announce udp://[2a0f:e586:f:f::81]:6969/announce udp://bandito.byterunner.io:6969/announce udp://bittorrent-tracker.e-n-c-r-y-p-t.net:1337/announce udp://bt.ktrackers.com:6666/announce udp://bt.rer.lol:2710/announce udp://bt.rer.lol:6969/announce udp://concen.org:6969/announce udp://cq.kmzs123.cn:17272/announce udp://d40969.acod.regrucolo.ru:6969/announce udp://ec2-18-191-163-220.us-east-2.compute.amazonaws.com:6969/announce udp://evan.im:6969/announce udp://exodus.desync.com:6969/announce udp://ipv4.rer.lol:2710/announce udp://ipv4announce.sktorrent.eu:6969/announce udp://ismaarino.com:1234/announce udp://martin-gebhardt.eu:25/announce udp://mikrotik2.draatman.net:6969/announce udp://ns1.monolithindustries.com:6969/announce udp://odd-hd.fr:6969/announce udp://open.demonii.com:1337/announce udp://open.dstud.io:6969/announce udp://open.stealth.si:80/announce udp://open.tracker.cl:1337/announce udp://open.tracker.ink:6969/announce udp://opentor.org:2710/announce udp://opentracker.io:6969/announce udp://p2p.publictracker.xyz:6969/announce udp://p4p.arenabg.com:1337/announce udp://public.tracker.vraphim.com:6969/announce udp://r.l5.ca:6969/announce udp://retracker.hotplug.ru:2710/announce udp://retracker.lanta.me:2710/announce udp://seedpeer.net:6969/announce udp://serpb.vpsburti.com:6969/announce udp://t.overflow.biz:6969/announce udp://tr.movian.eu:6969/announce udp://tr3.ysagin.top:2715/announce udp://trackarr.org:6969/announce udp://tracker.0x7c0.com:6969/announce udp://tracker.birkenwald.de:6969/announce udp://tracker.breizh.pm:6969/announce udp://tracker.cyberia.is:6969/announce udp://tracker.darkness.services:6969/announce udp://tracker.deadorbit.nl:6969/announce udp://tracker.dler.com:6969/announce udp://tracker.dler.org:6969/announce udp://tracker.draatman.uk:6969/announce udp://tracker.edkj.club:6969/announce udp://tracker.filemail.com:6969/announce udp://tracker.fnix.net:6969/announce udp://tracker.gigantino.net:6969/announce udp://tracker.gmi.gd:6969/announce udp://tracker.kmzs123.tk:17272/announce udp://tracker.opentrackr.org:1337/announce udp://tracker.qu.ax:6969/announce udp://tracker.skynetcloud.site:6969/announce udp://tracker.skyts.net:6969/announce udp://tracker.srv00.com:6969/announce udp://tracker.tiny-vps.com:6969/announce udp://tracker.torrent.eu.org:451/announce udp://tracker.torrust-demo.com:6969/announce udp://tracker.tryhackx.org:6969/announce udp://tracker.yume-hatsuyuki.moe:6969/announce udp://tracker1.myporn.club:9337/announce udp://tracker2.dler.org:80/announce udp://tracker2.itzmx.com:6961/announce udp://tracker3.itzmx.com:6961/announce udp://tracker4.itzmx.com:2710/announce udp://ttk2.nbaonlineservice.com:6969/announce udp://u4.trakx.crim.ist:1337/announce udp://u6.trakx.crim.ist:1337/announce udp://udp.tracker.projectk.org:23333/announce udp://wepzone.net:6969/announce udp://www.torrent.eu.org:451/announce wss://tracker.openwebtorrent.com:443/announce WebUI 设置 -\u0026gt; Web UI\n开启Web用户界面，可以通过网页打开界面，可以远程使用，后续的 防止吸血也要用到。\n配置用户名和密码\n开启对本地主机客户端跳过身份验证\n安装 qBittorrent-ClientBlocker 为了防止被恶意 客户端/IP 吸血，封禁某些不友好的 IP/客户端，保护 BT 网络，保护宽带。\n下载地址：https://github.com/Simple-Tracker/qBittorrent-ClientBlocker/releases\n解压出来之后，修改 config.json\n配置 \u0026quot;clientURL\u0026quot;: \u0026quot;\u0026quot;,\n设置为 前面开启的 Web UI 地址和端口，比如\n1 \u0026#34;clientURL\u0026#34;: \u0026#34;http://localhost:8020\u0026#34;, 之后双击 qBittorrent-ClientBlocker.exe 即可运行。\n快捷方式启动 这两个每次都分开启动，有点繁琐，可以新建快捷方式启动，点击之后可以同时启动。\n桌面右键 -\u0026gt; 新建快捷方式，修改以下内容之后，再填入\n1 C:\\Windows\\System32\\cmd.exe /c \u0026#34;(tasklist | findstr qBittorrent-ClientBlocker || start D:\\download_tool\\qBittorrent-ClientBlocker-3.6-windows-amd64\\qBittorrent-ClientBlocker.exe --hidewindow) \u0026amp;\u0026amp; start D:\\download_tool\\qBittorrent-Enhanced-Edition\\qbittorrent.exe\u0026#34; 需要修改的地方：\nD:\\download_tool\\qBittorrent-ClientBlocker-3.6-windows-amd64\\qBittorrent-ClientBlocker.exe 修改为自己的路径\nD:\\download_tool\\qBittorrent-Enhanced-Edition\\qbittorrent.exe 修改为自己的路径\n点击 下一步，输入自己的快捷方式的名称，比如\n1 qBittorrent and qBittorrent-ClientBlocker 快捷方式 点击完成即可。\n如果不喜欢默认的图标，可以 鼠标移动到 快捷方式上，右键 -\u0026gt; 属性，找到 更改图标，设置 qBittorrent所在的图标，比如\n1 D:\\download_tool\\qBittorrent-Enhanced-Edition\\qbittorrent.exe ","date":"2025-01-09T18:50:27+08:00","permalink":"https://hublog.netlify.app/p/250109185027/","title":"Windows安装qBittorrent(EE)，qBittorrent-ClientBlocker"},{"content":"简介 FFmpeg 是一套能够处理音频、视频和其它多媒体文件及流的完整解决方案。由于其无与伦比的通用性和强大的功能，它被誉为数字媒体领域的“瑞士军刀”。\n官网：https://ffmpeg.org/\n核心组成 FFmpeg 项目不仅仅是一个单一的程序，它主要由以下几个部分构成：\nffmpeg：这是最核心的命令行工具。用户通过它来进行音视频的转码（格式转换）、剪辑、缩放、添加滤镜、合并文件等几乎所有操作。绝大多数人说“使用 FFmpeg”时，指的就是使用这个工具。\nffplay：一个基于 SDL 和 FFmpeg 库的简易媒体播放器。它功能简单，但非常适合用来快速预览和测试经过 ffmpeg 处理后的文件，或者直接播放各种奇特的媒体格式。\nffprobe：一个媒体信息分析工具。它可以从音视频文件中提取出详细的元数据（Metadata）和流信息，例如编码格式、分辨率、帧率、码率、时长、音轨、字幕等。这对于调试和自动化处理流程至关重要。\n一系列核心库 (Libraries)：这才是 FFmpeg 的真正动力源泉。许多著名的软件（如 VLC 播放器、Chrome 浏览器、YouTube、Blender 等）都在底层使用了 FFmpeg 的库来处理多媒体。主要包括：\nlibavcodec：包含了几乎所有主流的音视频编码器和解码器。 libavformat：用于处理各种多媒体容器格式（如 MP4, MKV, AVI）的封装和解封装。 libavfilter：提供了丰富的音视频滤镜，如裁剪、缩放、水印、调速等。 libavutil：包含了一些核心的工具函数。 libswscale：用于图像的缩放和色彩空间转换。 libswresample：用于音频的重采样。 主要功能 FFmpeg 的功能几乎涵盖了音视频处理的方方面面，以下是一些最常见的应用场景：\n格式转换 (Transcoding)：将视频从一种格式转换到另一种，例如 MKV 转 MP4，MOV 转 WebM。 编解码转换：改变视频的编码方式，例如将 H.264 编码的视频转换为更高效的 H.265 (HEVC)。 剪辑与合并：从一个长视频中截取一小段，或者将多个视频片段无缝拼接成一个文件。 调整参数：改变视频的分辨率、帧率、码率，以适应不同设备或网络环境。 音视频分离/合并：从视频中提取出音频轨道（例如 MP4 -\u0026gt; MP3），或为视频添加新的音轨。 添加滤镜和效果：给视频添加水印、文字、模糊效果，调整亮度/对比度，旋转视频等。 屏幕录制：可以直接录制桌面操作。 制作 GIF：将视频片段转换为高质量的 GIF 动图。 直播推流：将本地视频文件或摄像头/桌面捕获的画面推送到流媒体服务器（RTMP/HLS 协议）。 安装 下载地址：https://ffmpeg.org/download.html\n将解压后 bin 目录的路径添加到系统的 PATH 环境变量中。这样你就可以在任何路径下直接运行 ffmpeg 命令，而不需要每次都输入完整路径。\n语法 FFmpeg 是通过命令行操作的，语法通常是：\n1 usage: ffmpeg [options] [[infile options] -i infile]... {[outfile options] outfile}... [] (方括号): 表示可选参数或选项。 这意味着这部分内容可以存在，也可以不存在，ffmpeg 仍然可以正常运行。 {} (花括号): 表示必须参数或选项。 这意味着这部分内容是必需的，ffmpeg 才能正常运行。 选项：\n-vn：忽略输入文件中的视频流 -acodec：指定音频编码器 (Audio Codec)，可选的有： copy: 直接复制音频流，不进行重新编码。 这通常是最快的，并且不会降低音频质量（如果输入音频已经是你想要的格式）。 libmp3lame: 使用 LAME MP3 编码器。 这是创建 MP3 文件的常用选择。需要安装 LAME 库才能使用。 aac: 使用 AAC (Advanced Audio Coding) 编码器。 AAC 通常比 MP3 提供更好的音质。 libfdk_aac: 使用 Fraunhofer FDK AAC 编码器。 比 aac 性能更好，但可能需要单独编译支持。 libopus: 使用 Opus 编码器。 提供非常好的音质，尤其是在较低的比特率下。 pcm_s16le: 使用 PCM (Pulse Code Modulation) 编码器，将其保存为 16 位 Little Endian PCM，通常用于未经压缩的音频（例如 WAV 文件）。 flac: 使用 FLAC (Free Lossless Audio Codec) 编码器。 用于无损压缩音频。 使用 查看文件信息 这是处理任何文件的第一步。\n1 ffprobe video.mp4 或者\n1 ffmprg -i video.mp4 格式转换 (将 MP4 转换为 AVI) 1 ffmpeg -i input.mp4 output.avi FFmpeg 会自动根据输出文件的扩展名选择合适的编码器。\n改变视频分辨率 (缩放到 1280x720) 1 ffmpeg -i input.mp4 -vf scale=1280:720 output_720p.mp4 -vf 代表 \u0026ldquo;video filter\u0026rdquo;（视频滤镜）。scale 是其中一个滤镜。\n提取音频 (保存为 MP3) 1 ffmpeg -i input.mp4 -vn -acodec libmp3lame -q:a 2 output.mp3 -vn: 表示 \u0026ldquo;no video\u0026rdquo;（不包含视频）。 -acodec libmp3lame: 指定使用 LAME 库来编码 MP3。 提取音频（不转换） 1 ffmpeg -i [输入视频文件] -ss [开始时间] -to [结束时间] -vn -acodec copy [输出音频文件] 剪切视频 (从第 10 秒开始，持续 15 秒) 1 ffmpeg -i input.mp4 -ss 00:00:10 -t 00:00:15 -c copy output_cut.mp4 -ss: seek start (开始时间)。 -t: duration (持续时间)。 -c copy: 表示“直接复制流”，不对音视频进行重新编码。这样做速度极快，且无质量损失，是剪辑、合并时的首选。 ","date":"2025-01-09T16:47:32+08:00","permalink":"https://hublog.netlify.app/p/250109164732/","title":"ffmpeg，一套能够处理音频、视频和其它多媒体文件及流的完整解决方案"},{"content":"简介 封禁某些不友好的 IP/客户端，保护 BT 网络，保护宽带\n安装 下载地址：https://github.com/Simple-Tracker/qBittorrent-ClientBlocker/releases\narmv7：https://github.com/Simple-Tracker/qBittorrent-ClientBlocker/releases/download/3.6/qBittorrent-ClientBlocker-3.6-linux-armv7.tar.gz\n创建文件夹\n1 mkdir -p /opt/qBittorrent-ClientBlocker 解压文件\n1 tar -zxvf qBittorrent-ClientBlocker-3.6-linux-armv7.tar.gz -C /opt/qBittorrent-ClientBlocker 修改 config.json\n1 2 cd /opt/qBittorrent-ClientBlocker vim config.json 将 \u0026quot;clientURL\u0026quot;: \u0026quot;\u0026quot;, 修改为自己的 qbittorrent 所在 ip端口，比如\n1 \u0026#34;clientURL\u0026#34;: \u0026#34;http://localhost:8020\u0026#34;, 启动\n1 ./qBittorrent-ClientBlocker 系统服务 1 vim /etc/systemd/system/qbittorrent-clientblocker.service 填入以下内容\n1 2 3 4 5 6 7 8 9 10 11 12 [Unit] Description=qBittorrent-ClientBlocker service Wants=network-online.target After=qbittorrent-nox.service [Service] Type=simple Restart=always ExecStart=/bin/sh -c \u0026#34;cd /opt/qBittorrent-ClientBlocker \u0026amp;\u0026amp; /opt/qBittorrent-ClientBlocker/qBittorrent-ClientBlocker --nochdir\u0026#34; [Install] WantedBy=default.target 启动服务\n1 systemctl start qbittorrent-clientblocker.service 查看服务\n1 systemctl status qbittorrent-clientblocker.service 关闭服务\n1 systemctl stop qbittorrent-clientblocker.service 开机自启\n1 systemctl enable qbittorrent-clientblocker.service ","date":"2025-01-09T14:02:03+08:00","permalink":"https://hublog.netlify.app/p/250109140203/","title":"qBittorrent-ClientBlocker，某些不友好的IP和客户端，保护 BT 网络，保护宽带"},{"content":"简介 Aria2 是目前最强大的全能型下载工具，它支持 BT、磁力、HTTP、FTP 等下载协议，常用做离线下载的服务端。目前有非常多的 Aria2 Docker 方案，大多都整合了 We­bUI 和文件管理功能，看似很好很强大，实际上都只是做了简单的打包的工作，完全没有考虑到核心的下载体验和资源占用等问题。这也导致很多人在初次使用 Aria2 时会遇到 BT 下载无速度、文件残留占用空间、任务丢失等问题，所以会觉得 Aria2 并不好用，但事实并非如此。Aria2 完美配置是博主经过长时间使用和研究官方文档后总结出来的一套配置方案，其最初目的是为了解决这些问题，而且为 Aria2 添加了额外的一些功能，经过一年多时间的打磨已经积累了大量的使用者和良好的口碑，其中不乏一些知名开源项目开发者、影视字幕组、科技视频 UP 主。之前一直使用一键脚本作为部署方案，为了满足小伙伴们使用 Docker 部署的需求，博主特意制作了基于 Aria2 完美配置和特殊定制优化的 Aria2 Docker ，为了和一般的 Aria2 Docker 方案做区分所以将其取名为 Aria2 Pro。\n特点 下载性能优化\nBT 下载率高、速度快 单服务器线程数最大值无上限（已破解线程数限制） 防掉线程优化 内存消耗优化 读写性能优化 任务管理\n重启后不丢失任务进度、不重复下载 删除正在下载的任务自动删除未完成的文件 下载错误自动删除未完成的文件 下载完成自动删除控制文件（.aria2 后缀名文件） 下载完成自动删除种子文件（.torrent 后缀名文件） 下载完成自动删除空目录 BT 下载完成自动清除垃圾文件（文件类型过滤功能） BT 下载完成自动清除小文件（文件大小过滤功能） 防版权投诉与支持\n有一定的防版权投诉、防迅雷吸血效果 更好的 PT 下载支持 软件特性\n使用 Aria2 Pro Core 项目最新静态编译二进制文件 多平台支持：amd64, i386, arm64, armhf（VPS、群辉、树莓派等常见平台完美支持） 全功能：Async DNS, BitTorrent, Firefox3 Cookie, GZip, HTTPS, Message Digest, Metalink, XML-RPC, SFTP 最新依赖库，下载更安全、稳定、快速 持续更新最新版本 云存储支持\n支持与 RCLONE 联动 自动上传 OneDrive、Google Drive 等网盘 百度网盘转存到其它网盘 多网盘自由选择 网络协议支持\n支持新一代互联网协议 IPv6 文件管理\n下载完成自动移动文件到指定目录（文件自动归档/分类） 定时自动更新 BT tracker 列表（无感知、无重启），保持 BT 下载高速率 用户文件权限自动配置功能 配置文件持久化，支持使用 watchtower 更新容器 设计理念\n极简设计，专注下载，简单易用，少即是多 官方网址：https://p3terx.com/archives/docker-aria2-pro.html\n安装 docker\n1 2 3 4 5 6 7 8 9 10 11 12 13 docker run -d \\ --name aria2-pro \\ --restart unless-stopped \\ --log-opt max-size=1m \\ --network host \\ -e PUID=$UID \\ -e PGID=$GID \\ -e RPC_SECRET=\u0026lt;TOKEN\u0026gt; \\ -e RPC_PORT=6800 \\ -e LISTEN_PORT=6888 \\ -v $PWD/aria2-config:/config \\ -v $PWD/aria2-downloads:/downloads \\ p3terx/aria2-pro 替换\u0026lt;TOKEN\u0026gt;字段(RPC 密钥)即可启动。\ndocker-compose.yml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 version: \u0026#34;3.8\u0026#34; services: Aria2-Pro: container_name: aria2-pro image: p3terx/aria2-pro environment: - PUID=65534 - PGID=65534 - UMASK_SET=022 - RPC_SECRET=aria2 - RPC_PORT=6800 - LISTEN_PORT=6888 - DISK_CACHE=64M - IPV6_MODE=false - UPDATE_TRACKERS=true - CUSTOM_TRACKER_URL= - TZ=Asia/Shanghai volumes: - ${PWD}/aria2-config:/config - ${PWD}/aria2-downloads:/downloads # If you use host network mode, then no port mapping is required. # This is the easiest way to use IPv6 networks. network_mode: host # network_mode: bridge # ports: # - 6800:6800 # - 6888:6888 # - 6888:6888/udp restart: unless-stopped # Since Aria2 will continue to generate logs, limit the log size to 1M to prevent your hard disk from running out of space. logging: driver: json-file options: max-size: 1m # AriaNg is just a static web page, usually you only need to deploy on a single host. AriaNg: container_name: ariang image: p3terx/ariang command: --port 6880 --ipv6 network_mode: host # network_mode: bridge # ports: # - 6880:6880 restart: unless-stopped logging: driver: json-file options: max-size: 1m 替换\u0026lt;TOKEN\u0026gt;字段(RPC 密钥)即可启动。\n","date":"2025-01-08T22:37:00+08:00","permalink":"https://hublog.netlify.app/p/250108223700/","title":"aria2-pro，更好用的Aria2 Docker容器镜像"},{"content":"简介 qBittorrent 是一个免费开源的 BitTorrent 客户端，旨在替代 uTorrent。 它使用 C++ 编写，并基于 Qt 工具包构建，因此拥有跨平台支持，可以在 Linux、Windows、macOS、FreeBSD 和其他操作系统上运行。\n核心功能 易于使用： 提供用户友好的图形界面 (GUI)，即使是新手也能轻松上手。 开源免费： 完全免费使用，没有广告或恶意软件。 轻量级： 占用资源较少，即使在老旧的计算机上也能运行良好。 支持多种 BitTorrent 协议： 支持 DHT, Peer Exchange, Full encryption, Magnet links 等标准协议。 内置搜索引擎： 可以直接在 qBittorrent 界面中搜索种子，无需依赖外部网站。 高级下载控制： 按种子/Tracker/类别进行下载优先级设置 可以选择下载文件内容 支持顺序下载 可以限制全局和单个种子的上传/下载速度 远程控制： 可以通过 Web 界面进行远程管理，方便从其他设备控制下载。 IP 过滤： 可以导入和更新 IP 过滤列表，阻止恶意或受监控的 IP 地址。 Unicode 支持： 支持各种语言和字符集。 UPnP / NAT-PMP 端口转发： 自动配置路由器，简化端口转发设置。 IPv6 支持: 充分支持 IPv6 网络。 Tracker 编辑器： 可以手动添加、编辑或删除 Tracker 地址。 RSS 源支持: 可以订阅 RSS 源，自动下载最新的种子。 计划器： 可以设置下载计划，在特定时间段启动或停止下载。 HTTP Tracker 支持: 支持使用 HTTP Tracker。 与其他 BitTorrent 客户端相比的优势:\n无广告： 相比 uTorrent 等客户端，qBittorrent 没有广告，用户体验更好。 更强大的功能： 提供了更多高级功能，如内置搜索引擎、高级下载控制等。 更好的隐私保护： 开源特性意味着代码可以被审查，更容易发现和修复安全漏洞，从而更好地保护用户隐私。 跨平台支持： 可以在多种操作系统上运行。 安装 Linux 无图形化界面安装 家用小型 linux 服务器没有图形化界面，且是 armv7 结构，安装 qBittorrent\n安装\n1 apt update 1 apt install qbittorrent-nox 启动\n1 qbittorrent-nox 默认端口： 8080 默认用户：admin 默认密码：adminadmin 配置文件夹所在位置\n1 ~/.config/qBittorrent 修改端口\n1 qbittorrent-nox --webui-port=XXXX 创建系统服务\n1 vim /etc/systemd/system/qbittorrent-nox.service 填入以下内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 [Unit] Description=qBittorrent-nox service Documentation=man:qbittorrent-nox(1) Wants=network-online.target After=local-fs.target network-online.target nss-lookup.target [Service] Type=simple PrivateTmp=false User=root ExecStart=/usr/bin/qbittorrent-nox -config /root/.config/qBittorrent/qBittorrent.conf TimeoutStopSec=1800 [Install] WantedBy=multi-user.target 启动服务\n1 systemctl start qbittorrent-nox.service 查看服务\n1 systemctl status qbittorrent-nox.service 关闭服务\n1 systemctl stop qbittorrent-nox.service 开机自启\n1 systemctl enable qbittorrent-nox.service Docker 使用 docker 可以方便的安装 qBittorrent\nlinuxserver/qbittorrent：下载量大，只支持 amd64 和 arm64 gists/qbittorrent：支持多种架构，GitHub crazymax/qbittorrent：支持多种架构，GitHub 这些镜像对应的目录都不一样，按照先后使用顺序添加\ndocker-compose\nlinuxserver/qbittorrent\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 services: qbittorrent: image: linuxserver/qbittorrent:arm32v7-4.5.3 container_name: qbittorrent user: root environment: # - PUID=1000 # - PGID=1000 - TZ=Asia/Shanghai - WEBUI_PORT=8080 - TORRENTING_PORT=6881 volumes: - ./qbittorrent_data:/config # - ./downloads:/downloads #optional - /mnt/p1:/root ports: - 8020:8080 - 6881:6881 - 6881:6881/udp restart: unless-stopped gists/qbittorrent\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 services: qbittorrent: image: gists/qbittorrent ports: - \u0026#34;8081:8080\u0026#34; - \u0026#34;6881:6881\u0026#34; - \u0026#34;6881:6881/udp\u0026#34; volumes: - ./qbittorrent_data:/data environment: - TZ=Asia/Shanghai - PUID=0 - PGID=0 - WEBUI_PORT=8080 restart: unless-stopped logging: driver: json-file options: max-size: \u0026#34;10m\u0026#34; max-file: \u0026#34;3\u0026#34; crazymax/qbittorrent\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 services: qbittorrent: image: crazymax/qbittorrent ports: - \u0026#34;8081:8080\u0026#34; - \u0026#34;6881:6881\u0026#34; - \u0026#34;6881:6881/udp\u0026#34; volumes: - ./qbittorrent_data:/data environment: - TZ=Asia/Shanghai - PUID=0 - PGID=0 - WEBUI_PORT=8080 restart: unless-stopped logging: driver: json-file options: max-size: \u0026#34;10m\u0026#34; max-file: \u0026#34;3\u0026#34; docker-cli\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 docker run -d \\ --name=qbittorrent \\ -e PUID=1000 \\ -e PGID=1000 \\ -e TZ=Etc/UTC \\ -e WEBUI_PORT=8080 \\ -e TORRENTING_PORT=6881 \\ -p 8080:8080 \\ -p 6881:6881 \\ -p 6881:6881/udp \\ -v /path/to/qbittorrent/appdata:/config \\ -v /path/to/downloads:/downloads `#optional` \\ --restart unless-stopped \\ lscr.io/linuxserver/qbittorrent:latest 支持的变量\nParameter Function -p 8080:8080 WebUI -p 6881:6881 tcp connection port -p 6881:6881/udp udp connection port -e PUID=1000 for UserID - see below for explanation -e PGID=1000 for GroupID - see below for explanation -e TZ=Etc/UTC specify a timezone to use, see this list⁠ -e WEBUI_PORT=8080 for changing the port of the web UI, see below for explanation -e TORRENTING_PORT=6881 for changing the port of tcp/udp connection, see below for explanation -v /config Contains all relevant configuration files. -v /downloads Location of downloads on disk. --read-only=true Run container with a read-only filesystem. Please read the docs⁠ --user=1000:1000 Run container with a non-root user. Please read the docs⁠ 配置 如果是局域网远程设备，首次打开显示 Unauthorized，\n新增配置\n1 2 3 4 WebUI\\AuthSubnetWhitelist=192.168.68.0/24 WebUI\\AuthSubnetWhitelistEnabled=true WebUI\\HostHeaderValidation=false WebUI\\CSRFProtection=false AuthSubnetWhitelist：白名单 备份恢复 找到 qbittorrent 程序目录，复制 BT_backup 文件夹，里面包含了种子文件与状态信息，重新安装后覆盖还原即可。\n1、以群晖为例，打开 winscp 连接上群晖，找到 qbittorrent 安装目录，\n2、复制 BT_backup 文件夹到本地电脑上，\n3 、重新安装 qbittorrent 后，使用 winscp 上传覆盖 BT_backup 文件夹，重启 qbittorrent，查看时候恢复之前的状态。\n","date":"2025-01-08T20:31:10+08:00","permalink":"https://hublog.netlify.app/p/250108203110/","title":"qBittorrent，一个免费开源的 BitTorrent 客户端"},{"content":"简介 官网：https://github.com/pyenv/pyenv\n安装 Linux/Unix 1 curl https://pyenv.run | bash 添加环境变量\n1 vim ~/.bashrc 1 2 3 export PYENV_ROOT=\u0026#34;$HOME/.pyenv\u0026#34; [[ -d $PYENV_ROOT/bin ]] \u0026amp;\u0026amp; export PATH=\u0026#34;$PYENV_ROOT/bin:$PATH\u0026#34; eval \u0026#34;$(pyenv init -)\u0026#34; Windows 使用另一个工具 pyenv-win\n使用 查看可下载的版本\n1 pyenv install --list 安装指定的版本\n1 pyenv install 3.12.0 设置全局的版本\n1 pyenv global 3.12.0 查看所有存在的版本\n1 pyenv versions 查看当前的版本\n1 pyenv version 插件 pyenv-virtualenv pyenv-virtualenv is a pyenv plugin that provides features to manage virtualenvs and conda environments for Python on UNIX-like systems.\n虚拟环境 在使用 pyenv virtualenv 创建虚拟环境时，虚拟环境的目录通常不会自动出现在当前目录中。相反，pyenv 会将虚拟环境存储在其管理的全局目录中。要在当前目录中使用虚拟环境，你需要手动设置。\n以下是确保在当前目录中使用 .venv 的步骤：\n创建虚拟环境： 你可以创建虚拟环境并指定名称（如 .venv）：\n1 pyenv virtualenv 3.11.0 .venv 激活虚拟环境： 在当前目录激活虚拟环境：\n1 pyenv local .venv 检查虚拟环境： 现在你可以在当前目录中使用虚拟环境，验证是否激活：\n1 python --version 额外说明\n虚拟环境的实际文件夹通常位于 ~/.pyenv/versions/ 下。你可以通过 pyenv versions 查看所有的虚拟环境。 使用 pyenv local 命令会在当前目录创建一个 .python-version 文件，其中包含了当前使用的虚拟环境名称。 如果你希望在当前目录中看到 .venv 文件夹，你可以手动创建一个虚拟环境并将其移到当前目录，或使用其他工具如 venv 或 virtualenv。\n","date":"2024-12-30T14:32:36+08:00","permalink":"https://hublog.netlify.app/p/241230143236/","title":"pyenv，Python版本，项目管理工具"},{"content":"简介 官网：https://www.rust-lang.org/zh-CN/\n安装 Windows 使用 Rustup（官方推荐）\n1 https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe 跟着操作进行即可，会安装 Visual Studio Installer，空间会占用几个G。\n接着安装 Rust，直接默认即可。\n使用 WSL\n1 curl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh 编辑器 VSCode 插件推荐\nrust-analyzer 语法分析 Error Lens 错误提示 Even Better TOML 美化 toml 文件 Cargo 创建一个新项目\n1 cargo new project 运行项目\n1 cargo run ","date":"2024-12-28T14:01:34+08:00","permalink":"https://hublog.netlify.app/p/241228140134/","title":"Rust安装"},{"content":"众所周知，Windows 的更新很频繁，有时候会在重要的时候更新导致系统卡顿，甚至打断当前的动作，很多介绍的关闭更新教程会导致 Windows 的 store 商店无法使用，并且我也不建议安装其他第三方软件对系统更改（你甚至不知道它会干什么）。\n本次介绍的的方式为”曲线救国“，因为 Windows 本身支持延长时间，但是只能延长 5 周，我们需要做的就是增加延长更新的时间，让它一直无法更新，通过设置后，你可以延长 1 个月，1 年，10 年，甚至 100 年，这样就达到了“关闭更新”的作用。比如：\n本次使用的是修改注册表的方式，操作的时候请仔细小心！以免删除了系统某些注册表，导致系统出现问题\nWin+R 打开注册表 ，输入： 1 regedit 注册表编辑器地址栏输入： 1 计算机\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WindowsUpdate\\UX\\Settings 在其空白处，右键，选择 新建(N) - DWORD(32位)值(D)，命名为： 1 FlightSettingsMaxPauseDays 双击新建的项，基数改为 十进制，数值数据表示天数，比如填入：\n1 36500 表示支持最大延长 100 年\n保存退出\n打开 Windows 更新设置（Win+i，更新和安全）， 高级选项（Windows 10），下滑找到“暂停更新”，选择暂停更新的日子 如果设置了最大 100 年，现在就可以选择 100 年之后。\n如果你想重新开启系统更新，只需要点击继续更新即可。想要再次暂停，只需要设置暂停更新的日志，就是这么简单，就是这么方便。\n","date":"2024-12-23T16:27:47+08:00","permalink":"https://hublog.netlify.app/p/241223162747/","title":"Windows延长更新时间，关闭更新"},{"content":"简介 Windwos 下安装 aria2\n安装 aria2 下载地址：https://github.com/aria2/aria2/releases/\n快速下载：点击我下载aria2-1.37.0-win-64bit-build1.zip\n在 D 盘新建目录 D:\\download_tool\\aria2\n配置文件 使用 配置好的仓库 muyiacc/aria2\n下载解压到 D:\\download_tool\\aria2 同一目录\n配置详情，查看 仓库介绍 即可。\n特别提醒，默认 rpc 密钥为 aria2，也可以修改 aria2.conf 中的 rpc-secret=aria2，也可以注释关闭。\n启动 1 D:/download_tool/aria2/aria2c --conf-path=D:/download_tool/aria2/aria2.conf 系统服务 为了开机自动起，设置系统服务。\n须先安装 nssm , 管理员运行\n1 nssm install aria2 D:/download_tool/aria2/aria2c --conf-path=D:/download_tool/aria2/aria2.conf WebUI - AriaNg 为了方便使用，使用 WebUI。\nAriaNg下载地址：https://github.com/mayswind/AriaNg/releases/download/1.3.8/AriaNg-1.3.8-AllInOne.zip\n下载后，点击 index.html 即可使用浏览器打开。\n把打开的地址收藏书签，即可快速使用。\n如果无法连接，需要检查\naria2 是否启动 AriaNg 是否设置了密钥 设置密钥：AriaNg 设置 -\u0026gt; RPC(localhost:6800) -\u0026gt; Aria2 RPC 密钥\n","date":"2024-12-23T13:32:31+08:00","permalink":"https://hublog.netlify.app/p/241223133231/","title":"Windows安装aria2"},{"content":"官方网站 Workers：https://developers.cloudflare.com/workers/\nD1：https://developers.cloudflare.com/d1/\nKV：https://developers.cloudflare.com/kv/\nPages：https://developers.cloudflare.com/pages/\n机场三字码：https://www.cloudflarestatus.com/\n三字码 日本 1 FUK,OKA,KIX,NRT ","date":"2024-12-19T11:07:49+08:00","permalink":"https://hublog.netlify.app/p/241219110749/","title":"Cloudflare官方网站"},{"content":"众所周知，Z-library 由于性质的原因，访问地址经常失效，有什么好办法可以获取访问地址呢，根据我的经验，有两种比较好的方式。\n客户端 浏览器插件 浏览器插件 浏览器插件可以探测可用网址，且方便浏览器访问。浏览器插件暂时只支持 Firefox ，通过 Firefox 官方插件仓库是搜索不到的，需要通过已访问网址安装。\n这里给出可用的网址在线安装，由于网址会失效，所以有时效性。\n1 https://1lib.sk/soft/mozilla-addon-latest.xpi?1 通过 Firefox 浏览器访问即可自动安装，安装后点击图标可以访问。\n客户端 客户端会自动探测可用网址，这样就避免了收藏的单一网址失效。\n这里分享客户端安装程序\nWindows: Linux: MacOS(Big Sur (11.0) or later): MacOS(Intel): Android: 链接: https://pan.baidu.com/s/1S9Rzv9yX5homxaXkgprJJA?pwd=bdsa 提取码: bdsa 复制这段内容后打开百度网盘手机App，操作更方便哦\n可用网址 Web\nhttps://z-library.sk\nTOR:\nhttp://bookszlibb74ugqojhzhg2a63w5i2atv5bqarulgczawnbmsb6s6qead.onion\n","date":"2024-11-17T15:15:16+08:00","permalink":"https://hublog.netlify.app/p/241117151516/","title":"Z-library访问方法总结"},{"content":"在使用 vscode debug 启动模拟器的时候，debug console 隔 1 秒就会输出大量的模拟器日志信息，多数都是像下面的内容，键入内容则会生成其他的。\n1 2 3 4 D/EGL_emulation(10388): app_time_stats: avg=502.14ms min=498.97ms max=508.27ms count=3 D/EGL_emulation(10388): app_time_stats: avg=496.50ms min=492.09ms max=500.81ms count=3 D/EGL_emulation(10388): app_time_stats: avg=502.75ms min=501.56ms max=503.94ms count=2 D/EGL_emulation(10388): app_time_stats: avg=500.09ms min=489.25ms max=508.54ms count=3 这个产生的速度之快，连日志打印信息都难以捕捉，网上找了好久都找不到解决办法，\n根据 vscode 自带的日志过滤框使用正则 匹配，比如^.*app_time_stats.*$ 连正常的日志都会被过滤，真是煞费精力。\n最后不写正则了，看到过滤框自带的提示信息，一番摸索，终于解决了。\n这是其解决办法\n1 !app_time_stat,!I/ImeTracker,!D,!W 如果你自己有额外的需要过滤信息，可以仿照上面的写法\n, 表示多个多个规则。\n","date":"2024-11-05T12:02:22+08:00","permalink":"https://hublog.netlify.app/p/241105120222/","title":"VSCode调试控制台隐藏Flutter使用模拟器输出的大量日志"},{"content":"猫抓\n浏览器插件，可嗅探网页上的视频资源，提供下载\n","date":"2024-11-03T23:32:25+08:00","permalink":"https://hublog.netlify.app/p/241103233225/","title":"猫抓，嗅探工具，浏览器插件"},{"content":"下一步下一步\u0026hellip;\n连接网络这里，跳过设置网络\nShift + F10 打开命令行\n1 oobe\\byPassNRO.cmd 注意是大写的英文字母 O，而不是数字 0\n执行后会重启\n进行到 网络连接之后，就会出现 我没有Inter网络连接，选择即可跳过\n","date":"2024-11-03T19:24:25+08:00","permalink":"https://hublog.netlify.app/p/241103192425/","title":"Window11安装，跳过网络连接"},{"content":"前言 lx-music，也就是落雪音乐\n之前多平台使用的时候，比如换设备，卸载后重装，数据都会丢失。\n如果需要备份数据需要手动导出。在跨设备操作同步，感觉比较麻烦。\n有没有一个像 网易云音乐，qq 音乐那种账号机制，自动同步歌单，收藏列表呢。跨设备也能自动执行。\n其实落雪音乐是拥有一个同步服务的，早期的时候部署方式不方便，自己尝试部署，最终还是没有解决问题，所以没有安装成功。\n今天突然想起来，然后再次尝试部署，成功了\n本文就带你来如何部署落雪音乐同步服务 lx-music-sync-server。\n安装 docker-compose 使用之前需要进行一些准备操作\n创建文件夹\n1 2 sudo mkdir -p /opt/container/lx-music-sync-server cd /opt/container/lx-music-sync-server-server 新建 config.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 module.exports = { serverName: \u0026#39;My Sync Server\u0026#39;, // 同步服务名称 \u0026#39;proxy.enabled\u0026#39;: false, // 是否使用代理转发请求到本服务器 \u0026#39;proxy.header\u0026#39;: \u0026#39;x-real-ip\u0026#39;, // 代理转发的请求头 原始IP maxSnapshotNum: 10, // 公共最大备份快照数 \u0026#39;list.addMusicLocationType\u0026#39;: \u0026#39;top\u0026#39;, // 公共添加歌曲到我的列表时的方式 top | bottom，参考客户端的设置-列表设置-添加歌曲到我的列表时的方式 users: [ // 用户配置例子，有两种配置格式 // { // name: \u0026#39;user1\u0026#39;, // 用户名，必须，不能与其他用户名重复 // password: \u0026#39;123.def\u0026#39;, // 连接密码，必须，不能与其他用户密码重复，若在外网，务必增加密码复杂度 // maxSnapshotNum: 10, // 可选，最大备份快照数 // \u0026#39;list.addMusicLocationType\u0026#39;: \u0026#39;top\u0026#39;, // 可选，添加歌曲到我的列表时的方式 top | bottom，参考客户端的设置-列表设置-添加歌曲到我的列表时的方式 // }, ], // 所有名称以 env. 开头的配置将解析成环境变量 // \u0026#39;env.PORT\u0026#39;: \u0026#39;9527\u0026#39;, // \u0026#39;env.BIND_IP\u0026#39;: \u0026#39;0.0.0.0\u0026#39;, // ...其他环境变量看Readme.md可用环境变量附录 } 上面的文件是容器内部使用配置文件，自己先创建好，设置用户名和密码，在进行后面的操作之前，请先修改好。\n新建 docker-compose.yml\n1 2 3 4 5 6 7 8 9 10 services: lx-sync: image: lyswhut/lx-music-sync-server container_name: lx-sync restart: unless-stopped ports: - 9527:9527 volumes: - ./lx_sync_data:/server/data - ./config.js:/server/config.js 先启动查看是否有错误\n1 sudo docker compose up 如果没有错误\n1 sudo docker compose up -d 反向代理 Nginx 这里只列举 核心部分\n1 2 3 4 5 6 7 8 9 10 11 12 13 server { # ... location / { proxy_set_header X-Real-IP $remote_addr; # 该头部与config.js文件的 proxy.header 对应 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_pass http://127.0.0.1:9527; proxy_http_version 1.1; # websocket 必须要配置 proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; } } 使用 Windows 具体的设置路径：设置 - 数据同步 - 客户端模式\n设置 服务地址后，启动同步功能即可\n就会在后面默默发光发热了\nAndroid 同 Windows 一样\nLinux ","date":"2024-11-03T16:10:54+08:00","permalink":"https://hublog.netlify.app/p/241103161054/","title":"lx-music落雪音乐同步服务部署"},{"content":"待续\n","date":"2024-11-03T08:35:19+08:00","permalink":"https://hublog.netlify.app/p/241103083519/","title":"API收集"},{"content":"pnpm i 运行时，出现类似如下的操作，\n1 2 3 4 5 6 pnpm : File D:\\develop\\nodejs\\pnpm.ps1 cannot be loaded because running scripts is disabled on this system. For more inform At line:1 char:1 + pnpm i + ~~~~ + CategoryInfo : SecurityError: (:) [], PSSecurityException + FullyQualifiedErrorId : UnauthorizedAccess 这表示脚本运行被禁止了，使用 powershell 查看\n1 Get-ExecutionPolicy 修改为 Get-ExecutionPolicy 可以解决\n1 set-ExecutionPolicy RemoteSigned ","date":"2024-11-02T16:53:07+08:00","permalink":"https://hublog.netlify.app/p/241102165307/","title":"解决pnpm运行时出现错误"},{"content":"方法\n跳转到方法定义：f12 查看方法定义：alt+f12 跳转到下一个方法：`` 行操作\n向下复制一行：ctrl+c ctrl+v 向上移动一行：alt+up 向下移动一行：alt+down 折叠展开\n折叠当前区域：ctrl+shift+[ 展开当前区域：ctrl+shift+] 折叠所有区域：ctrl+k ctrl+0 展开所有区域：ctrl+k ctrl+j ","date":"2024-10-30T09:58:09+08:00","permalink":"https://hublog.netlify.app/p/241030095809/","title":"VSCode快捷键"},{"content":"注册入口：https://www.aliyunbaike.com/go/freemail\n阿里邮箱介绍\n阿里云（万网）域名使用阿里邮箱如何设置解析?\n非阿里云（万网）域名使用阿里邮箱如何设置解析\n","date":"2024-10-27T21:54:01+08:00","permalink":"https://hublog.netlify.app/p/241027215401/","title":"免费阿里企业邮箱"},{"content":"原因 在 OpenSSH 的 sshd 服务配置中，UseDNS 参数用于指定是否在用户登录时进行反向 DNS 查找。具体而言，当 UseDNS 设置为 no 时，sshd 服务在用户登录时不会进行反向 DNS 查找，而设置为 yes 时，sshd 服务会尝试进行反向 DNS 查找。\n反向 DNS 查找是通过 IP 地址查找对应的域名的过程。在某些情况下，启用反向 DNS 查找可能会导致登录延迟，特别是当 DNS 服务器响应较慢或不可用时。因此，将 UseDNS 设置为 no 可以在一定程度上提高 SSH 登录的速度，尤其是在网络环境不稳定或 DNS 配置不正确的情况下。\n在一些安全意识较高的环境中，管理员可能会选择禁用反向 DNS 查找，以减少潜在的登录延迟，并确保登录过程更加可控。\nGSSAPIAuthentication 是 SSH 服务器配置中的一个参数，用于控制是否启用 GSSAPI（Generic Security Services Application Program Interface）身份验证。GSSAPI 是一种用于网络身份验证的标准接口，通常与 Kerberos 结合使用。\n实战 修改 /etc/ssh/sshd_config\n1 2 3 4 #UseDNS yes 这里把注释打开，并设置值为no UseDNS no #另外需要把GSSAPIAuthentication参数设置为no GSSAPIAuthentication no 如果你的长这样\n1 2 #UseDNS yes GSSAPIAuthentication yes 可以用下面的语句直接替换\n1 2 sudo sed -i \u0026#39;s/#UseDNS yes/UseDNS no/\u0026#39; /etc/ssh/sshd_config sudo sed -i \u0026#39;s/GSSAPIAuthentication yes/GSSAPIAuthentication no/\u0026#39; /etc/ssh/sshd_config 重启 sshd 服务\n1 2 3 service sshd restart 或者 systemctl restart sshd ","date":"2024-10-25T19:25:45+08:00","permalink":"https://hublog.netlify.app/p/241025192545/","title":"SSH连接虚拟机速度慢解决办法"},{"content":"简述 LazyVim 是一个由 lazy.nvim 支持的 Neovim 安装程序，可以方便地定制和扩展您的配置。\n✨ Features 🔥 Transform your Neovim into a full-fledged IDE 💤 Easily customize and extend your config with lazy.nvim 🚀 Blazingly fast 🧹 Sane default settings for options, autocmds, and keymaps 📦 Comes with a wealth of plugins pre-configured and ready to use ⚡️ Requirements Neovim \u0026gt;= 0.9.0 (needs to be built with LuaJIT)\nGit \u0026gt;= 2.19.0 (for partial clones support)\na Nerd Font(v3.0 or greater) *(optional, but needed to display some icons)*\nlazygit *(optional)*\na C compiler for nvim-treesitter. See here\nfor telescope.nvim (optional)\nlive grep: ripgrep find files: fd a terminal that support true color and undercurl :\nkitty *(Linux \u0026amp; Macos)* wezterm *(Linux, Macos \u0026amp; Windows)* alacritty *(Linux, Macos \u0026amp; Windows)* iterm2 *(Macos)* 安装 Linux/MacOS Make a backup of your current Neovim files:\n1 2 3 4 5 6 7 # required mv ~/.config/nvim{,.bak} # optional but recommended mv ~/.local/share/nvim{,.bak} mv ~/.local/state/nvim{,.bak} mv ~/.cache/nvim{,.bak} Clone the starter\n1 git clone https://github.com/LazyVim/starter ~/.config/nvim Remove the .git folder, so you can add it to your own repo later\n1 rm -rf ~/.config/nvim/.git Start Neovim!\n1 nvim Refer to the comments in the files on how to customize LazyVim.\nWindows Install the LazyVim Starter with PowerShell\nMake a backup of your current Neovim files:\n1 2 3 4 5 # required Move-Item $env:LOCALAPPDATA\\nvim $env:LOCALAPPDATA\\nvim.bak # optional but recommended Move-Item $env:LOCALAPPDATA\\nvim-data $env:LOCALAPPDATA\\nvim-data.bak Clone the starter\n1 git clone https://github.com/LazyVim/starter $env:LOCALAPPDATA\\nvim Remove the .git folder, so you can add it to your own repo later\n1 Remove-Item $env:LOCALAPPDATA\\nvim\\.git -Recurse -Force Start Neovim!\n1 nvim Refer to the comments in the files on how to customize LazyVim.\nLinux/MacOS ","date":"2024-10-25T16:29:17+08:00","permalink":"https://hublog.netlify.app/p/241025162917/","title":"LazyVim安装配置"},{"content":"注释 类型转换 转换为布尔类型 如果对非 0 的整数(int 包含正数和负数)进行 bool 类型的转换 那么就全都是 True 在整数的范围内 0 强制类型转换为 bool 类型的结果是 false 将浮点数转换为bool类型的数据的时候 正的浮点数和负的浮点数的结果是true 如果是0.0 那么结果是false 只要字符串中有内容 那么在强制类型转换为bool的时候 那么就返回True 只要列表中有数据 那么强制类型转换为bool的时候 就返回True 只要元组中有数据 那么强制类型转换为bool的时候 就会返回True 只要字典中有内容 那么在强制类型转换为bool的时候 就会返回True 1 2 3 4 5 6 7 8 什么情况下是False print(bool(0)) print(bool(0.0)) print(bool(\u0026#39;\u0026#39;)) print(bool(\u0026#34;\u0026#34;)) print(bool([])) print(bool(())) print(bool({})) ","date":"2024-10-24T19:03:58+08:00","permalink":"https://hublog.netlify.app/p/241024190358/","title":"Python基础语法知识"},{"content":"地址：https://github.com/tibold/svg-explorer-extension\n下载安装之后即可实现：大图模式下预览 svg 格式图片，而不需要一个一个打开浏览器再预览 svg\n","date":"2024-10-24T10:53:59+08:00","permalink":"https://hublog.netlify.app/p/241024105359/","title":"Windows文件管理器预览svg格式图片"},{"content":"本期脚本：copy-paste-url\n官方地址：https://github.com/elhirchek/copy-paste-url\n功能：用 ctrl + v 将链接复制粘贴到 mpv 中，开始播放视频。\n","date":"2024-10-13T17:51:36+08:00","image":"https://s2.loli.net/2024/10/13/r4LPeIDqyvtOFUS.png","permalink":"https://hublog.netlify.app/p/241013175136/","title":"MPV播放器入门指南-第四期：脚本：粘贴URL播放，利用MPV播放第三方视频平台的视频"},{"content":"边框 样式 border-style指定样式\n可选值有\ndotted dashed solid double groove ridge inset none hidden 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;style\u0026gt; p.dotted {border-style: dotted;} p.dashed {border-style: dashed;} p.solid {border-style: solid;} p.double {border-style: double;} p.groove {border-style: groove;} p.ridge {border-style: ridge;} p.inset {border-style: inset;} p.outset {border-style: outset;} p.none {border-style: none;} p.hidden {border-style: hidden;} p.mix {border-style: dotted dashed solid double;} \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;The border-style Property\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;This property specifies what kind of border to display:\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;dotted\u0026#34;\u0026gt;A dotted border.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;dashed\u0026#34;\u0026gt;A dashed border.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;solid\u0026#34;\u0026gt;A solid border.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;double\u0026#34;\u0026gt;A double border.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;groove\u0026#34;\u0026gt;A groove border.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;ridge\u0026#34;\u0026gt;A ridge border.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;inset\u0026#34;\u0026gt;An inset border.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;outset\u0026#34;\u0026gt;An outset border.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;none\u0026#34;\u0026gt;No border.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;hidden\u0026#34;\u0026gt;A hidden border.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;mix\u0026#34;\u0026gt;A mixed border.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 宽度 border-width指定宽度\n可以设置为px, pt, cm, em等单位，也可以使用thin, medium, thick等值\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;style\u0026gt; p.one { border-style: solid; border-width: 5px; } p.two { border-style: solid; border-width: medium; } p.three { border-style: dotted; border-width: 2px; } p.four { border-style: dotted; border-width: thick; } p.five { border-style: double; border-width: 15px; } p.six { border-style: double; border-width: thick; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;The border-width Property\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;This property specifies the width of the four borders:\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;one\u0026#34;\u0026gt;Some text.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;two\u0026#34;\u0026gt;Some text.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;three\u0026#34;\u0026gt;Some text.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;four\u0026#34;\u0026gt;Some text.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;five\u0026#34;\u0026gt;Some text.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;six\u0026#34;\u0026gt;Some text.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;b\u0026gt;Note:\u0026lt;/b\u0026gt; The \u0026#34;border-width\u0026#34; property does not work if it is used alone. Always specify the \u0026#34;border-style\u0026#34; property to set the borders first.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 颜色 border-color指定边框颜色\n可以使用\n指定的名字，比如 red、blue 十六进制，比如 #ff0000 RGB，比如 rgb(255,0,0) HSL，比如 hsl(0, 100%, 50%) transparent，表示透明 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;style\u0026gt; p.one { border-style: solid; border-color: red; } p.two { border-style: solid; border-color: green; } p.three { border-style: dotted; border-color: blue; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;The border-color Property\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;This property specifies the color of the four borders:\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;one\u0026#34;\u0026gt;A solid red border\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;two\u0026#34;\u0026gt;A solid green border\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;three\u0026#34;\u0026gt;A dotted blue border\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;b\u0026gt;Note:\u0026lt;/b\u0026gt; The \u0026#34;border-color\u0026#34; property does not work if it is used alone. Use the \u0026#34;border-style\u0026#34; property to set the borders first.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 侧边 根据前面的内容，知道了边框的样式，宽度，颜色，在此基础上，还可以单独指定某一边的边框样式（top、right、bottom、left）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;style\u0026gt; p { border-top-style: dotted; border-right-style: solid; border-bottom-style: dotted; border-left-style: solid; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;Individual Border Sides\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;2 different border styles.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 除了使用特定侧边的属性，也可以只使用 border-style单个属性达到同样的效果，后续跟上不同的值有不同的效果，按照顺序为：上右下左。\n四个值：上右下左\n三个值：上右下，左跟随着右\n两个值：上右，下随着上，左跟随着右\n一个值：四边相同\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;style\u0026gt; body { text-align: center; } /* Four values */ p.four { border-style: dotted solid double dashed; } /* Three values */ p.three { border-style: dotted solid double; } /* Two values */ p.two { border-style: dotted solid; } /* One value */ p.one { border-style: dotted; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;Individual Border Sides\u0026lt;/h2\u0026gt; \u0026lt;p class=\u0026#34;four\u0026#34;\u0026gt;4 different border styles.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;three\u0026#34;\u0026gt;3 different border styles.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;two\u0026#34;\u0026gt;2 different border styles.\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;one\u0026#34;\u0026gt;1 border style.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 简写 由于属性太多，为了方便书写，可以使用一个属性 border来描述边框\nborder: border-width border-style(required) border-color\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;style\u0026gt; p { border: 5px solid red; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;The border Property\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;This property is a shorthand property for border-width, border-style, and border-color.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 圆角 默认边框角度是直角，可以通过 border-radius属性指定边框角度弯曲状态\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;style\u0026gt; p.normal { border: 2px solid red; padding: 5px; } p.round1 { border: 2px solid red; border-radius: 5px; padding: 5px; } p.round2 { border: 2px solid red; border-radius: 8px; padding: 5px; } p.round3 { border: 2px solid red; border-radius: 12px; padding: 5px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h2\u0026gt;The border-radius Property\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;This property is used to add rounded borders to an element:\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;normal\u0026#34;\u0026gt;Normal border\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;round1\u0026#34;\u0026gt;Round border\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;round2\u0026#34;\u0026gt;Rounder border\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;round3\u0026#34;\u0026gt;Roundest border\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 图片 边框也可以设置图片\nborder-image可以设置边框的图片\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box { border: 5px solid; /* 上 右 下 左 */ border-image: linear-gradient(to right, #0066ff, #ff32d6) 1 0 1 1; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;border image\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2024-10-12T11:13:37+08:00","permalink":"https://hublog.netlify.app/p/241012111337/","title":"CSS指南"},{"content":"创建项目框架 1 2 3 4 5 6 7 8 # pnpm 本次使用包管理工具，后续都采用 pnpm pnpm create vie # 或者 yarn yarn create vite # 或者 npm npm creat vite 1 2 3 4 # 安装依赖 pnpm install # 启动 pnpm run dev 设置路径别名 src/vite.config.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 import { defineConfig } from \u0026#39;vite\u0026#39; import vue from \u0026#39;@vitejs/plugin-vue\u0026#39; // https://vite.dev/config/ export default defineConfig({ plugins: [vue()], // 设置路径别名 resolve: { alias: { \u0026#39;@\u0026#39;: \u0026#39;/src\u0026#39;, } } }) 为了能实现鼠标点击路径跳转，需要安装 别名路径跳转\n设置路由 删除 App.vue多余内容，HelloWorld.vue，添加 vue-router 依赖\n1 pnpm add vue-router 新建一个组件\nsrc/views/Main.vue\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;这是Main组件\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt; \u0026lt;/style\u0026gt; 设置路由\nsrc/router/index.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import { createRouter, createWebHashHistory } from \u0026#34;vue-router\u0026#34; // 路由规则 const routes = [ { // main 组件 path: \u0026#39;/\u0026#39;, name: \u0026#39;main\u0026#39;, component: () =\u0026gt; import(\u0026#34;@/views/Main.vue\u0026#34;) } ] // 导出路由配置 const router = createRouter({ // 设置路由模式 history: createWebHashHistory(), // 设置路由，同名，后面不用写 routes, }) export default router; 引入路由\nsrc/main.js\n1 2 3 4 5 6 import { createApp } from \u0026#39;vue\u0026#39; import App from \u0026#39;./App.vue\u0026#39; import router from \u0026#39;./router\u0026#39; const app = createApp(App) app.use(router).mount(\u0026#39;#app\u0026#39;) 设置 App.vue\nsrc/App.vue\n1 2 3 4 5 6 7 8 9 10 \u0026lt;script setup\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;template\u0026gt; \u0026lt;router-view\u0026gt;\u0026lt;/router-view\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;style \u0026gt; \u0026lt;/style\u0026gt; 访问 localhost:5173 查看是否成功\n引入 element-plus 安装\n1 pnpm install element-plus 按需导入之自动导入\n安装unplugin-vue-components 和 unplugin-auto-import这两款插件\n1 pnpm install -D unplugin-vue-components unplugin-auto-import src/vite.config.js\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import { defineConfig } from \u0026#39;vite\u0026#39; import vue from \u0026#39;@vitejs/plugin-vue\u0026#39; import AutoImport from \u0026#39;unplugin-auto-import/vite\u0026#39; import Components from \u0026#39;unplugin-vue-components/vite\u0026#39; import { ElementPlusResolver } from \u0026#39;unplugin-vue-components/resolvers\u0026#39; // https://vite.dev/config/ export default defineConfig({ plugins: [ vue(), AutoImport({ resolvers: [ElementPlusResolver()], }), Components({ resolvers: [ElementPlusResolver()], }), ], // 设置路径别名 resolve: { alias: { \u0026#39;@\u0026#39;: \u0026#39;/src\u0026#39;, } } }) 主页添加按钮查看是否成功\nsrc/views/Main.vue\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;template\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;这是Main组件\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;mb-4\u0026#34;\u0026gt; \u0026lt;el-button\u0026gt;Default\u0026lt;/el-button\u0026gt; \u0026lt;el-button type=\u0026#34;primary\u0026#34;\u0026gt;Primary\u0026lt;/el-button\u0026gt; \u0026lt;el-button type=\u0026#34;success\u0026#34;\u0026gt;Success\u0026lt;/el-button\u0026gt; \u0026lt;el-button type=\u0026#34;info\u0026#34;\u0026gt;Info\u0026lt;/el-button\u0026gt; \u0026lt;el-button type=\u0026#34;warning\u0026#34;\u0026gt;Warning\u0026lt;/el-button\u0026gt; \u0026lt;el-button type=\u0026#34;danger\u0026#34;\u0026gt;Danger\u0026lt;/el-button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;script setup\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;style scoped\u0026gt;\u0026lt;/style\u0026gt; 效果展示：\n","date":"2024-10-12T08:51:29+08:00","permalink":"https://hublog.netlify.app/p/241012085129/","title":"Vue3实战"},{"content":"登录 连接数据库\n1 psql -h localhost -p 5432 -U postgres -d mydb 1 psql \u0026#34;postgresql://postgres:passwod@localhost:5432/mydb\u0026#34; 数据库管理 查看所有数据库\n1 \\l 创建数据库\n1 create database root; 切换数据库\n1 \\c database_name 查看当前数据库\n1 select current_database(); 表管理 查看表 查看所有表\n1 \\dt 查看特定数据表的结构\n1 \\d table_name 查看当前模式下的所有表\n1 \\dt * 查看特定数据表的结构\n1 \\d table_name 查看表的详细信息\n1 \\d+ table_name 查看特定数据表的结构\n1 \\d table_name 创建表 1 2 3 4 5 create table products ( product_no integer, name text, price numeric ) 删除表 表不存在删除不会报错\n1 drop table products; 变体，表不存在删除不会报错\n1 drop table if extsis products; 用户管理 查看用户 查看所有用户\n1 \\du 查看当前用户\n1 select current_user; 创建用户 创建一个拥有所有权限的用户\n1 CREATE ROLE admin_user WITH LOGIN SUPERUSER CREATEDB CREATEROLE PASSWORD \u0026#39;strongpassword\u0026#39;; 修改用户 修改密码\n1 alter user user_name with password \u0026#39;new_password\u0026#39;; ","date":"2024-10-11T22:42:04+08:00","permalink":"https://hublog.netlify.app/p/241011224204/","title":"PostgreSQL客户端PSQL使用"},{"content":"插件：\nScala Syntax (official) Scala (Metals) ","date":"2024-10-09T21:30:26+08:00","permalink":"https://hublog.netlify.app/p/241009213026/","title":"VS Code配置scala环境"},{"content":"常用快捷键 f 全屏 ecs 关闭控制台，退出全屏 q 停止播放并退出 Q 保存当前播放信息，停止播放并退出，如果重新播放，尽可能恢复之前保存的播放信息 9 或 / 调小音量 0 或 * 调大音量 m 静音，再按 取消静音 j 下一个字幕轨 J 上一个字幕轨 [ 播放速度减小10% ] 播放速度增加10% backspace 将速度重置为正常 space 或 p 暂停，再按取消暂停 o 或 P 显示OSD（屏幕显示），包括 当前播放时间，总时间，播放进度，进度条 O 持续显示当前播放时间，总时间，播放进度 . 点击逐帧播放下一帧，长按连续播放 , 点击逐帧播放上一帧，长按连续播放 l 设置循环段，第一次按下是循环开始点，第二次按下是循环结束点，第三次是清除循环 L 切换为全局循环 快捷键及图示 快捷键 中文 英文 LEFT and RIGHT 向后/向前跳转5秒。Shift+箭头进行1秒精确跳转（见\u0026ndash;hr-seek）。 Seek backward/forward 5 seconds. Shift+arrow does a 1 second exact seek (see \u0026ndash;hr-seek). UP and DOWN 向前/向后跳转1分钟。Shift+箭头进行5秒精确跳转（见\u0026ndash;hr-seek）。 Seek forward/backward 1 minute. Shift+arrow does a 5 second exact seek (see \u0026ndash;hr-seek). Ctrl+LEFT and Ctrl+RIGHT 跳转到上一个/下一个字幕。受一些限制，可能并不总是有效；参见sub-seek命令。 Seek to the previous/next subtitle. Subject to some restrictions and might not always work; see sub-seek command. Ctrl+Shift+LEFT and Ctrl+Shift+RIGHT 调整字幕延迟，以便下一个或上一个字幕立即显示。这对于将字幕与音频同步特别有用。 Adjust subtitle delay so that the next or previous subtitle is displayed now. This is especially useful to sync subtitles to audio. [ and ] 将当前播放速度减小/增加10%。 Decrease/increase current playback speed by 10%. { and } 当前播放速度减半/加倍。 Halve/double current playback speed. BACKSPACE 将播放速度重置为正常。 Reset playback speed to normal. Shift+BACKSPACE 撤销上次跳转。仅当播放列表条目未更改时有效。再次按下将返回到原始位置。有关详细信息，请参阅revert-seek命令。 Undo the last seek. This works only if the playlist entry was not changed. Hitting it a second time will go back to the original position. See revert-seek command for details. Shift+Ctrl+BACKSPACE 标记当前位置。然后Shift+BACKSPACE将使用该标记位置作为还原位置（一旦您跳回，标记将被重置）。您可以使用此功能在文件中进行跳转，然后返回到您离开的确切位置。 Mark the current position. This will then be used by Shift+BACKSPACE as revert position (once you seek back, the marker will be reset). You can use this to seek around in the file and then return to the exact position where you left off. \u0026lt; and \u0026gt; 在播放列表中向后/向前。 Go backward/forward in the playlist. ENTER 在播放列表中向前。 Go forward in the playlist. p and SPACE 暂停（再次按下取消暂停）。 Pause (pressing again unpauses). . 向前一步。按一次将暂停，每连续按下一次将播放一帧，然后再次进入暂停模式。 Step forward. Pressing once will pause, every consecutive press will play one frame and then go into pause mode again. , 向后一步。按一次将暂停，每连续按下一次将倒放一帧，然后再次进入暂停模式。 Step backward. Pressing once will pause, every consecutive press will play one frame in reverse and then go into pause mode again. q 停止播放并退出。 Stop playing and quit. Q 类似于q，但存储当前播放位置。如果可能的话，稍后再次播放相同的文件将在旧的播放位置继续播放。请参阅RESUMING PLAYBACK。 Like q, but store the current playback position. Playing the same file later will resume at the old playback position if possible. See RESUMING PLAYBACK. / and * 减小/增大音量。 Decrease/increase volume. 9 and 0 减小/增大音量。 Decrease/increase volume. m 静音。 Mute sound. _ 循环浏览可用的视频轨道。 Cycle through the available video tracks. # 循环浏览可用的音频轨道。 Cycle through the available audio tracks. E 循环浏览可用的版本。 Cycle through the available Editions. f 切换全屏（另请参阅\u0026ndash;fs）。 Toggle fullscreen (see also \u0026ndash;fs). ESC 退出全屏模式。 Exit fullscreen mode. T 切换置顶（另请参阅\u0026ndash;ontop）。 Toggle stay-on-top (see also \u0026ndash;ontop). w and W 减小/增大平移和扫描范围。当前e键目前执行相同操作，但不建议使用。 Decrease/increase pan-and-scan range. The e key does the same as W currently, but use is discouraged. o and P 在OSD上显示进度条、已用时间和总持续时间。 Show progression bar, elapsed time and total duration on the OSD. O 在OSD状态之间切换正常和播放时间/持续时间。 Toggle OSD states between normal and playback time/duration. v 切换字幕可见性。 Toggle subtitle visibility. j and J 循环浏览可用的字幕。 Cycle through the available subtitles. z and Z 通过+/- 0.1秒调整字幕延迟。当前x键执行相同操作，但不建议使用。 Adjust subtitle delay by +/- 0.1 seconds. The x key does the same as Z currently, but use is discouraged. l 设置/清除A-B循环点。有关详细信息，请参阅ab-loop命令。 Set/clear A-B loop points. See ab-loop command for details. L 切换无限循环。 Toggle infinite looping. Ctrl++ and Ctrl+- 通过+/- 0.1秒调整音频延迟（A/V同步）。 Adjust audio delay (A/V sync) by +/- 0.1 seconds. Shift+g and Shift+f 通过+/- 10%调整字幕字体大小。 Adjust subtitle font size by +/- 10%. u 在SSA/ASS字幕中切换仅应用\u0026ndash;sub-ass-*覆盖（默认）和几乎完全覆盖它们的常规字幕样式。有关更多信息，请参阅\u0026ndash;sub-ass-override。 Switch between applying only \u0026ndash;sub-ass-* overrides (default) to SSA/ASS subtitles, and overriding them almost completely with the normal subtitle style. See \u0026ndash;sub-ass-override for more info. V 切换字幕VSFilter纵横比兼容模式。有关更多信息，请参阅\u0026ndash;sub-ass-vsfilter-aspect-compat。 Toggle subtitle VSFilter aspect compatibility mode. See \u0026ndash;sub-ass-vsfilter-aspect-compat for more info. r and R 上/下移动字幕。当前t键执行相同操作，但不建议使用。 Move subtitles up/down. The t key does the same as R currently, but use is discouraged. s 拍摄截图。 Take a screenshot. S 拍摄截图，不带字幕。（这取决于VO驱动程序支持与否。） Take a screenshot, without subtitles. (Whether this works depends on VO driver support.) Ctrl+s 拍摄截图，如窗口显示（带字幕、OSD和缩放视频）。 Take a screenshot, as the window shows it (with subtitles, OSD, and scaled video). PGUP and PGDWN 跳转到上一个/下一个章节的开始。在大多数情况下，“上一个”实际上将会到达当前章节的开始；请参阅\u0026ndash;chapter-seek-threshold。 Seek to the beginning of the previous/next chapter. In most cases, \u0026ldquo;previous\u0026rdquo; will actually go to the beginning of the current chapter; see \u0026ndash;chapter-seek-threshold. Shift+PGUP and Shift+PGDWN 向后或向前跳转10分钟。（这曾经映射到不带Shift的PGUP/PGDWN。） Seek backward or forward by 10 minutes. (This used to be mapped to PGUP/PGDWN without Shift.) d 激活/停用去隔行。 Activate/deactivate deinterlacer. A 循环切换宽高比覆盖。 Cycle aspect ratio override. Ctrl+h 切换硬件视频解码开/关。 Toggle hardware video decoding on/off. Alt+LEFT, Alt+RIGHT, Alt+UP, Alt+DOWN 移动视频矩形（平移）。 Move the video rectangle (panning). Alt++ and Alt+- 将Alt与+或-键组合可更改视频缩放。 Combining Alt with the + or - keys changes video zoom. Alt+BACKSPACE 重置平移/缩放设置。 Reset the pan/zoom settings. F8 显示播放列表和其中的当前位置（仅在使用UI窗口时有用，在终端上损坏）。 Show the playlist and the current position in it (useful only if a UI window is used, broken on the terminal). F9 显示音频和字幕流列表（仅在使用UI窗口时有用，在终端上损坏）。 Show the list of audio and subtitle streams (useful only if a UI window is used, broken on the terminal). i and I 显示/切换显示有关当前播放文件的统计信息的叠加层，例如编解码器、帧速率、丢帧数等。有关更多信息，请参阅STATS。 Show/toggle an overlay displaying statistics about the currently playing file such as codec, framerate, number of dropped frames and so on. See STATS for more information. DEL 在OSC之间循环显示可见性：从不/自动（鼠标移动）/始终 Cycle OSC visibility between never / auto (mouse-move) / always ` 显示控制台。（ESC关闭它。有关CONSOLE的详细信息，请参阅CONSOLE。） Show the console. (ESC closes it again. See CONSOLE.) 1 and 2 调整对比度。 Adjust contrast. 3 and 4 调整亮度。 Adjust brightness. 5 and 6 调整伽马值。 Adjust gamma. 7 and 8 调整饱和度。 Adjust saturation. Alt+0 (and Command+0 on macOS) 将视频窗口调整为原始大小的一半。 Resize video window to half its original size. Alt+1 (and Command+1 on macOS) 将视频窗口调整为其原始大小。 Resize video window to its original size. Alt+2 (and Command+2 on macOS) 将视频窗口调整为其原始大小的两倍。 Resize video window to double its original size. Command + f (macOS only) 切换全屏（另请参阅\u0026ndash;fs）。 Toggle fullscreen (see also \u0026ndash;fs). PAUSE 暂停。 Pause. STOP 停止播放并退出。 Stop playing and quit. PREVIOUS and NEXT 向后/向前跳转1分钟。 Seek backward/forward 1 minute. ZOOMIN and ZOOMOUT 更改视频缩放。 Changes video zoom. ","date":"2024-10-09T15:58:09+08:00","image":"https://s2.loli.net/2024/10/09/wezYV4D5Q8J36HT.png","permalink":"https://hublog.netlify.app/p/241009155809/","title":"MPV播放器入门指南-第三期：快捷键"},{"content":"简介 Yarn 是一个快速、可靠和安全的 JavaScript 包管理工具。 它可以帮助你自动化地下载、安装、更新和管理项目依赖的各种代码库和工具。 简单来说，Yarn 就像 npm (Node Package Manager) 的一个替代品，它们的功能相似，但 Yarn 在一些方面做了优化和改进，使其更高效、更稳定。\n官网：https://yarnpkg.com/\n特性 速度快： Yarn 通过并行下载依赖和利用缓存等机制，显著提升了依赖安装速度，尤其是在大型项目中。 可靠性高： Yarn 使用确定性的算法来解析依赖关系，确保在不同的环境中安装的依赖版本一致，避免了因版本冲突导致的问题。 它还通过校验下载的包的完整性来防止恶意代码的注入。 安全性强： Yarn 会验证所有安装包的签名，确保下载的包是来自官方源的，没有被篡改过。 离线模式： Yarn 拥有离线缓存机制，即使在没有网络连接的情况下，也可以安装已经缓存的依赖。 版本控制： Yarn 使用 yarn.lock 文件来锁定项目依赖的版本，确保在不同的开发环境中，项目的依赖版本完全一致。这有助于避免因依赖版本升级导致的问题。 兼容性： Yarn 兼容 npm 的大部分命令和工作流程，可以无缝地替换 npm。 工作区 (Workspaces): Yarn 支持 Monorepo 模式，允许你在一个仓库中管理多个项目，共享依赖，提高代码复用率。 安装 官方文档：https://classic.yarnpkg.com/lang/en/docs/install/#windows-stable\nWindows 通过 npm 安装：\n1 npm install --global yarn 下载安装程序安装：\n下载地址：https://classic.yarnpkg.com/latest.msi\n通过 Chocolatey 安装：\n1 choco install yarn 通过 Scoop 安装：\n1 scoop install yarn Linux 通过 npm 安装\n1 npm install --global yarn 下载安装程序安装\nDebian / Ubuntu 1 2 curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - echo \u0026#34;deb https://dl.yarnpkg.com/debian/ stable main\u0026#34; | sudo tee /etc/apt/sources.list.d/yarn.list 1 sudo apt update \u0026amp;\u0026amp; sudo apt install yarn CentOS / Fedora / RHE 1 curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo 1 2 3 sudo yum install yarn ## OR ## sudo dnf install yarn Arch Linux 1 pacman -S yarn MacOS 通过 npm 安装\n1 npm install --global yarn 下载安装程序安装\n1 brew install yarn 安装脚本\n1 curl -o- -L https://yarnpkg.com/install.sh | bash 配置 查看镜像源\n1 yarn config get registry 设置为淘宝镜像源\n1 yarn config set registry https://registry.npmmirror.com 删除镜像源\n1 yarn config rm registry 使用 查看缓存位置\n1 yarn cache dir ","date":"2024-10-08T08:29:30+08:00","permalink":"https://hublog.netlify.app/p/241008082930/","title":"yarn安装使用"},{"content":"最近有安装字体的需求，需要寻找一款字体管理软件\n在搜寻之下，找到了一款免费，现代化的字体管理软件：FontBase\n官网：https://fontba.se/\n预览：\n","date":"2024-10-07T17:07:49+08:00","permalink":"https://hublog.netlify.app/p/241007170749/","title":"Windows上字体管理软件：FontBase"},{"content":"Go原生没有提供切片在指定索引添加元素或切片的方法，只有一个内置函数 apped()\n所以采用 apped() 实现 在指定索引插入元素\n以下为代码及分析\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // append() 从中间下标i插入元素 aslice = []int{1, 2, 3, 4, 5} i := 3 // 下标 i newElement := 10 // 新的元素 /* 拆解步骤： 1. appen(a, b)：追加b元素到一个a切片 2. 为了实现从中间添加，把原来的分为两部分： 第一部分是 下标 i 前面的 记为 a 第二部分是 下标 i 后面的 3. 第二部分 再使用 appen() 和 下标 i 的元素 组成 一个新的切片 记为 b 4. 将 第一部分 a 和 新的切片 b 组成 数组 c */ a := aslice[:i] // 第一部分 a b := append([]int{newElement}, aslice[i:]...) c := append(a, b...) fmt.Println(\u0026#34;原来的切片：\u0026#34;, aslice) // 原来的数组： [1 2 3 4 5] fmt.Println(\u0026#34;新的切片\u0026#34;, c) // 新的数组 [1 2 3 10 4 5] // 简写为一个 newSlice := append(aslice[:i], append([]int{newElement}, aslice[i:]...)...) fmt.Println(\u0026#34;简写：\u0026#34;, newSlice) // 简写： [1 2 3 10 4 5] fmt.Println(\u0026#34;固定格式为：append(切片[:下标], append(新的元素, 切片[下标:]...)...)\u0026#34;) // 案例： 在切片aa []int{24,21,325,208,2370,32,65,321} 索引 index 为 5 处 新增一个切片bb []int{1,2,3} aa := []int{24, 21, 325, 208, 2370, 32, 65, 321} index := 5 bb := []int{1, 2, 3} aa = append(aa[:index], append(bb, aa[index:]...)...) fmt.Println(aa) // [24 21 325 208 2370 1 2 3 32 65 321] 封装为函数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // Insert 泛型函数，在切片中指定位置插入新元素或切片 func Insert[T any](slice []T, index int, value any) []T { size := len(slice) if index \u0026lt; 0 || index \u0026gt; size { return slice } if v, ok := value.(T); ok { slice = append(slice[:index], append([]T{v}, slice[index:]...)...) return slice } if v, ok := value.([]T); ok { slice = append(slice[:index], append(v, slice[index:]...)...) return slice } return slice } 调用\n1 2 3 4 5 strSlice := append([]string{\u0026#34;apple\u0026#34;, \u0026#34;pear\u0026#34;}, \u0026#34;orange\u0026#34;) fmt.Println(strSlice) strSlice = Insert(strSlice, 2, \u0026#34;hahaha\u0026#34;) fmt.Println(strSlice) ","date":"2024-10-07T10:57:58+08:00","permalink":"https://hublog.netlify.app/p/241007105758/","title":"Go切片在指定索引插入数组的的固定写法"},{"content":"用户管理 新建用户\n1 2 # -m 创建用户目录 useradd -m username 设置密码\n1 passwd username 将用户添加到 sudo 组，使用 visudo\n1 visudo 追加一行 username ALL=(ALL:ALL) NOPASSWD:ALL，NOPASSWD表示使用 sudo 时不用输入密码，如果需要每次输入密码，可以改为 ALL\n如下：\n1 2 3 # Allow members of group sudo to execute any command %sudo ALL=(ALL:ALL) ALL username ALL=(ALL:ALL) NOPASSWD:ALL 切换默认 shell 为 bash\n1 chsh -s /bin/bash 重新登录使 shell 切换生效！\n安装 bash-it\n1 git clone --depth=1 https://github.com/muyiacc/bash-it.git ~/.bash_it \u0026amp;\u0026amp; ~/.bash_it/install.sh \u0026amp;\u0026amp; source ~/.bashrc 更新语言环境 locale 查看当前的 locale 设置\n1 locale 列出系统上已经启用的所有 locale。\n1 locale -a 如果没有想要的语言，需要编辑 /etc/locale.gen，启用新的 locale 支持\n1 sudo vim /etc/locale.gen 比如取消 en_US.UTF-8 UTF-8 前的注释，保存退出\n重新生成配置文件\n1 sudo local-gen 设置默认的 locale，默认配置文件的位置在 /etc/default/locale，使用 update-locale配置\n1 sudo update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 更新当前会话的 locale\n1 source /etc/default/locale 再次检查 locale，如果没有更改，注销重新登录查看\n1 locale 总结：\nlocal：查看当前 locale locale-gen：生成 locale 配置 update-locale 是一个用于更新系统 locale 设置的命令行工具，通常在基于 Debian 的 Linux 发行版（如 Ubuntu）中使用。它可以简化 locale 的配置过程，自动更新相关的环境变量和配置文件。 ","date":"2024-10-06T11:09:05+08:00","permalink":"https://hublog.netlify.app/p/241006110905/","title":"Linux基础配置"},{"content":"安装 Linux Debian / Ubuntu\n1 2 3 4 5 6 7 8 9 10 11 # Create the file repository configuration: sudo sh -c \u0026#39;echo \u0026#34;deb https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\u0026#34; \u0026gt; /etc/apt/sources.list.d/pgdg.list\u0026#39; # Import the repository signing key: wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - # Update the package lists: sudo apt-get update # Install the latest version of PostgreSQL. # If you want a specific version, use \u0026#39;postgresql-12\u0026#39; or similar instead of \u0026#39;postgresql\u0026#39;: sudo apt-get -y install postgresql-15 Windows 下载地址：https://www.enterprisedb.com/downloads/postgres-postgresql-downloads\n略\nDocker 1 docker run -d --name postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 postgres 目录结构 1 2 3 4 5 6 7 8 9 10 postgresql └── 15 └── main ├── conf.d ├── environment ├── pg_ctl.conf ├── pg_hba.conf ├── pg_ident.conf ├── postgresql.conf └── start.conf 结构说明： postgresql：这是 PostgreSQL 数据库的根目录，通常包含所有版本的数据库配置和数据文件。 15：表示 PostgreSQL 的版本号。在此例中是版本 15。 main：这是数据库集群的名称，通常是默认集群的名称。一个 PostgreSQL 实例可以有多个数据库集群。 目录和文件： conf.d：这个目录通常用于存放额外的配置文件，允许用户将配置拆分为多个文件，方便管理。 environment：这个文件可能包含环境变量的设置，用于配置数据库的运行环境。 pg_ctl.conf：包含 pg_ctl 命令的配置选项，pg_ctl 是用于控制 PostgreSQL 实例的工具。 pg_hba.conf：该文件用于配置客户端认证，定义哪些用户、从哪些主机可以连接到数据库，以及使用何种认证方法。 pg_ident.conf：用于配置用户身份映射，可以将操作系统用户映射到数据库用户。 postgresql.conf：这是 PostgreSQL 的主配置文件，包含数据库的各种设置，如内存、连接限制、日志记录等。 start.conf：可能包含启动相关的配置，具体内容依赖于 PostgreSQL 的设置和使用。 配置远程连接 修改postgresql.conf 找到postgresql.conf文件（通常位于/etc/postgresql/版本/main/下），并进行编辑。\n1 sudo nano /etc/postgresql/版本/main/postgresql.conf 找到以下行：\n1 #listen_addresses = \u0026#39;localhost\u0026#39; 修改为：\n1 listen_addresses = \u0026#39;*\u0026#39; 这将允许所有 IP 地址连接到您的数据库。\n修改pg_hba.conf 再次，找到pg_hba.conf文件，并进行编辑。\n1 sudo nano /etc/postgresql/版本/main/pg_hba.conf 在文件末尾添加以下行，允许所有 IP 地址通过密码连接：\n1 host all all 0.0.0.0/0 scram-sha-256 重载配置 1 sudo pg_ctlcluster \u0026lt;version\u0026gt; main reload 如何不生效，重启 postgresl\n1 sudo systemctl restart postgresql psql 客户端 安装完成之后，如何进入像 MySQL 那样的命令行，和数据库交互？\nPostgres 提供了一个终端工具 psql ，在终端输入\n终端直接输入 psql 会使用当前的系统用户登录，所以需要切换到 postgres 用户\n不指定数据库，会使用系统用户同名数据库\n默认拥有一个 postgres 数据库\n1 2 sudo su - postgres psql 连接参数：\n1 psql -h \u0026lt;host\u0026gt; -p \u0026lt;port\u0026gt; -d \u0026lt;database\u0026gt; -U \u0026lt;username\u0026gt; -W psql: psql 命令本身。 -h \u0026lt;host\u0026gt;: 指定主机名。 -p \u0026lt;port\u0026gt;: 指定端口号。 -d \u0026lt;database\u0026gt;: 指定数据库名称。 -U \u0026lt;username\u0026gt;: 指定用户名。 -W: 提示输入密码。 如果不使用 -W，psql 可能会尝试使用其他身份验证方法 (例如，基于操作系统的用户名)。 ","date":"2024-10-05T09:42:40+08:00","permalink":"https://hublog.netlify.app/p/241005094240/","title":"PostgreSQL安装，配置"},{"content":"Hubstudio （推荐） Hubstudio，含 AFF\n无限配置文件，每天打开 20 次\nFree 计划 浏览器环境数 无限量 每日环境打开次数 20 次 可添加成员数 限免 云端存储空间 限免 功能包括: 环境数据同步 环境指纹控制 环境和账号导入 环境转移 导入插件 环境通知聚合 付费计划 https://www.hubstudio.cn/pricing/\nUndetectable 推荐\n官网：https://undetectable.io/\nFree 计划 Feature Limit Local Profiles Cloud Profiles 5 Users 1 Sessions 1 Default Configs 10 Purchased Configs 0 Storage Servers 0 付费计划 https://app.undetectable.io/upgrade\nDolphin Anty 官网：https://dolphin-anty.com\n时间一长需要登陆，如果忘记了密码很不友好。\nFree 计划 Browser profiles：10\nProfiles created per month：200\n不支持批量操作 付费计划 https://dolphin-anty.com/panel/#/payment\nAdsPower 官网：https://www.adspower.net/\n有广告！\nFree 计划 浏览器环境 5 个\n团队成员 0 个\n付费计划 https://www.adspower.net/pricing\nGoLogin 官网：https://gologin.com\n付费\n免费使用 7 天\n付费计划 https://gologin.com/pricing/\nVMLogin 官网：https://vmlogin.com/\n付费\n付费计划 https://vmlogin.com/\nIncogniton 官网：https://incogniton.com/\n更新下载不下来\nFree 计划 开始使用我们的免费入门套餐，其中包括未来 2 个月的 10 个浏览器配置文件。\n之后，套餐将更新为 3 个配置文件。\n付费计划 https://incogniton.com/pricing/\n","date":"2024-10-04T15:55:49+08:00","permalink":"https://hublog.netlify.app/p/241004155549/","title":"指纹浏览器"},{"content":"版本：131.0\n地址栏输入 about:config\n寻找\nsidebar.verticalTabs设置 true sidebar.revamp设置 true ","date":"2024-10-03T21:37:28+08:00","permalink":"https://hublog.netlify.app/p/241003213728/","title":"Firefox开启垂直标签页"},{"content":"Nginx 安装和配置 信息\n本次以 Debian 为例：如果不是 Debian，请参考：官方教程安装，如果已经安装 Nginx，可跳过\n前提条件：\n1 sudo apt install curl gnupg2 ca-certificates lsb-release debian-archive-keyring 导入密钥，验证包的正确性：\n1 2 curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\ | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg \u0026gt;/dev/null 验证下载的文件是否包含正确的密钥：\n1 gpg --dry-run --quiet --no-keyring --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg 输出应包含完整指纹 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 如下:\npub rsa2048 2011-08-19 [SC] [expires: 2024-06-14] 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 uid nginx signing key signing-key@nginx.com\n如果指纹不同，删除文件。\n二选一：\n要为稳定的 nginx 包设置 apt 存储库，请运行以下命令： 1 2 3 echo \u0026#34;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\ http://nginx.org/packages/mainline/debian `lsb_release -cs` nginx\u0026#34; \\ | sudo tee /etc/apt/sources.list.d/nginx.list 如果希望使用 mainline nginx 包，请改为运行以下命令: 1 2 3 echo \u0026#34;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\ http://nginx.org/packages/mainline/debian `lsb_release -cs` nginx\u0026#34; \\ | sudo tee /etc/apt/sources.list.d/nginx.list 设置存储库固定，使用 Nginx 官方的软件包而不是发行版提供的软件包：\n1 2 echo -e \u0026#34;Package: *\\nPin: origin nginx.org\\nPin: release o=nginx\\nPin-Priority: 900\\n\u0026#34; \\ | sudo tee /etc/apt/preferences.d/99nginx 要安装 nginx，请运行以下命令:\n1 2 sudo apt update sudo apt install nginx Certbot 安装 安装 snap certbot 官方已经说了，各个发行版安装的 certbot 版本落后，功能不全，推荐我们使用 snap 安装\n1 2 3 4 5 6 7 8 # 安装snap sudo apt update sudo apt install snapd # 重启系统 # 安装core sudo snap install core sudo snap refresh core 安装 certbot 安装之前确保没有其他方式安装的 certbot 如：apt，pip\n可通过这条命令查看 whereis certbot 如果有，卸载它们 sudo apt remove certbot sudo pip uninstall certbot\n1 2 sudo snap install --classic certbot sudo ln -s /snap/bin/certbot /usr/bin/certbot （3）查看版本\n1 sudo certbot --version Certbot 插件 nginx 使用 snap 安装的版本是已经含有 nginx 插件的\n申请方法如下\n新建一个 nginx 的配置文件\n1 sudo touch /etc/nginx/conf.d/abc.conf 编辑 abc.conf，填入以下模板，根据自己实际情况修改\n1 sudo vim /etc/nginx/conf.d/abc.conf 1 2 3 4 5 6 7 8 9 10 11 12 server { listen 80; server_name domain.com; location / { proxy_pass http://127.0.0.1:80; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } 使用 certbot 的 nginx 插件申请\n1 2 # 可以先查看哪些可以申请，是否列出了需要的域名 sudo certbot --nginx 申请前保证域名解析到当前的 ip\ncertbot-dns-dnspod 此插件用于托管在 dnspod 上的域名通过 dns 方式申请\ndns 的优势是可以申请泛域名证书，也就是像 *.seektao.cc这种\n1 2 3 sudo snap install certbot-dns-dnspod sudo snap set certbot trust-plugin-with-root=ok sudo snap connect certbot:plugin certbot-dns-dnspod 安装完成之后新建一个 .ini 文件，比如 /etc/certbot/dnspod.ini\n1 2 sudo mkdir /etc/certbot sudo touch /etc/certbot/dnspod.ini 编辑 dnspod.ini，填入下面的内容，点此跳转到 dnspod api 申请页面，注意申请的是 dnspod token\n1 2 dns_dnspod_api_id = xxxxxxx dns_dnspod_api_token = xxxxxxxxxxxxxbcdef 1 sudo chmod 600 /etc/certbot/dnspod.ini 申请证书的命令，需要替换为自己的域名\n1 2 3 4 5 6 7 8 9 10 11 sudo certbot certonly -a dns-dnspod \\ --dns-dnspod-credentials /etc/certbot/dnspod.ini \\ -d \u0026#34;*.yourdomain.com\u0026#34; 接着就是: 输入邮箱， 是否同意注册acme（选Y）， 是否同意发送邮件。。。 接着等待，等待。。就完成了 证书文件保存在 /etc/letsencrypt/live\n1 2 3 4 5 # 其中 [cert name]/privkey.pem：证书的私钥。 [cert name]/fullchain.pem：在大多数服务器软件中使用的证书文件。 [cert name]/chain.pem：在Nginx \u0026gt;=1.3.7 中用于 OCSP stapling。 [cert name]/cert.pem：会破坏许多服务器配置，不应在未进一步阅读文档的情况下使用。 用到 privkey.pem，fullchain.pem 即可。\ncertbot-dns-cloudflare 此插件用于托管在 cloudflare 上的域名通过 dns 方式申请\ndns 的优势是可以申请泛域名证书，也就是像 *.seektao.cc这种\n1 2 3 4 5 6 7 8 9 10 11 12 sudo snap install certbot-dns-cloudflare # 如果提示如下错误信息，输入：sudo snap set certbot trust-plugin-with-root=ok # 接着重新执行 sudo snap install certbot-dns-cloudflare error: cannot perform the following tasks: - Run hook prepare-plug-plugin of snap \u0026#34;certbot\u0026#34; (run hook \u0026#34;prepare-plug-plugin\u0026#34;: ----- Only connect this interface if you trust the plugin author to have root on the system. Run `snap set certbot trust-plugin-with-root=ok` to acknowledge this and then run this command again to perform the connection. If that doesn\u0026#39;t work, you may need to remove all certbot-dns-* plugins from the system, then try installing the certbot snap again. -----) 申请 api token，点此跳转\n在 /etc/certbot 新建 cloudflare.ini，将下面的值替换为自己申请的 api token\n1 2 # Cloudflare API token used by Certbot dns_cloudflare_api_token = xxxxxxxxxxxxxxxxx 修改权限\n1 sudo chmod 600 cloudflare.ini 申请证书的命令，需要替换为自己的域名\n1 2 3 4 sudo certbot certonly \\ --dns-cloudflare \\ --dns-cloudflare-credentials /etc/certbot/cloudflare.ini \\ -d \u0026#34;*.youdomain.com\u0026#34; certbot-dns-huawei（待续） 此插件用于托管在 huawei 上的域名通过 dns 方式申请\ndns 的优势是可以申请泛域名证书，也就是像 *.seektao.cc这种\n自动续期 自动续期添加一个定时任务即可\n1 2 3 4 5 # 设置定时任务 sudo crontab -e # 每月1号的午夜执行 certbot renew 命令来续订证书 0 0 1 * * /usr/local/bin/certbot renew 需要注意自己的 certbot 执行路径是否正确 which certbot 可以看到 certbot 执行路径\n一键脚本 经过上面的步骤，你会发现每新增一个服务，需要\n新增 nginx 配置文件 配置 nginx 文件 验证并重启 nginx 服务 这时候发现服务器每新增一个服务，就需要添加、修改 nginx 配置文件，域名和端口这些都需要修改，申请 ssl 证书，这些步骤相当麻烦。\n如果没有一个简单的 nginx 模板，则会更加复杂繁琐。基于以上需求，我编写了一个脚本。功能：配置好服务后，只需要一条命令即可完成 nginx 配置，并配置 ssl 证书\n命令为：\n1 脚本名称 域名 端口号 如果需要获取原文和脚本，关注公众号\u0026quot;寻道之旅\u0026quot;，发送\u0026quot;nginx\u0026quot;获取。\n","date":"2024-10-03T15:11:58+08:00","image":"https://s2.loli.net/2024/10/03/maziQBGhWpPJyVD.png","permalink":"https://hublog.netlify.app/p/241003151158/","title":"certbot申请SSL证书，自动续期，Nginx配置"},{"content":"Nginx 安装和配置 信息\n本次以 Debian 为例：如果不是 Debian，请参考：官方教程安装，如果已经安装 Nginx，可跳过\n前提条件：\n1 sudo apt install curl gnupg2 ca-certificates lsb-release debian-archive-keyring 导入密钥，验证包的正确性：\n1 2 curl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\ | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg \u0026gt;/dev/null 验证下载的文件是否包含正确的密钥：\n1 gpg --dry-run --quiet --no-keyring --import --import-options import-show /usr/share/keyrings/nginx-archive-keyring.gpg 输出应包含完整指纹 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 如下:\npub rsa2048 2011-08-19 [SC] [expires: 2024-06-14] 573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62 uid nginx signing key signing-key@nginx.com\n如果指纹不同，删除文件。\n二选一：\n要为稳定的 nginx 包设置 apt 存储库，请运行以下命令： 1 2 3 echo \u0026#34;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\ http://nginx.org/packages/mainline/debian `lsb_release -cs` nginx\u0026#34; \\ | sudo tee /etc/apt/sources.list.d/nginx.list 如果希望使用 mainline nginx 包，请改为运行以下命令: 1 2 3 echo \u0026#34;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\ http://nginx.org/packages/mainline/debian `lsb_release -cs` nginx\u0026#34; \\ | sudo tee /etc/apt/sources.list.d/nginx.list 设置存储库固定，使用 Nginx 官方的软件包而不是发行版提供的软件包：\n1 2 echo -e \u0026#34;Package: *\\nPin: origin nginx.org\\nPin: release o=nginx\\nPin-Priority: 900\\n\u0026#34; \\ | sudo tee /etc/apt/preferences.d/99nginx 要安装 nginx，请运行以下命令:\n1 2 sudo apt update sudo apt install nginx Certbot 安装 安装 snap certbot 官方已经说了，各个发行版安装的 certbot 版本落后，功能不全，推荐我们使用 snap 安装\n1 2 3 4 5 6 7 8 # 安装snap sudo apt update sudo apt install snapd # 重启系统 # 安装core sudo snap install core sudo snap refresh core 安装 certbot 安装之前确保没有其他方式安装的 certbot 如：apt，pip\n可通过这条命令查看 whereis certbot 如果有，卸载它们 sudo apt remove certbot sudo pip uninstall certbot\n1 2 sudo snap install --classic certbot sudo ln -s /snap/bin/certbot /usr/bin/certbot （3）查看版本\n1 sudo certbot --version Certbot 插件 nginx 使用 snap 安装的版本是已经含有 nginx 插件的\n申请方法如下\n新建一个 nginx 的配置文件\n1 sudo touch /etc/nginx/conf.d/abc.conf 编辑 abc.conf，填入以下模板，根据自己实际情况修改\n1 sudo vim /etc/nginx/conf.d/abc.conf 1 2 3 4 5 6 7 8 9 10 11 12 server { listen 80; server_name domain.com; location / { proxy_pass http://127.0.0.1:80; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } 使用 certbot 的 nginx 插件申请\n1 2 # 可以先查看哪些可以申请，是否列出了需要的域名 sudo certbot --nginx 申请前保证域名解析到当前的 ip\ncertbot-dns-dnspod 此插件用于托管在 dnspod 上的域名通过 dns 方式申请\ndns 的优势是可以申请泛域名证书，也就是像 *.seektao.cc这种\n1 2 3 sudo snap install certbot-dns-dnspod sudo snap set certbot trust-plugin-with-root=ok sudo snap connect certbot:plugin certbot-dns-dnspod 安装完成之后新建一个 .ini 文件，比如 /etc/certbot/dnspod.ini\n1 2 sudo mkdir /etc/certbot sudo touch /etc/certbot/dnspod.ini 编辑 dnspod.ini，填入下面的内容，点此跳转到 dnspod api 申请页面，注意申请的是 dnspod token\n1 2 dns_dnspod_api_id = xxxxxxx dns_dnspod_api_token = xxxxxxxxxxxxxbcdef 1 sudo chmod 600 /etc/certbot/dnspod.ini 申请证书的命令，需要替换为自己的域名\n1 2 3 4 5 6 7 8 9 10 11 sudo certbot certonly -a dns-dnspod \\ --dns-dnspod-credentials /etc/certbot/dnspod.ini \\ -d \u0026#34;*.yourdomain.com\u0026#34; 接着就是: 输入邮箱， 是否同意注册acme（选Y）， 是否同意发送邮件。。。 接着等待，等待。。就完成了 证书文件保存在 /etc/letsencrypt/live\n1 2 3 4 5 # 其中 [cert name]/privkey.pem：证书的私钥。 [cert name]/fullchain.pem：在大多数服务器软件中使用的证书文件。 [cert name]/chain.pem：在Nginx \u0026gt;=1.3.7 中用于 OCSP stapling。 [cert name]/cert.pem：会破坏许多服务器配置，不应在未进一步阅读文档的情况下使用。 用到 privkey.pem，fullchain.pem 即可。\ncertbot-dns-cloudflare 此插件用于托管在 cloudflare 上的域名通过 dns 方式申请\ndns 的优势是可以申请泛域名证书，也就是像 *.seektao.cc这种\n1 2 3 4 5 6 7 8 9 10 11 12 sudo snap install certbot-dns-cloudflare # 如果提示如下错误信息，输入：sudo snap set certbot trust-plugin-with-root=ok # 接着重新执行 sudo snap install certbot-dns-cloudflare error: cannot perform the following tasks: - Run hook prepare-plug-plugin of snap \u0026#34;certbot\u0026#34; (run hook \u0026#34;prepare-plug-plugin\u0026#34;: ----- Only connect this interface if you trust the plugin author to have root on the system. Run `snap set certbot trust-plugin-with-root=ok` to acknowledge this and then run this command again to perform the connection. If that doesn\u0026#39;t work, you may need to remove all certbot-dns-* plugins from the system, then try installing the certbot snap again. -----) 申请 api token，点此跳转\n在 /etc/certbot 新建 cloudflare.ini，将下面的值替换为自己申请的 api token\n1 2 # Cloudflare API token used by Certbot dns_cloudflare_api_token = xxxxxxxxxxxxxxxxx 修改权限\n1 sudo chmod 600 cloudflare.ini 申请证书的命令，需要替换为自己的域名\n1 2 3 4 sudo certbot certonly \\ --dns-cloudflare \\ --dns-cloudflare-credentials /etc/certbot/cloudflare.ini \\ -d \u0026#34;*.youdomain.com\u0026#34; certbot-dns-huawei（待续） 此插件用于托管在 huawei 上的域名通过 dns 方式申请\ndns 的优势是可以申请泛域名证书，也就是像 *.seektao.cc这种\n自动续期 自动续期添加一个定时任务即可\n1 2 3 4 5 # 设置定时任务 sudo crontab -e # 每月1号的午夜执行 certbot renew 命令来续订证书 0 0 1 * * /usr/local/bin/certbot renew 需要注意自己的 certbot 执行路径是否正确 which certbot 可以看到 certbot 执行路径\n一键脚本 经过上面的步骤，你会发现每新增一个服务，需要\n新增 nginx 配置文件 配置 nginx 文件 验证并重启 nginx 服务 这时候发现服务器每新增一个服务，就需要添加、修改 nginx 配置文件，域名和端口这些都需要修改，申请 ssl 证书，这些步骤相当麻烦。\n如果没有一个简单的 nginx 模板，则会更加复杂繁琐。基于以上需求，我编写了一个脚本。功能：配置好服务后，只需要一条命令即可完成 nginx 配置，并配置 ssl 证书\n命令为：\n1 脚本名称 域名 端口号 如果需要获取原文和脚本，关注公众号\u0026quot;寻道之旅\u0026quot;，发送\u0026quot;nginx\u0026quot;获取。\n","date":"2024-10-03T15:11:58+08:00","image":"https://s2.loli.net/2024/10/03/maziQBGhWpPJyVD.png","permalink":"https://hublog.netlify.app/p/241003151158/","title":"certbot申请SSL证书，自动续期，Nginx配置"},{"content":"进入 sqlite3 终端\nsqlite3 filename\n查看表\n.table\n清空表数据\nDELETE FROM table_name;\n备份 导出数据库到sql文件\n1 sqlite3 your_database_name.db .dump \u0026gt; your_output_file.sql ","date":"2024-10-02T08:08:30+08:00","permalink":"https://hublog.netlify.app/p/241002080830/","title":"sqlite基础"},{"content":"安装 安装指南：https://www.rust-lang.org/zh-CN/tools/install\nOn Unix, run curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh in your shell. This downloads and runs rustup-init.sh, which in turn downloads and runs the correct version of the rustup-init executable for your platform. On Windows, download and run rustup-init.exe. ","date":"2024-10-02T06:56:28+08:00","permalink":"https://hublog.netlify.app/p/241002065628/","title":"cargo安装"},{"content":"V2Ray 的更新策略是快速迭代，每周更新(无意外的情况下)。版本号的格式是 vX.Y.Z，如 v2.44.0。v 是固定的字母 v，version 的首字母；X、Y、Z 都是数字，X 是大版本号，每年更新一个大版本(现在是 v4.Y.Z，V2Ray 已经走到了第四个年头)，Y 是小版本，每周五更新一个小版本。Z 是区分正式版和测试版，Z 是 0 代表着是正式版，不是 0 说明是测试版。例如，v4.7.0 是正式版，v4.7.1 是测试版，建议只使用正式版，不手动指定的情况下 V2Ray 的安装脚本也只会安装最新的正式版。\n有些细心的朋友可能会注意到有时候周五 V2Ray 刚发布了一个新版本，次日或过两日又更新一个正式版。出现这种情况是因为周五发布的正式版出现了影响使用严重的 BUG，需要立马发布一个新版本。这种情况比较烦，但是为了保证兼容性、性能优化等又需要保证版本不要太老旧。所以我比较建议在周四更新，选这么一个日子是因为有重大的 BUG 肯定在前面几天就已经修复了，小问题(恐怕都不知道有)的话不会影响使用；而且版本号与最新版相比迟那么一两个也没什么关系。\n","date":"2024-10-02T04:21:32+08:00","permalink":"https://hublog.netlify.app/p/241002042132/","title":"版本号命名规则示例"},{"content":" 警告\n这是告诫! 请注意!\n信息\n这是引言\n提示\n这是小贴示\n注释\n这是注释\n源码：https://github.com/martignoni/hugo-notice\n","date":"2024-09-05T21:17:06+08:00","permalink":"https://hublog.netlify.app/p/240905211706/","title":"博客更新：新增模块 hugo-notice"},{"content":"刷机过程 略\n基本设置 灯 https://www.bilibili.com/read/cv21700714/\n玩客云这设备有个红、绿、蓝三色 led 灯，在刷入 armbian 系统以后，这个灯的颜色就会显示异常，往往是一直显示红色。\n如果要自动动手调整 led 灯的颜色，控制命令如下（需要 root 用户执行）\n1 2 3 echo 1 \u0026gt; /sys/class/leds/onecloud:blue:alive/brightness echo 1 \u0026gt; /sys/class/leds/onecloud:green:alive/brightness echo 1 \u0026gt; /sys/class/leds/onecloud:red:alive/brightness echo 1是开，echo 0就是关。现在可以组合出多种颜色，蓝绿、红蓝、红绿、红绿蓝。😄\n但这个设置重启后失效。╮(╯▽╰)╭\n静态 ip 查看当前网络连接信息\n1 nmcli connection show 设置静态 ip\n1 2 3 4 nmcli connection modify \u0026#34;Wired connection 1\u0026#34; ipv4.addresses 192.168.68.9/24 nmcli connection modify \u0026#34;Wired connection 1\u0026#34; ipv4.gateway 192.168.68.1 nmcli connection modify \u0026#34;Wired connection 1\u0026#34; ipv4.dns 223.5.5.5 nmcli connection modify \u0026#34;Wired connection 1\u0026#34; ipv4.method manual 重新启动网络连接：\n1 2 nmcli connection down \u0026#34;Wired connection 1\u0026#34; nmcli connection up \u0026#34;Wired connection 1\u0026#34; 检查网络配置，确保静态 IP 已成功应用：\n1 nmcli connection show \u0026#34;Wired connection 1\u0026#34; 应用 casaos 非必须不建议\n内存占用很大，没需求不建议安装\n一键安装脚本：\n1 wget -qO- https://get.casaos.io | bash casaos 商店源 https://play.cuse.eu.org/Cpe204-Appstore-play-arm.zip\n1panel 管理面板，替代 casaos，内存占用大约 50M，功能齐全\n界面预览：\n安装后系统占用对比\n安装前：\n安装后：\n一键安装脚本\n1 curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh \u0026amp;\u0026amp; bash quick_start.sh v2raya 代理工具，web 端，默认端口 2017，初次下载速度较慢，耐心等待。\n1 wget -qO - https://apt.v2raya.org/key/public-key.asc | sudo tee /etc/apt/keyrings/v2raya.asc 1 2 echo \u0026#34;deb [signed-by=/etc/apt/keyrings/v2raya.asc] https://apt.v2raya.org/ v2raya main\u0026#34; | sudo tee /etc/apt/sources.list.d/v2raya.list sudo apt update 1 sudo apt install v2raya v2ray ## 也可以使用 xray 包 alist 经典的网盘管理工具\n官网：https://alist.nn.ci/zh/\n源码：https://github.com/alist-org/alist\n二进制文件安装\n下载地址：v3.37.4/alist-linux-arm-7.tar.gz\n1 2 3 4 5 6 7 8 9 10 11 # 下载 mkdir -p /opt/alist wget https://github.com/alist-org/alist/releases/download/v3.37.4/alist-linux-arm-7.tar.gz tar -zxvf alist-linux-arm-7.tar.gz -C /opt/alist # 安装启动 cd /opt/alist chmod +x alist ./alist server # 启动会前台阻塞 # 新开一个终端设置密码 ./alist admin set 密码 安装服务\n1 2 # 安装服务 vim /usr/lib/systemd/system/alist.service 1 2 3 4 5 6 7 8 9 10 11 12 13 # 填入一下内容 [Unit] Description=alist After=network.target [Service] Type=simple WorkingDirectory=/opt/alist ExecStart=/opt/alist/alist server Restart=on-failure [Install] WantedBy=multi-user.target docker 安装\n1 docker run -d --restart=unless-stopped -v /opt/alist:/opt/alist/data -p 5245:5244 -e PUID=0 -e PGID=0 -e UMASK=022 --name=\u0026#34;alist\u0026#34; xhofe/alist-aria2:main docker-compose 安装\n1 2 3 sudo mkdir -p /opt/alist cd /opt/alist sudo vim docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 version: \u0026#39;3.3\u0026#39; services: alist: image: \u0026#39;xhofe/alist-aria2:latest\u0026#39; volumes: - \u0026#39;./data:/opt/alist/data\u0026#39; - \u0026#39;/home:/home\u0026#39; - \u0026#39;/root:/root\u0026#39; ports: - \u0026#39;5245:5244\u0026#39; environment: - PUID=0 - PGID=0 - UMASK=000 container_name: alist restart: unless-stopped 重置密码\n1 docker exec -it alist ./alist admin set \u0026lt;your_password\u0026gt; ddns-go ddns 神器，go 语言编写，内存占用低。\n源码：https://github.com/jeessy2/ddns-go\nwg-esay 异地组网工具 wireguard，wg-easy 是简化 wireguard 部署过程的开源项目，使用 docker 部署，简单快速上手。\nwireguard 是虚拟加密网络（VPN）,它可以使异地的设备组成一个局域网，换句话说就是可以在外地可以像在家中一样访问家中的设备，ip 地址都可以不变。\n源码：https://github.com/wg-easy/wg-easy\n部署\ndocker\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 docker run -d \\ --name=wg-easy \\ -e LANG=de \\ -e WG_HOST=\u0026lt;🚨YOUR_SERVER_IP\u0026gt; \\ -e PASSWORD_HASH=\u0026lt;🚨YOUR_ADMIN_PASSWORD_HASH\u0026gt; \\ -e PORT=51821 \\ -e WG_PORT=51820 \\ -v ~/.wg-easy:/etc/wireguard \\ -p 51820:51820/udp \\ -p 51821:51821/tcp \\ --cap-add=NET_ADMIN \\ --cap-add=SYS_MODULE \\ --sysctl=\u0026#34;net.ipv4.conf.all.src_valid_mark=1\u0026#34; \\ --sysctl=\u0026#34;net.ipv4.ip_forward=1\u0026#34; \\ --restart unless-stopped \\ ghcr.io/wg-easy/wg-easy docker-compose\n1 wget https://github.com/wg-easy/wg-easy/blob/master/docker-compose.yml 密码部分生成：\n1 docker run ghcr.io/wg-easy/wg-easy wgpw YOUR_PASSWORD 如果是 单个 $要改成 $$\n部署后请注意开放对应端口。\nlucky Lucky 最初是作为一个小工具，由开发者为自己的个人使用而开发，用于替代 socat，在小米路由 AX6000 官方系统上实现公网 IPv6 转内网 IPv4 的功能。Lucky 的设计始终致力于让更多的 Linux 嵌入式设备运行，以实现或集成个人用户常用功能，降低用户的硬件和软件操作学习成本，同时引导使用者注意网络安全。随着版本更新和网友反馈，Lucky 不断迭代改进，拥有更多功能和更好的性能，成为用户值得信赖的工具。\nLucky 的核心程序完全采用 Golang 实现，具有高效、稳定、跨平台等优点。其后台前端则采用 Vue3.2 技术进行开发，具有良好的用户体验和响应速度。此外，Lucky 的管理后台采用前后端分离的架构，第三方开发者也可以自由使用 OpenToken 轻松调用 Lucky 的各种功能接口。\n安装\n1 URL=\u0026#34;http://release.ilucky.net:66\u0026#34;; curl -o /tmp/install.sh \u0026#34;$URL/install.sh\u0026#34; \u0026amp;\u0026amp; sh /tmp/install.sh \u0026#34;$URL\u0026#34; ","date":"2024-09-02T18:09:19+08:00","permalink":"https://hublog.netlify.app/p/240902180979/","title":"玩客云onecloud刷机安装armbian系统，安装应用"},{"content":"设置 输入 变为高级模式\n录像\n编码器设置\nCBR（Constant Bit Rate，恒定码率）：\n码率在整个视频中保持不变。 优点：适合实时流媒体，确保带宽稳定，避免视频卡顿。 缺点：在复杂场景中可能导致画质下降，因为码率不随内容复杂度变化。 ABR（Average Bit Rate，平均码率）：\n码率在一定范围内波动，但保持一个平均值。 优点：在保证整体画质的同时，适应不同场景的复杂度。 缺点：可能在某些时刻出现瞬时的画质波动。 VBR（Variable Bit Rate，可变码率）：\n码率根据视频内容的复杂度动态调整。 优点：在复杂场景中使用更高的码率，简单场景中使用更低的码率，从而提高整体画质。 缺点：可能导致文件大小不稳定，不适合实时流媒体。 CRF（Constant Rate Factor，恒定质量因子）：\n主要用于视频编码（如使用 x264 编码器），通过设置一个质量因子来控制输出质量，而不是直接控制码率。 优点：可以保持高质量的同时，文件大小相对较小。质量因子通常在 0-51 之间，值越低，质量越高。 缺点：文件大小不固定，可能导致某些文件过大。 选择合适的码率控制方法取决于你的需求，例如直播的稳定性、录制的画质要求以及带宽条件。\n视频 常用帧率\n10 FPS：每秒显示10帧，适用于低流量视频。 20 FPS：每秒显示20帧，适用于简单的动画或低质量视频。 24 FPS：通常用于电影制作，提供较为平滑的视觉效果。 25 FPS：PAL制式（主要在欧洲和其他地区使用）的标准帧率。 29.97 FPS：NTSC制式（主要在北美和日本使用）的标准帧率，常用于电视广播。 30 FPS：在某些情况下使用，略高于29.97 FPS，适合网络视频。 34 FPS：不常见，可能用于特定应用或实验性视频。 48 FPS：用于高帧率电影，例如一些3D电影，以增强视觉体验。 50 FPS：PAL制式的高帧率，适合动作较快的内容。 59.94 FPS：接近60 FPS，主要用于高质量视频和游戏直播，提供流畅的画面。 60 FPS：高帧率，适合动作视频、游戏等，提供非常流畅的观看体验。 就我录制教学视频来说，一般情况下选择 30帧 即可，某些情况下转为 60 帧\n","date":"2024-09-01T10:09:09+08:00","permalink":"https://hublog.netlify.app/p/240901100943/","title":"OBS使用经验"},{"content":"关闭 http 自动转 https 访问\n地址栏输入 about:config 接受风险并继续 输入 network.stricttransportsecurity.preloadlist 切换为 false network.stricttransportsecurity.preloadlist：将其设置为 false，可以让 Firefox 不使用 HSTS 预加载列表，但这并不完全阻止 HSTS 的使用。\n","date":"2024-08-26T19:08:28+08:00","permalink":"https://hublog.netlify.app/p/240826190828/","title":"firefox个性化配置"},{"content":" 警告\n在使用 openwrt的一段时间，发现问题很多无法解决，遂刷成了 armbian\n综合 关闭防火墙 1 2 3 4 5 # 阻止防火墙服务开机自动启动 /etc/init.d/firewall disable # 关闭防火墙 /etc/init.d/firewall stop openwrt定时任务失效 要在 OpenWrt 系统开机后执行某个脚本，可以通过以下步骤实现：\n创建脚本 首先，创建你希望在开机时执行的脚本。例如，创建一个名为 myscript.sh 的脚本： 1 2 touch /usr/bin/myscript.sh chmod +x /usr/bin/myscript.sh 在脚本中添加你需要执行的命令：\n1 2 3 #!/bin/sh # your commands here echo \u0026#34;Script is running!\u0026#34; \u0026gt;\u0026gt; /tmp/myscript.log 编辑 /etc/init.d/ 目录 在 /etc/init.d/ 目录下创建一个启动脚本。可以命名为 myscript： 1 2 touch /etc/init.d/myscript chmod +x /etc/init.d/myscript 编辑启动脚本 用文本编辑器打开 /etc/init.d/myscript，并添加以下内容： 1 2 3 4 5 6 7 8 #!/bin/sh /etc/rc.common # This script will run at startup START=99 # Start order, higher means later start() { /usr/bin/myscript.sh } 启用启动脚本 使脚本在启动时自动运行： 1 /etc/init.d/myscript enable 重启系统 重启 OpenWrt 系统，确认脚本是否在开机时执行： 1 reboot 检查输出 重启后，可以检查日志文件 /tmp/myscript.log，确认脚本是否成功执行。 通过这些步骤，您可以确保在 OpenWrt 系统开机后自动执行指定的脚本。\n应用 alist 方式1：通过 软件包直接安装\n方式2：docker安装\n1 docker run -d --restart=unless-stopped -v /etc/alist:/opt/alist/data -p 5246:5244 -e PUID=0 -e PGID=0 -e UMASK=022 --name=\u0026#34;alist\u0026#34; xhofe/alist:latest ddns-go 1 docker run -d --name ddns-go --restart=unless-stopped --net=host -v /opt/ddns-go:/root jeessy/ddns-go -l :9877 -f 600 重置密码：\n1 docker exec -it alist ./alist admin set NEW_PASSWORD webhook plusplus 推送加\n钉钉\n1 2 3 4 5 6 7 { \u0026#34;msgtype\u0026#34;: \u0026#34;markdown\u0026#34;, \u0026#34;markdown\u0026#34;: { \u0026#34;title\u0026#34;: \u0026#34;你的公网IP变了\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;#### 你的公网IP变了 \\n - IPv4地址：#{ipv4Addr} \\n - 域名 #{ipv4Domains} 更新结果：#{ipv4Result} \\n\\n - IPv6地址：#{ipv6Addr} \\n - 域名 #{ipv6Domains} 更新结果：#{ipv6Result} \\n\u0026#34; } } homepage 1 2 3 4 5 6 7 8 docker run --name homepage \\ -e PUID=1000 \\ -e PGID=1000 \\ -p 8001:3000 \\ -v /etc/homepage:/app/config \\ -v /var/run/docker.sock:/var/run/docker.sock:ro \\ --restart unless-stopped \\ ghcr.io/gethomepage/homepage:latest 问题合集 openwrt重启丢失定时任务 版本：lanlan-op 11.25.2023 by 蓝蓝定制-可爱赞助用户 / LuCI Master git-24.322.44728-ebf6bee\n解决办法：删除 reboot包，系统-软件包-搜索过滤 reboot关键字，删除，重启，再编辑定时任务，再重启查看是否消失。\n","date":"2024-08-26T14:08:06+08:00","permalink":"https://hublog.netlify.app/p/240826140866/","title":"openwrt实践"},{"content":"简介 curl 是一个用于从命令行或脚本中与 URL 进行交互的工具。它支持多种协议，包括 HTTP、HTTPS、FTP、SFTP 等，广泛用于数据传输和网络请求。\n安装 在大多数 Linux 发行版中，curl 通常预装。你可以通过以下命令检查是否已安装：\n1 curl --version 如果未安装，可以使用包管理器进行安装：\nDebian/Ubuntu:\n1 sudo apt-get install curl CentOS/RHEL:\n1 sudo yum install curl macOS:\n1 brew install curl 基本用法 最简单的用法是直接跟上 URL，curl 会默认使用 GET 方法请求该 URL，并将其响应内容（通常是 HTML 或 JSON）打印到标准输出（你的终端屏幕上）。\n1 2 # 请求一个网页并显示其 HTML 内容 curl https://www.example.com 常见参数（按功能分类） 输出控制 (Output Control) 默认情况下，curl 将所有内容输出到屏幕。以下参数可以控制输出行为。\n-o, --output \u0026lt;file\u0026gt; 功能：将输出保存到指定的文件，而不是屏幕。 示例：curl -o page.html https://www.example.com -O, --remote-name 功能：将输出保存到文件，并以 URL 中指定的文件名来命名。 示例：curl -O https://curl.se/download/curl-7.85.0.tar.gz (会保存为 curl-7.85.0.tar.gz 文件) -s, --silent 功能：静默模式。不显示进度表或错误信息。非常适合在脚本中使用。 示例：cron_job_result=$(curl -s https://api.example.com/status) -i, --include 功能：在输出中包含 HTTP 响应头（Response Headers）。这对于调试非常有用。 示例：curl -i https://www.example.com -v, --verbose 功能：显示详细的通信过程，包括请求头、响应头和连接信息。是终极调试利器。 示例：curl -v https://api.example.com/data HTTP 请求方法 (HTTP Method) -X, --request \u0026lt;METHOD\u0026gt; 功能：指定要使用的 HTTP 请求方法，如 GET, POST, PUT, DELETE 等。默认是 GET。 示例： curl -X POST https://api.example.com/users curl -X DELETE https://api.example.com/users/123 发送数据 (Sending Data) 常用于 POST 或 PUT 请求。\n-d, --data \u0026lt;data\u0026gt; 功能：发送 HTTP POST 请求的数据。Content-Type 默认为 application/x-www-form-urlencoded。 示例 (发送表单数据)：curl -X POST -d \u0026quot;name=John\u0026amp;age=30\u0026quot; https://api.example.com/register 示例 (发送 JSON 数据)：需要配合 -H 指定 Content-Type。 curl -X POST -d '{\u0026quot;name\u0026quot;:\u0026quot;John\u0026quot;, \u0026quot;age\u0026quot;:30}' -H \u0026quot;Content-Type: application/json\u0026quot; https://api.example.com/users 从文件读取数据：curl -d @data.json -H \u0026quot;Content-Type: application/json\u0026quot; https://api.example.com/users (注意 @ 符号) -F, --form \u0026lt;name=content\u0026gt; 功能：发送 multipart/form-data 类型的数据，常用于文件上传。 示例 (上传文件)：curl -X POST -F \u0026quot;file=@/path/to/your/image.jpg\u0026quot; -F \u0026quot;username=dave\u0026quot; https://api.example.com/upload 自定义请求头 (Custom Headers) -H, --header \u0026lt;header\u0026gt; 功能：添加自定义的 HTTP 请求头。可以多次使用以添加多个头。 示例： 设置内容类型：curl -H \u0026quot;Content-Type: application/json\u0026quot; ... 设置认证 Token：curl -H \u0026quot;Authorization: Bearer your_jwt_token\u0026quot; https://api.example.com/secure-data 模拟浏览器：curl -H \u0026quot;User-Agent: Mozilla/5.0\u0026quot; https://www.example.com 安全与认证 (Security \u0026amp; Authentication) -u, --user \u0026lt;user:password\u0026gt; 功能：设置 HTTP Basic Authentication 的用户名和密码。 示例：curl -u admin:123456 https://api.example.com/admin -k, --insecure 功能：允许 curl 连接到没有有效 SSL/TLS 证书的 HTTPS 站点（例如，使用自签名证书的开发环境）。警告：请勿在生产环境中使用此选项！ 示例：curl -k https://localhost:8443 -L, --location 功能：自动跟踪 HTTP 重定向（响应状态码为 3xx）。很多网站会使用重定向，所以这是一个非常实用的参数。 示例：curl -L http://google.com (http 会重定向到 https) 连接控制 (Connection Control) --connect-timeout \u0026lt;seconds\u0026gt; 功能：设置建立连接的最大等待时间（秒）。 示例：curl --connect-timeout 5 https://api.example.com -m, --max-time \u0026lt;seconds\u0026gt; 功能：设置整个操作（连接、数据传输等）允许花费的最长时间。 示例：curl -m 10 https://api.example.com -x, --proxy \u0026lt;[protocol://]host[:port]\u0026gt; 功能：通过指定的代理服务器发送请求。 示例：curl -x http://proxyserver:8080 https://www.example.com 常用参数速查表 短参数 长参数 功能说明 -X --request 指定 HTTP 请求方法 (GET, POST, PUT, DELETE) -H --header 添加自定义请求头 (例如 Content-Type, Authorization) -d --data 发送 application/x-www-form-urlencoded 格式的数据 -F --form 发送 multipart/form-data 数据，常用于文件上传 -i --include 在输出中包含响应头 -v --verbose 显示详细的通信过程，用于调试 -o --output 将输出保存到指定文件 -O --remote-name 以远程文件名保存输出 -s --silent 静默模式，不显示进度和错误 -L --location 自动跟随 HTTP 重定向 -u --user 设置 HTTP 基本认证的用户名和密码 -k --insecure 忽略 SSL 证书验证 (慎用！) ","date":"2024-08-19T11:08:08+08:00","permalink":"https://hublog.netlify.app/p/240819110878/","title":"curl，命令行或脚本中与URL进行交互的工具"},{"content":"简介 开发人员可以在 Windows 计算机上同时访问 Windows 和 Linux 的强大功能。 借助适用于 Linux 的 Windows 子系统（WSL），开发人员可以安装 Linux 分发版（如 Ubuntu、OpenSUSE、Kali、Debian、Arch Linux 等），并在 Windows 上直接使用 Linux 应用程序、实用工具和 Bash 命令行工具（未经修改），无需传统虚拟机或双包设置的开销。\n官方文档：https://learn.microsoft.com/zh-cn/windows/wsl/\n先决条件 必须运行 Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11 才能使用以下命令。 如果使用的是早期版本，请参阅 手动安装页。\n安装 WSL 现在，可以使用单个命令安装运行 WSL 所需的所有内容。 右键单击并选择“以管理员身份运行”，在 管理员 模式下打开 PowerShell 或 Windows 命令提示符，输入 wsl \u0026ndash;install 命令，然后重新启动计算机。\n1 wsl --install 此命令将启用运行 WSL 并安装 Linux 的 Ubuntu 分发所需的功能。 （可以更改此默认分布）。\n如果运行的是较旧的版本，或者只是不想使用安装命令，并且想要分步说明，请参阅 适用于旧版本的 WSL 手动安装步骤。\n首次启动新安装的 Linux 分发版时，控制台窗口将打开，系统会要求你等待文件取消压缩并存储在计算机上。 所有未来的发射应该需要不到一秒钟的时间。\n更改安装的默认 Linux 分发版 默认情况下，已安装的 Linux 分发版将为 Ubuntu。 可以通过使用-d标志来更改这一点。\n若要更改安装的分发版，请输入： wsl --install -d \u0026lt;Distribution Name\u0026gt; 将 \u0026lt;Distribution Name\u0026gt; 替换为您想要安装的分发版名称。 若要查看可通过在线商店下载的可用 Linux 分发版的列表，请输入： wsl --list --online 或 wsl -l -o。 若要在初始安装后安装其他 Linux 分发版，也可以使用以下命令： wsl --install -d \u0026lt;Distribution Name\u0026gt; 如果要从 Linux/Bash 命令行（而不是 PowerShell 或命令提示符）安装其他分发版，则必须在命令中使用 .exe：或列出可用分发版： wsl.exe --install -d \u0026lt;Distribution Name\u0026gt;``wsl.exe -l -o\n如果在安装过程中遇到问题，请查看故障排除指南 安装部分。\n若要安装未列为可用的 Linux 分发版，可以使用 TAR 文件 导入任何 Linux 分发 版。 或者在某些情况下，与 Arch Linux 一样，可以使用文件进行安装 .appx 。 还可以创建自己的 自定义 Linux 分发版 ，以便与 WSL 一起使用。\n设置 Linux 用户信息 安装 WSL 后，需要为新安装的 Linux 分发版创建用户帐户和密码。 请参阅 设置 WSL 开发环境指南的最佳做法 ，了解详细信息。\n配置和最佳实践 建议遵循我们的 设置 WSL 开发环境的最佳实践 指南，通过逐步演示来了解如何为已安装的 Linux 发行版设置用户名和密码，使用基本 WSL 命令，安装和自定义 Windows 终端，为 Git 版本控制、代码编辑和调试使用 VS Code 远程服务器，好的文件存储实践，设置数据库，装载外部驱动器，设置 GPU 加速等。\n检查你正在运行的 WSL 的版本 可以通过在 PowerShell 或 Windows 命令提示符中输入命令 wsl -l -v 来列出已安装的 Linux 发行版，并检查每个发行版设置的 WSL 版本。\n若要在安装新的 Linux 分发版时将默认版本设置为 WSL 1 或 WSL 2，请使用以下命令 wsl --set-default-version \u0026lt;Version#\u0026gt;，替换为 \u0026lt;Version#\u0026gt; 1 或 2。\n要设置默认的 Linux 发行版以用于 wsl 命令，请输入：在 wsl -s \u0026lt;DistributionName\u0026gt; 或 wsl --set-default \u0026lt;DistributionName\u0026gt; 中将 \u0026lt;DistributionName\u0026gt; 替换为你想使用的 Linux 发行版名称。 例如，在 PowerShell/CMD 中，输入： wsl -s Debian 将默认分发设置为 Debian。 现在，从 Powershell 运行 wsl npm init 将在 Debian 中运行 npm init 命令。\n若要在不更改默认分发的情况下从 PowerShell 或 Windows 命令提示符内运行特定的 wsl 分发版，请使用以下命令： wsl -d \u0026lt;DistributionName\u0026gt;，替换为 \u0026lt;DistributionName\u0026gt; 要使用的分发的名称。\n在 WSL 基本命令指南中了解详细信息。\n将版本从 WSL 1 升级到 WSL 2 默认情况下，使用 wsl --install 命令安装的新 Linux 安装将设置为 WSL 2。\n该 wsl --set-version 命令可用于从 WSL 2 降级到 WSL 1，或将以前安装的 Linux 分发版从 WSL 1 降级到 WSL 2。\n若要查看 Linux 分发版是否设置为 WSL 1 或 WSL 2，请使用以下命令： wsl -l -v\n若要更改版本，请使用命令： wsl --set-version \u0026lt;distro name\u0026gt; 2 替换为 \u0026lt;distro name\u0026gt; 要更新的 Linux 分发版的名称。 例如， wsl --set-version Ubuntu-20.04 2 将 Ubuntu 20.04 分发版设置为使用 WSL 2。\n如果在命令可用之前 wsl --install 手动安装了 WSL，则还可能需要启用 WSL 2 使用的 虚拟机可选组件 ，并 安装内核包 （如果尚未这样做）。\n若要了解更多信息，请参阅 WSL 的命令参考以获取 WSL 命令列表，查看 WSL 1 和 WSL 2 的比较以获得关于您工作场景适用版本的指导，或参考 设置 WSL 开发环境的最佳实践以获取关于设置高效开发工作流程的一般指导。\n使用 WSL 运行多个 Linux 分发版的方法 WSL 支持运行您想安装的许多不同的 Linux 发行版。 这包括从 Microsoft 应用商店中选择分发版、 导入自定义分发版或 生成自己的自定义分发版。\n安装 Linux 分发版后，可通过多种方式运行：\n安装 Windows 终端（推荐）。使用 Windows 终端可以支持多个命令行，并允许您在多个选项卡或窗口窗格中打开它们，并能在多个 Linux 发行版或其他命令行（如 PowerShell、命令提示符、Azure CLI 等）之间快速切换。 可以使用独特的配色方案、字体样式、大小、背景图像和自定义键盘快捷方式完全自定义终端。 了解详细信息。 可以通过访问 Windows 开始菜单并键入已安装的分发版的名称来直接打开 Linux 分发版。 例如：“Ubuntu”。 这将在一个独立的控制台窗口中打开 Ubuntu。 在 Windows 命令提示符或 PowerShell 中，可以输入已安装的分发版的名称。 例如：ubuntu 在 Windows 命令提示符或 PowerShell 中，可以通过输入： wsl.exe在当前命令行中打开默认 Linux 分发版。 在 Windows 命令提示符或 PowerShell 中，可以通过输入：wsl [command]，在当前命令行中使用默认 Linux 分发版，而无需输入新发行版。 你可以用 [command] 替换为 WSL 命令，例如：wsl -l -v 列出已安装的发行版，或 wsl pwd 查看当前目录路径在 WSL 中装载的位置。 在 PowerShell 中，该命令 get-date 将提供 Windows 文件系统中的日期，并提供 wsl date Linux 文件系统中的日期。 选择的方法应取决于你正在做的事情。 如果已在 Windows 提示符或 PowerShell 窗口中打开 WSL 命令行并想要退出，请输入以下命令： exit\n参考文档\nhttps://geekdaxue.co/read/xiaoyulive@wsl/flwxn1\nhttps://learn.microsoft.com/zh-cn/windows/wsl/\n","date":"2024-08-18T21:08:41+08:00","permalink":"https://hublog.netlify.app/p/240818210841/","title":"Windows使用WSL安装Linux系统"},{"content":"LinuxMirrors 是一个 GNU/Linux 更换系统软件源脚本及 Docker 安装脚本\n官网：https://linuxmirrors.cn/ 源码：https://github.com/SuperManito/LinuxMirrors\n一键执行（推荐） 中国大陆（默认） 1 bash \u0026lt;(curl -sSL https://linuxmirrors.cn/main.sh) 中国大陆教育网 1 bash \u0026lt;(curl -sSL https://linuxmirrors.cn/main.sh) --edu 海外地区 1 bash \u0026lt;(curl -sSL https://linuxmirrors.cn/main.sh) --abroad 注意事项：\n需使用 ROOT 用户执行脚本 切换命令为 sudo -i 或 su root。不同系统使用的命令不同，因为有些系统没有在初始安装时为 ROOT 账户设置密码（例如 Ubuntu），故需要使用 sudo -i 命令来切换至 ROOT 建议使用 SSH 远程工具 如果你使用的系统终端界面无法正常显示中文内容那么将导致无法查看交互内容。部分系统会自动开启 SSH 服务，否则请参考启用方法 如果是在新系统上首次执行脚本 当前执行方式依赖 curl 指令获取脚本内容并执行，但部分操作系统没有预装此软件包，届时则会报错 Command not found，安装方法详见常见问题。还可自行复制源码至本地新建任意名称的 .sh 脚本，粘贴源码内容后通过 bash 指令手动执行 下载到本地执行 注意：切换为 root 用户\n1 sudo su - 1 curl -sSL https://linuxmirrors.cn/main.sh -o /usr/local/bin/changeMirrors.sh \u0026amp;\u0026amp; chmod +x /usr/local/bin/changeMirrors.sh 执行脚本\n1 changeMirrors.sh ","date":"2024-08-18T21:08:11+08:00","permalink":"https://hublog.netlify.app/p/240818210871/","title":"LinuxMirrors：一条命令实现各个Linux发行版软件镜像源更换"},{"content":"Bitwarden Gmail Voice v2rayNG SagerNet F-Droid K-9 Mail Telegram X Fluent Reader Orgzly Revived legaoPro Spotify Reex Firefox YouTube Pro Alook OKTV Emby Reqable 抓包软件\nRCX WireGuard Famd M3U8 DeepL YTDLnis Seal OKX pCloud ALCient Alist Github Speedtest LocalSend nPlayer Replit Termux flix Markor Authenticator Outlook Hiddify ChatGPT APKMirror Installer Oblivion PiliPalaX WhatsApp X Instagram Fackbook Lite Microsoft 365 1.1.1.1 TextNow Brave Tor Browser Pikpak ZArchiver Amap Yamby MoeMemos ConnectBot Termius Textr Go Nutstore VLC Spotube VMOS MT Manager 中国移动 RTranslator Dropbox ","date":"2024-08-15T17:08:02+08:00","permalink":"https://hublog.netlify.app/p/240815170896/","title":"手机软件清单-Mi11"},{"content":"在视频编码格式中，avc1、av01 和 vp09 的兼容性和播放支持情况如下：\navc1 (H.264)：\n兼容性非常好，几乎所有的设备和播放器都支持，通常不需要转码。 av01 (AV1)：\n逐渐获得支持，但仍然不如 H.264 广泛。某些较新的设备和浏览器支持 AV1，但老旧设备可能不支持，可能需要转码。 vp09 (VP9)：\n在许多现代浏览器（如 Chrome 和 Firefox）和设备上得到支持，尤其是在流媒体平台（如 YouTube）上，但某些旧设备可能不支持，可能需要转码。 最常用且通常不需要转码的：avc1 (H.264)。 可能需要转码的：av01 (AV1) 和 vp09 (VP9)，具体取决于播放设备的支持情况。\n不同视频编码格式对应的常见文件后缀如下：\navc1 (H.264)：\n常见后缀：.mp4, .mkv, .mov av01 (AV1)：\n常见后缀：.mp4, .mkv（有时可能会使用 .av1，但不太常见） vp09 (VP9)：\n常见后缀：.webm, .mkv 这些后缀虽然与编码格式相关，但实际文件格式可能包含多种编码，具体播放支持还需查看播放器的兼容性。\n音频编码格式对应的常见文件后缀如下：\nMP4 (MPEG-4 Part 14)：\n常见后缀：.mp4（可以包含多种音频编码） M4A (MPEG-4 Audio)：\n常见后缀：.m4a（通常使用 AAC 编码） Opus：\n常见后缀：.opus（专门用于 Opus 编码的音频文件） 音频格式中的 \u0026ldquo;drc\u0026rdquo; 通常表示 \u0026ldquo;Dynamic Range Compression\u0026rdquo;（动态范围压缩）。动态范围压缩是一种音频处理技术，旨在减小音频信号中最响和最静的部分之间的差异。通过压缩音频的动态范围，可以使安静的部分听起来更清晰，同时在不失真或过度饱和的情况下增加响亮部分的音量。 这些后缀与编码格式相关，具体的编码格式可能因文件而异。\n","date":"2024-08-04T22:08:45+08:00","image":"https://s2.loli.net/2024/08/04/Chm17KaLquFPU36.webp","permalink":"https://hublog.netlify.app/p/240804220845/","title":"视频编码格式选择和常见后缀，音频编码格式及后缀"},{"content":"简介 g 是管理 go 版本的工具，可以简化 go 的版本管理。\n源码：https://github.com/voidint/g\n安装 自动安装 Linux/MacOS 适用于 bash、zsh\n1 2 # 建议安装前清空`GOROOT`、`GOBIN`等环境变量 curl -sSL https://raw.githubusercontent.com/voidint/g/master/install.sh | bash 1 echo \u0026#34;unalias g\u0026#34; \u0026gt;\u0026gt; ~/.bashrc # 可选。若其他程序（如\u0026#39;git\u0026#39;）使用了\u0026#39;g\u0026#39;作为别名。 1 source \u0026#34;$HOME/.g/env\u0026#34; Windows 目前版本 1.7.0 经过测试有问题，请查看手动安装部分\n适用于 pwsh\n1 iwr https://raw.githubusercontent.com/voidint/g/master/install.ps1 -useb | iex 手动安装 Linux/macOS 创建 g 家目录（推荐~/.g目录）\n1 2 mkdir -p ~/.g \\ mkdir -p ~/.g/bin 下载 release 的二进制压缩包，并解压至 g 家目录下的 bin 子目录中（即~/.g/bin目录）\n1 2 3 wget https://github.com/voidint/g/releases/download/v1.7.0/g1.7.0.linux-amd64.tar.gz tar -zxvf g1.7.0.linux-amd64.tar.gz -C ~/.g/bin 将所需的环境变量写入~/.g/env文件\n1 2 3 4 5 6 7 cat \u0026gt;~/.g/env \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; #!/bin/sh # g shell setup export GOROOT=\u0026#34;${HOME}/.g/go\u0026#34; export PATH=\u0026#34;${HOME}/.g/bin:${GOROOT}/bin:$PATH\u0026#34; export G_MIRROR=https://golang.google.cn/dl/ EOF 将~/.g/env导入到 shell 环境配置文件（如~/.bashrc、~/.zshrc\u0026hellip;）\n1 2 3 4 5 6 cat \u0026gt;\u0026gt;~/.bashrc \u0026lt;\u0026lt;\u0026#39;EOF\u0026#39; # g shell setup if [ -f \u0026#34;${HOME}/.g/env\u0026#34; ]; then . \u0026#34;${HOME}/.g/env\u0026#34; fi EOF 刷新环境变量\n1 source ~/.bashrc # 或source ~/.zshrc Windows 创建目录 1 %USERPROFILE%/.g/bin 下载 g1.7.0.windows-amd64.zip 解压，放到%USERPROFILE%/.g/bin目录下 将 %USERPROFILE%/.g/bin添加到PATH环境变量 默认二进制文件名是 g.exe, 如果你已经用 g 这个命令已经用作为 git 的缩写，那么你可以把 g.exe 改为其他名字，如 gvm.exe\n除此之外，还需要配置 GOROOT 环境变量，表示 Go 的安装路径\n通过 g 安装的 go 安装路径为\n1 %USERPROFILE%/.g/go 基本用法 查询当前可供安装的 go 版本\n1 g lsr 查询当前可供安装的stable状态的 go 版本\n1 g ls-remote stable 安装指定 go 版本1.22.4\n1 g install 1.22.4 查询已安装的 go 版本\n1 g ls 使用已安装的 go 版本\n1 g use 1.19.10 卸载一个已安装的 go 版本\n1 g uninstall 1.19.10 清空 go 安装包文件缓存\n1 g clean 查看 g 版本信息\n1 g version 更新 g 软件本身\n1 g self update 卸载 g 软件本身\n1 g self uninstall 环境变量 环境变量G_MIRROR有什么作用？\n由于中国大陆无法自由访问 Golang 官网，导致查询及下载 go 版本都变得困难，因此可以通过该环境变量指定一个或多个镜像站点（多个镜像站点之间使用英文逗号分隔），g 将从该站点查询、下载可用的 go 版本。已知的可用镜像站点如下：\nGo 官方镜像站：https://golang.google.cn/dl/ 阿里云开源镜像站：https://mirrors.aliyun.com/golang/ 南京大学开源镜像站：https://mirrors.nju.edu.cn/golang/ 华中科技大学开源镜像站：https://mirrors.hust.edu.cn/golang/ 中国科学技术大学开源镜像站：https://mirrors.ustc.edu.cn/golang/ 环境变量G_EXPERIMENTAL有什么作用？\n当该环境变量的值为true时，将开启所有的实验特性。\n环境变量G_HOME有什么作用？\n按照惯例，g 默认会将~/.g目录作为其家目录。若想自定义家目录（Windows 用户需求强烈），可使用该环境变量切换到其他家目录。由于该特性还属于实验特性，需要先开启实验特性开关G_EXPERIMENTAL=true才能生效。特别注意，该方案并不十分完美，因此才将其归类为实验特性，详见#18。\n相似项目 gvm goenv ","date":"2024-08-03T13:08:35+08:00","image":"https://s2.loli.net/2024/08/03/Rmn1rsdL28pXM6t.jpg","permalink":"https://hublog.netlify.app/p/240803130835/","title":"g，Go的多版本管理工具"},{"content":"开启 ssh 密码登陆\n1 sudo sed -i \u0026#39;s/^#\\?PasswordAuthentication no/PasswordAuthentication yes/\u0026#39; /etc/ssh/sshd_config 重启 ssh\n1 sudo systemctl restart sshd root 用户远程登陆\n找到 PermitRootLogin ,修改为 PermitRootLogin yes\n1 sudo vim /etc/ssh/sshd_config 重启 ssh\n1 sudo systemctl restart sshd ","date":"2024-08-02T15:08:25+08:00","permalink":"https://hublog.netlify.app/p/240802150825/","title":"Linux开启ssh密码登陆，root用户远程登陆"},{"content":"方式一：SC ","date":"2024-08-01T17:08:46+08:00","permalink":"https://hublog.netlify.app/p/240801170846/","title":"Windows创建系统服务的方式"},{"content":"简单配置 可用于 certbot 申请 ssl 证书\n1 2 3 4 5 6 7 8 9 10 11 12 server { listen 80; server_name domain.com; location / { proxy_pass http://127.0.0.1:8080; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } ","date":"2024-07-29T15:07:06+08:00","permalink":"https://hublog.netlify.app/p/240729150766/","title":"Nginx模板"},{"content":"linux 参考这个 issuse：https://github.com/gaozhangmin/aliyunpan/issues/216\n进入小白杨配置，修改aria2.conf下的async-dns为true\n1 2 cd /opt/小白羊云盘/resources/engine sudo vim aria2.conf 或者一键命令\n1 sudo sed -i \u0026#39;s/async-dns=.*/async-dns=true/\u0026#39; /opt/小白羊云盘/resources/engine/aria2.conf ","date":"2024-07-25T15:07:52+08:00","image":"https://images.muzhe.eu.org/file/1af953e8432104b99561b.png","permalink":"https://hublog.netlify.app/p/2407025/","title":"小白羊盘下载文件出现aria2c错误解决办法"},{"content":"本篇将带你体验各平台观看影视的正确姿势\nWindows ZyPlayer ZyPlayer支持各大平台，Windows、Mac、Linux 系统，详细内容查看官方介绍。\n官方地址：https://github.com/Hiram-Wong/ZyPlayer\n界面预览\n接口下载：https://gitee.com/huanzi989/self-use\u0026mdash;tv-box/raw/master/zyplayer.json\n导入数据的方式：\n设置-基础配置-其他-数据管理-配置导入，选择上面的下载的接口导入\nAndroid OK影视/FongMi https://github.com/FongMi/Release\n官方已列举需要下载的软件，下载对应的版本即可\n接口下载：\nFilmly 网易云出品的影视播放器，目前对接了阿里云盘和百度云盘。\n有安卓、TV、IOS\nhttp://filmly.163.com/\n预览：\nTV OK影视/FongMi 请查看Android下的OK影视/FongMi介绍\nFilmly 请查看Android下的filmly介绍\nLinux ZyPlayer 请查看Windows下的ZyPlayer介绍\n","date":"2024-07-24T15:07:52+08:00","permalink":"https://hublog.netlify.app/p/2407024/","title":"各平台影视观看指南"},{"content":"Debian/Ubuntu 运行这个命令后重启软件\n1 2 sudo apt install linux-headers-$(uname -r) -y ","date":"2024-07-22T15:07:51+08:00","permalink":"https://hublog.netlify.app/p/2407022/","title":"VMware在Linux运行出现VMWare Kernel Module Updater"},{"content":" Ctrl+Shift+P调出命令面板\n输入install 调出 Install Package 选项并回车（第一次需要安装install，安装完成后重复步骤1,2），\n输入sftp，回车安装\nSFTP/FTP按钮位置：\nFile-SFTP/FTP 配置的信息\n配置文件所在的位置\nWindows： Linux：~/.config/sublime-text/Packages/User/sftp_servers 必须将配置文件放在这个位置才能被识别，Windows默认保存的位置即可，Linux需要手动跳转到该目录\n","date":"2024-07-21T15:07:50+08:00","permalink":"https://hublog.netlify.app/p/2407021/","title":"Sublime配置SFTP"},{"content":"简介 rclone 是一个强大的命令行工具，旨在管理和同步文件到多种云存储服务及本地文件系统。它支持超过 70 种不同的云存储提供商，如 Google Drive、Dropbox、Amazon S3、OneDrive 等。\n官网地址：https://rclone.org\n主要特点 多种存储支持：支持超过 70 种不同的云存储服务。 文件同步：可以在本地和云之间同步文件或文件夹。 加密功能：支持文件加密，确保数据安全。 增量备份：只同步变化的文件，节省时间和带宽。 跨平台：可以在 Windows、macOS 和 Linux 上运行。 脚本自动化：可以通过脚本实现定期备份和同步。 安装 Linux / macOS / BSD 在 Linux/macOS/BSD 系统上安装 rclone，可以运行以下命令：\n1 sudo -v ; curl https://rclone.org/install.sh | sudo bash 若要安装测试版，可以运行：\n1 sudo -v ; curl https://rclone.org/install.sh | sudo bash -s beta Windows 下载地址：\n点击下载：Windows AMD64 v1.68.2 解压文件，将rclone所在的目录添加到PATH环境变量，即可在终端任意位置运行 rclone命令\n配置远程存储 首次使用 rclone 时，需要配置远程存储。执行以下命令并根据提示操作：\n1 rclone config 配置文件所在的位置：\nLinux\n1 ~/.config/rclone/rclone.conf Windows\n1 %USERPROFILE%\\AppData\\Roaming\\rclone\\rclone.conf 如果第一次安装没有配置文件和对应的路径，运行 rclone config退出就会自动创建，不过文件内容为空\n命令补全 rclone 含有命令补全，输入 rclone按住 tab 键可以自动帮我们补全远程存储中的路径，如果没有这个功能，需要手动输入路径，可以尝试使用如下方法开启命令补全\n安装 bash-completion\n1 2 3 4 5 6 7 sudo apt update # Debian/Ubuntu sudo apt install bash-completion sudo yum update # CentOS/RHEL/Fedora sudo yum install bash-completion sudo pacman -S bash-completion # Arch Linux/Manjaro 开启补全功能\n1 2 sudo rclone genautocomplete bash | sudo tee /etc/bash_completion.d/rclone source /etc/bash_completion.d/rclone 再次尝试 rclone 命令，输入，使用 tab 键查看是否有补全\n1 rclone lsd remote:/ 基本用法 rclone的语法结构：\n1 rclone \u0026lt;命令\u0026gt; [参数] \u0026lt;源路径\u0026gt; \u0026lt;目标路径\u0026gt; 命令：rclone支持的命令，可以通过 https://rclone.org/commands/查看所有支持的命令 参数：命令支持的参数，参考对应的命令 源路径：顾名思义 目标路径：顾名思义 额外说明，为了区分本地路径和远程路径，使用远程路径需要使用 name:path\nname：rclone配置远程存储时起的名字 path：配置的远程存储的路径 比如：\n查看远程存储的文件列表（假设已经创建了一个名为 jianguoyun的远程存储）\n1 rclone lsd jianguoyun:/ 复制 将文件从源位置复制到目标位置，根据文件大小、修改时间或 MD5SUM 判断跳过相同的文件\n语法：\n1 rclone copy source:sourcepath dest:destpath -P 参数：\n-P：查看具体信息 复制亦可当作备份使用，不会删除远程文件\n本地复制到远程存储 案例：本地 software 文件夹复制到 alist 下的 aliyunpan/software\n1 rclone copy ~/software alist:/aliyunpan/software -P 远程存储 a 复制到远程存储 b 某些云盘支持秒传，可以快速将一个云盘文件内容复制到另一个云盘。rclone 使用 copy 复制也是支持的。\n有些云盘上传单个文件大小有限制，例如 115 原石会员最大支持单个文件 5G，超过该大小即使支持秒传也无法使用。为了秒传的可用性，可以添加 --max-size 参数跳过超大的文件，例如 --max-size 500M 跳过超过 500M 的文件。\n案例：alist 挂载的 aliyunpan/infotech 复制到 alist 挂载的 115/infotech，并跳过超过 500M 的文件\n1 vim ~/bin/rclone_copy_from_local_software_to_alist_aliyunpan_software.sh 1 rclone copy alist:aliyunpan/infotech/ alist:115/infotech/ --max-size 500M -P 1 chmod +x ~/bin/rclone_copy_from_local_software_to_alist_aliyunpan_software.sh 定时备份/复制 Tips：复制可当作备份使用，写入到脚本文件，定时任务执行脚本即可\n挂载 将远程存储挂载到本地，作为本地文件系统使用，支持本地播放视频、打开文件，编辑文件等操作\n注意：Windows 平台挂载需要额外安装 winfsp，且默认路径不存在\n语法：\n1 rclone mount remote:path/to/files /path/to/local/mount 参数：\n--buffer-size：在传输文件时，读取和写入操作的缓冲区大小，默认不清楚，建议挂载加上，大小 4M --vfs-cache-mode：缓存模式，可选 off（默认），writes，full --vfs-cache-max-size：限制 VFS 缓存的最大大小，默认无限制 --vfs-cache-max-age：限制缓存文件的最大存活时间，默认 1 小时 --daemon：后台挂载，Windows 不支持 --volname：挂载名字，Windows 平台 取消挂载\n1 fusermount -u 挂载路径 远程存储挂载到本地 案例：坚果云挂载到 $HOME/mnt/jianguoyun\n创建挂载点\n1 mkdir -p $HOME/mnt/jianguoyun 前台挂载（退出终端挂载会取消）\n1 rclone mount --buffer-size 4M --vfs-cache-mode writes jianguoyun: $HOME/mnt/jianguoyun 后台挂载\n1 rclone mount --buffer-size 4M --vfs-cache-mode writes jianguoyun: $HOME/mnt/jianguoyun --daemon 取消挂载\n1 fusermount -u $HOME/mnt/jianguoyun 案例：alist挂载到本地 $HOME/mnt/alist\n1 mkdir -p $HOME/mnt/alist 前台挂载\n1 rclone mount --buffer-size 4M --vfs-cache-mode writes alist: $HOME/mnt/alist 后台挂载\n1 rclone mount --buffer-size 4M --vfs-cache-mode writes alist: $HOME/mnt/alist --daemon 取消挂载\n1 fusermount -u $HOME/mnt/alist 案例：windows 挂载 alist film 路径到本地驱动器 K\n1 rclone mount alist:/film K: --buffer-size 4M --vfs-cache-mode writes --vfs-cache-max-size 2G --volname alist_127.0.0.1_film --network-mode 开机自动挂载 借助定时任务实现或者创建系统服务\n案例：开机挂载 alist\n1 crontab -e 1 @reboot rclone mount --buffer-size 4M --vfs-cache-mode writes alist: $HOME/mnt/alist --daemon 单向同步 将 源路径 文件同步到 目的路径，会 删除目的路径文件\n如果只是需要备份文件，使用 复制\n语法：\n1 rclone sync --interactive SOURCE remote:DESTINATION 这可能导致数据丢失，首先使用 --dry-run 或 --interactive/-i 进行测试。\n远程存储同步到本地 案例：坚果云同步文件到本地\n1 rclone sync jianguoyun:/ $HOME/jianguoyun 本地同步到远程存储 案例：本地同步文件到坚果云\n1 rclone sync $HOME/jianguoyun jianguoyun:/ 双向同步 语法：\n1 rclone bisync remote1:path1 remote2:path2 [flags] 暂处于测试阶段，不建议使用！！\nWeb UI rclone 提供了 Web UI 界面：\n1 rclone rcd --rc-web-gui 此命令会从 GitHub 下载 UI 文件，因此需要能够访问 GitHub。\n其他命令 列出所有已经配置的远程存储名字\n1 rclone listremotes 查看特定远程存储的配置详情\n1 rclone config show \u0026lt;remote_name\u0026gt; 查看所有远程存储的详情，以json格式输出\n1 rclone config dump 小技巧 只创建相同目录结构 将目标位置拥有原位置同样的目录结构，保持目录结构的一致\n1 rclone copy source:/path dest:/path --filter \u0026#34;+ */\u0026#34; --filter \u0026#34;- *\u0026#34; --progress source:/path：源路径 dest:/path：远程目录 ","date":"2024-07-20T15:07:50+08:00","image":"https://s2.loli.net/2024/08/06/IyYvUsDeqloum4M.webp","permalink":"https://hublog.netlify.app/p/2407020/","title":"rclone，统一管理、备份，同步文件，文件夹到多种云存储平台"},{"content":"先看看pmail服务器端口的配置：\n1 2 3 4 5 6 7 8 9 HttpServer Start On Port :80 POP3 With TLS Server Start On Port :995 Smtp Server Port: :25 POP3 Server Start On Port :110 Smtp With SSL Server Port: :465 SMTP 服务器地址：部署的pmail地址 端口：465 账户：邮箱地址 发送者邮箱：通常和邮箱地址一致 访问凭证：登陆账户密码 ","date":"2024-07-16T15:07:47+08:00","permalink":"https://hublog.netlify.app/p/2407016/","title":"PMail配置SMTP，POP客户端"},{"content":"简介 一个现代化的 GUI 视频和音频下载器，支持数百个网站\nGitHub 源码：https://github.com/aandrew-me/ytDownloader\n特性 ✅ 支持数百个网站，包括 Youtube、Facebook、Instagram、Tiktok、Twitter 等等。\n✅ 多种主题\n✅ 带有硬件加速的视频压缩器\n✅ 高级选项，例如范围选择、字幕\n✅ 下载播放列表\n✅ 适用于 Linux、Windows、Freebsd 和 macOS\n✅ 快速的下载速度\n✅ 当然，没有追踪器或广告\n预览 安装 Windows 安装包 https://github.com/aandrew-me/ytDownloader/releases/download/v3.19.0/YTDownloader_Win.exe\nWinget 1 winget install aandrew-me.ytDownloader Chocolatey 1 choco install ytdownloader Scoop 1 scoop install https://raw.githubusercontent.com/aandrew-me/ytDownloader/main/ytdownloader.json Linux 对应发行版打包文件 https://github.com/aandrew-me/ytDownloader/releases/tag/v3.19.0\nArchlinux 1 paru -S ytdownloader-gui Flatpak 1 flatpak install flathub io.github.aandrew_me.ytdn Snapcraft 1 sudo snap install ytdownloader MacOS 由于该应用未签名，当你尝试打开它时，macOS 将不允许你打开。 因此，你需要按照以下步骤打开它。\n点击 Mac Dock 上的“系统偏好设置”。 选择“安全性与隐私”。 该应用会显示在那里。 点击“打开”。 在 macOS 14.5 Sonoma 上，你需要打开终端并手动添加：\n1 sudo xattr -r -d com.apple.quarantine /Applications/YTDownloader.app 你还需要安装 Python 3.8 或更高版本。\n","date":"2024-07-16T14:07:50+08:00","permalink":"https://hublog.netlify.app/p/2407026/","title":"ytDownloader，现代化的 GUI 视频和音频下载器"},{"content":"介绍 One API 是一个 LLM API 接口管理和分发系统，可以帮助您更好地管理和使用各大厂商的 LLM API。\n通过标准的 OpenAI API 格式访问所有的大模型，开箱即用\n源码：https://github.com/songquanpeng/one-api\n部署 docker 1 2 3 4 5 # 使用 SQLite 的部署命令： docker run --name one-api -d --restart always -p 3000:3000 -e TZ=Asia/Shanghai -v /home/ubuntu/data/one-api:/data justsong/one-api # 使用 MySQL 的部署命令，在上面的基础上添加 `-e SQL_DSN=\u0026#34;root:123456@tcp(localhost:3306)/oneapi\u0026#34;`，请自行修改数据库连接参数，不清楚如何修改请参见下面环境变量一节。 # 例如： docker run --name one-api -d --restart always -p 3000:3000 -e SQL_DSN=\u0026#34;root:123456@tcp(localhost:3306)/oneapi\u0026#34; -e TZ=Asia/Shanghai -v /home/ubuntu/data/one-api:/data justsong/one-api docker-compose 1 2 3 4 5 6 7 8 9 10 11 12 version: \u0026#39;3.9\u0026#39; services: one-api: image: justsong/one-api volumes: - \u0026#39;./data:/data\u0026#39; environment: - TZ=Asia/Shanghai ports: - \u0026#39;3000:3000\u0026#39; restart: unless-stopped container_name: one-api 初始账号用户名为 root，密码为 123456。\n","date":"2024-07-15T23:07:42+08:00","permalink":"https://hublog.netlify.app/p/2407015/","title":"one-api，一个 LLM API 接口管理和分发系统，可以帮助您更好地管理和使用各大厂商的 LLM API"},{"content":"解压缩 tar tar (Tape Archive) 是一个 Linux/Unix 系统中常用的归档工具，用于将多个文件和目录打包成一个单独的文件，通常称为 \u0026ldquo;tarball\u0026rdquo; 文件。 它本身并不压缩文件，只是将多个文件打包在一起。\n主要功能：\n归档 (Archiving): 将多个文件和目录合并成一个单一的归档文件。 备份 (Backup): 创建文件系统的备份。 传输 (Transmission): 方便地传输一组文件。 常见参数：\n-t (或 \u0026ndash;list): 列出归档文件中的内容。 -z (或 \u0026ndash;gzip, \u0026ndash;gunzip, \u0026ndash;ungzip): 使用 gzip 解压归档文件。 -v (或 \u0026ndash;verbose): 显示详细信息，包括文件名、大小、权限等。 -f (或 \u0026ndash;file=ARCHIVE): 指定要操作的归档文件名。 必须紧跟文件名。 挂载 设备信息 查看块设备信息\n1 lsblk -f 或 --fs: 显示文件系统信息，例如文件系统类型和 UUID。 -m 或 --perms: 显示设备的所有权和权限。 -o 或 --output \u0026lt;list\u0026gt;: 指定要显示的列的列表。 例如，lsblk -o NAME,SIZE,FSTYPE,MOUNTPOINT。 lsblk 命令的默认输出通常包含以下列：\nNAME: 块设备的名称 (例如，sda, sdb1, nvme0n1). MAJ:MIN: 主设备号和次设备号。 RM: 是否是可移动设备 (1 表示是，0 表示否)。 SIZE: 设备的大小。 RO: 是否是只读设备 (1 表示是，0 表示否)。 TYPE: 设备类型 (例如，disk, part, lvm, raid). MOUNTPOINT: 设备的挂载点 (如果已挂载)。 挂载 1 mount block_path mount_path -t：指定挂载设备文件系统类型 -o：指定文件系统特定的挂载选项。 这些选项以逗号分隔的键值对形式传递给 mount 命令 示例：\n挂载 /dev/sda1 到 /mnt/p1，指定文件格式为 exfat，umask 权限为 000，表示其他用户可读可写\n1 sudo mount -t exfat -o umask=000 /dev/sda1 /mnt/p1 挂载 SMB（Server Message Block，也称为 Windows 共享）\n1 2 sudo apt update # Debian/Ubuntu sudo apt install cifs-utils 其他发行版\n1 2 3 sudo yum install cifs-utils # CentOS/RHEL/Fedora sudo dnf install cifs-utils # Fedora (newer) sudo zypper install cifs-utils # openSUSE 1 2 3 4 # 创建挂载点：创建一个本地目录，用作 SMB 共享的挂载点。 sudo mkdir /mnt/smb_share # 挂载 sudo mount -t cifs //服务器IP/共享名称 /mnt/smb_share -o username=用户名,password=密码 sudo: 需要管理员权限才能挂载文件系统。 mount: 挂载命令。 -t cifs: 指定文件系统类型为 cifs（通用 Internet 文件系统），这是用于 SMB 共享的 Linux 文件系统类型。 //服务器IP/共享名称: SMB 共享的网络路径。 服务器IP: Windows 服务器或 NAS 设备的 IP 地址。 也可以使用主机名，但确保主机名可以被解析（例如，通过 DNS 或 /etc/hosts 文件）。 共享名称: 在 Windows 服务器或 NAS 上共享的文件夹的名称。 /mnt/smb_share: 本地挂载点（你之前创建的目录）。 -o username=用户名,password=密码: 挂载选项。 username=用户名: 用于访问 SMB 共享的 Windows 用户名。 password=密码: Windows 用户的密码。 取消挂载 1 umount mount_path 示例：\n取消挂载/mnt/p1\n1 umount /mnt/p1 统计目录大小 使用 du 命令查看当前目录下所有子目录的大小，并只显示当前目录的大小\n1 du -sh * 显示当前目录的大小，忽略没有权限的文件夹和文件，并显示隐藏的文件夹和文件\n1 du -sh .[^.]* * 2\u0026gt;/dev/null 显示当前隐藏目录和文件的大小，忽略没有权限的文件夹和文件\n1 du -sh .[^.]* 2\u0026gt;/dev/null 删除除了 cgi-bin 目录之外的所有文件和目录（包括子目录） 对于文件：\n1 find . -type f -not -path \u0026#39;*/cgi-bin/*\u0026#39; -exec rm -f {} + 对于目录：\n1 find . -mindepth 1 -type d -not -path \u0026#39;*/cgi-bin\u0026#39; -exec rm -rf {} + 反向传参 xargs 默认会将标准输入的内容作为参数追加到指定的命令后面。 \u0026ldquo;反向传参\u0026rdquo; 通常指的是将标准输入的内容作为命令的前缀，而不是后缀。 xargs 本身并不直接支持这种反向传参的方式，但可以通过一些技巧来实现。\n","date":"2024-07-14T13:07:10+08:00","permalink":"https://hublog.netlify.app/p/linux-guide/","title":"Linux指南"},{"content":"简介 AI 模型接口管理与分发系统，支持将多种大模型转为统一格式调用，支持 OpenAI、Claude 等格式，可供个人或者企业内部管理与分发渠道使用，基于 One API 二次开发。\n特性 New API 提供了丰富的功能，详细特性请参考特性说明：\n🎨 全新的 UI 界面 🌍 多语言支持 💰 支持在线充值功能（易支付） 🔍 支持用 key 查询使用额度（配合neko-api-key-tool） 🔄 兼容原版 One API 的数据库 💵 支持模型按次数收费 ⚖️ 支持渠道加权随机 📈 数据看板（控制台） 🔒 令牌分组、模型限制 🤖 支持更多授权登陆方式（LinuxDO,Telegram、OIDC） 🔄 支持 Rerank 模型（Cohere 和 Jina），接口文档 ⚡ 支持 OpenAI Realtime API（包括 Azure 渠道），接口文档 ⚡ 支持 Claude Messages 格式，接口文档 支持使用路由/chat2link 进入聊天界面 🧠 支持通过模型名称后缀设置 reasoning effort： OpenAI o 系列模型 添加后缀 -high 设置为 high reasoning effort (例如: o3-mini-high) 添加后缀 -medium 设置为 medium reasoning effort (例如: o3-mini-medium) 添加后缀 -low 设置为 low reasoning effort (例如: o3-mini-low) Claude 思考模型 添加后缀 -thinking 启用思考模式 (例如: claude-3-7-sonnet-20250219-thinking) 🔄 思考转内容功能 🔄 针对用户的模型限流功能 💰 缓存计费支持，开启后可以在缓存命中时按照设定的比例计费： 在 系统设置-运营设置 中设置 提示缓存倍率 选项 在渠道中设置 提示缓存倍率，范围 0-1，例如设置为 0.5 表示缓存命中时按照 50% 计费 支持的渠道： OpenAI Azure DeepSeek Claude 部署 docker 1 sudo docker run --name new-api -d --restart always -p 3000:3000 -e TZ=Asia/Shanghai -v /home/ubuntu/data/new-api:/data calciumion/new-api:latest docker-compose 1 sudo mkdir -p /opt/new-api 1 2 cd /opt/new-api sudo vim /opt/new-api/docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 version: \u0026#39;3.9\u0026#39; services: new-api: image: \u0026#39;calciumion/new-api:latest\u0026#39; volumes: - \u0026#39;./data:/data\u0026#39; environment: - TZ=Asia/Shanghai ports: - \u0026#39;3000:3000\u0026#39; restart: unless-stopped container_name: new-api 启动\n1 sudo docker compose up 反向代理 Nginx 模板\n1 2 3 4 5 6 7 8 9 10 11 12 server { listen 80; server_name domain.com; location / { proxy_pass http://127.0.0.1:3000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } ","date":"2024-07-13T23:07:42+08:00","permalink":"https://hublog.netlify.app/p/2407013/","title":"new-api，基于one-api修改的LLM接口管理和分发系统"},{"content":"简介 全新的高颜值/高性能的 AI 模型接口管理与分发系统，仅供个人学习使用，请勿用于任何商业用途，本项目基于 NewAPI 开发。A brand new high aesthetic/high-performance AI model interface management and distribution system is only for personal or internal management and distribution channels of enterprises. Please do not use it for commercial purposes.\n部署 docker docker-compose 1 sudo mkdir -p /opt/voapi 1 2 cd /opt/new-api sudo vim /opt/voapi/docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 version: \u0026#39;3.4\u0026#39; services: voapi: image: voapi/voapi:latest container_name: voapi restart: always command: --log-dir /app/logs ports: - \u0026#34;3000:3000\u0026#34; volumes: - ./data:/data - ./logs:/app/logs extra_hosts: - \u0026#34;host.docker.internal:host-gateway\u0026#34; environment: - SQL_DSN=root:123456@tcp(host.docker.internal:3306)/voapi?charset=utf8mb4\u0026amp;parseTime=True\u0026amp;loc=Local # 修改此行，或注释掉以使用 SQLite 作为数据库 - REDIS_CONN_STRING=redis://redis - SESSION_SECRET=random_string # 启动前必须手动修改此值为随机字符串 - TZ=Asia/Shanghai depends_on: - redis healthcheck: test: [ \u0026#34;CMD-SHELL\u0026#34;, \u0026#34;wget -q -O - http://localhost:3000/api/status | grep -o \u0026#39;\\\u0026#34;success\\\u0026#34;:\\\\s*true\u0026#39; | awk -F: \u0026#39;{print $2}\u0026#39;\u0026#34; ] interval: 30s timeout: 10s retries: 3 redis: image: redis:latest container_name: redis restart: always 启动\n1 sudo docker compose up 反向代理 Nginx 模板\n1 2 3 4 5 6 7 8 9 10 11 12 server { listen 80; server_name domain.com; location / { proxy_pass http://127.0.0.1:3000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } ","date":"2024-07-13T23:07:42+08:00","permalink":"https://hublog.netlify.app/p/2407013/","title":"new-api，基于one-api修改的LLM接口管理和分发系统"},{"content":"Linux发行版众多，而有些软件并没有提供对应发行版的扩展安装包，导致开始菜单图标/全局搜索/桌面图标需要手动配置，而这些配置文件需要用到的时候又容易忘记配置文件位置和手动编写配置文件繁琐。\n本文就记录一下Linux下没有提供发行版对应的文件扩展名（.deb，.rpm）的安装包怎么配置开始菜单/全局搜索/桌面图标\nDebian 配置文件的位置：\n个人用户：~/.local/share/applications 全局配置：/usr/share/applications ","date":"2024-07-13T19:07:28+08:00","permalink":"https://hublog.netlify.app/p/linux-start-menu/","title":"Linux配置开始菜单，全局搜索，桌面图标"},{"content":" 源码：https://github.com/neovim/neovim\n安装 Linux/MacOS 最新版本\n1 2 3 curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz sudo rm -rf /opt/nvim sudo tar -zxvf nvim-linux-x86_64.tar.gz -C /opt/ 指定版本\n1 2 3 curl -LO https://github.com/neovim/neovim/releases/download/v0.10.0/nvim-linux-x86_64.tar.gz sudo rm -rf /opt/nvim sudo tar -zxvf nvim-linux-x86_64.tar.gz -C /opt/ 配置环境变量\n1 2 echo \u0026#39;export PATH=\u0026#34;$PATH:/opt/nvim-linux-x86_64/bin\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc source ~/.bashrc Windows Windows 8+ is required. Windows 7 or older is not supported.\n下载https://github.com/neovim/neovim/releases/latest/download/nvim-win64.msi\nWinget\nRelease：winget install Neovim.Neovim Chocolatey\nLatest Release: choco install neovim (use -y for automatically skipping confirmation messages) Development (pre-release): choco install neovim --pre 插件 https://github.com/wbthomason/packer.nvim\n主题 https://github.com/folke/tokyonight.nvim\nhttps://github.com/nvim-lualine/lualine.nvim\n","date":"2024-07-12T23:07:42+08:00","permalink":"https://hublog.netlify.app/p/2407012/","title":"Neovim安装配置"},{"content":" 官方文档：https://www.lunarvim.org/docs/installation\n前置条件 Make sure you have installed the latest version of Neovim v0.9.0+. Have git, make, pip, python, npm, node, cargo and ripgrep installed on your system. Resolve EACCES permissions when installing packages globally to avoid error when installing packages with npm. PowerShell 7+ (for Windows). 安装 Linux/MacOS： 1 bash \u0026lt;(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/master/utils/installer/install.sh) Windows 1 pwsh -c \u0026#34;iwr https://raw.githubusercontent.com/LunarVim/LunarVim/master/utils/installer/install.ps1 -UseBasicParsing | iex\u0026#34; ","date":"2024-07-11T23:07:42+08:00","permalink":"https://hublog.netlify.app/p/2407011/","title":"lunarvim，开箱即用的neovim"},{"content":"软件：howdy\n地址：https://github.com/boltgolt/howdy\nDebian系列建议使用\n","date":"2024-07-10T23:07:42+08:00","permalink":"https://hublog.netlify.app/p/2407010/","title":"Linux开启人脸登录（待续）"},{"content":"介绍 下载地址 文档地址 安装 创建文件夹并解压\n1 2 sudo mkdir /opt/QtScrcpy sudo unzip QtScrcpy-ubuntu-22.04-gcc_64.zip -d /opt/QtScrcpy/ 创建软连接\n1 sudo ln -s /opt/QtScrcpy/output/x64/Release/QtScrcpy /usr/bin/qtscrcpy 创建desktop，让开始菜单图标/全局搜索/桌面图标可用\n1 sudo vim /usr/share/applications/qtscrcpy.desktop 将如下内容粘贴\n1 2 3 4 5 6 7 8 9 [Desktop Entry] Encoding=UTF-8 Name=QtScrcpy Exec=qtscrcpy %U Icon=qtscrcpy Keywords=qtscrcpy Categories=Network; Type=Application Terminal=false 预览\n使用 使用usb连接手机，开启usb调试，QtScrcpy会自动刷新出设备，点击一键USB连接\n常见问题 连接无反应 尝试在终端启动 QtScrcpy\n1 qtscrcpy 启动后再次连接，查看终端报错信息\n报错1：\nThe server version (2.4) does not match the client (2.1.1)\n解决：\n使用scrcpy-server 2.1.1替换默认的scrcpy-server\nscrcpy-server 2.1.1下载地址\n使用这个命令替换默认的scrcpy-server\n1 sudo cp scrcpy-server-v2.1.1 /opt/QtScrcpy/output/x64/Release/scrcpy-server 再次尝试启动\n","date":"2024-07-09T23:07:42+08:00","permalink":"https://hublog.netlify.app/p/2407009/","title":"linux安装安卓控制工具，QtScrcpy"},{"content":"在线观看：\nyoutube 下载： ","date":"2024-07-08T16:07:59+08:00","permalink":"https://hublog.netlify.app/p/ying-guo-ming-jin-lun/","title":"因果明镜论 新版 仁泽"},{"content":" title: Linux安装Github Cli工具 description: slug: \u0026lsquo;\u0026ldquo;240729150742\u0026rdquo;\u0026rsquo; image: math: true license: CC BY-NC-ND hidden: false comments: true draft: false date: 2024-07-29 15:07:42 +0800 updated: 2024-07-29 14:07:89 +0800 categories: tags: title: undefined\n官方文档：https://github.com/cli/cli/blob/trunk/docs/install_linux.md\nDebian, Ubuntu Linux, Raspberry Pi OS (apt) 1 2 3 4 5 6 7 (type -p wget \u0026gt;/dev/null || (sudo apt update \u0026amp;\u0026amp; sudo apt-get install wget -y)) \\ \u0026amp;\u0026amp; sudo mkdir -p -m 755 /etc/apt/keyrings \\ \u0026amp;\u0026amp; wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg \u0026gt; /dev/null \\ \u0026amp;\u0026amp; sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \\ \u0026amp;\u0026amp; echo \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\u0026#34; | sudo tee /etc/apt/sources.list.d/github-cli.list \u0026gt; /dev/null \\ \u0026amp;\u0026amp; sudo apt update \\ \u0026amp;\u0026amp; sudo apt install gh -y ","date":"2024-07-07T23:07:42+08:00","permalink":"https://hublog.netlify.app/p/2407007/","title":"Linux安装Github Cli工具"},{"content":"简介 YOURLS 是一套 PHP 脚本，它能让你在自己的服务器上运行属于你自己的 URL 缩短服务。 你将完全掌控你的数据，还能获得详细的统计信息、分析报告、插件等等。 它是免费且开源的。\n官网：https://yourls.org\n源码：https://github.com/YOURLS/YOURLS\n预览 部署 serv00 下载\n1 wget https://github.com/YOURLS/YOURLS/archive/refs/tags/1.9.2.zip 解压\n1 unzip 1.9.2.zip -d public_html/ 复制文件\n1 2 3 cd public_html/ rm -rf index.html cp -r YOURLS-1.9.2/* ./ 配置\n1 cp user/config-sample.php user/config.php 修改user/config.php\n1 vim user/config.php serv00 控制台创建 MySQL 数据库，将数据库信息填写到 user/config.php\n除了数据库外，还需要修改其他信息，按需填写\n大致需要修改的如下\n1 2 3 4 5 6 define( \u0026#39;YOURLS_DB_USER\u0026#39;, \u0026#39;\u0026#39; ); define( \u0026#39;YOURLS_DB_PASS\u0026#39;, \u0026#39;\u0026#39; ); define( \u0026#39;YOURLS_DB_NAME\u0026#39;, \u0026#39;\u0026#39; ); define( \u0026#39;YOURLS_DB_HOST\u0026#39;, \u0026#39;\u0026#39; ); define( \u0026#39;YOURLS_DB_PREFIX\u0026#39;, \u0026#39;yourls_\u0026#39; ); define( \u0026#39;YOURLS_SITE\u0026#39;, \u0026#39;\u0026#39; ); 修改完成之后访问：域名/admin\n进入到这个界面，点击 Install YOURLS\n登陆后台，长这样：\ndocker compose 待续\n主题 Sleeky Sleeky 是一个最小的接口包，用于 YOURLS，一个开源的 URL 缩短器。Sleeky 添加了一个公共接口，并对后端（管理员）接口进行了大修。使用此主题，您可以创建自己的 Bitly / URL 缩短网站或公司内部使用的缩\n源码：https://github.com/Flynntes/Sleeky\n预览\n前台\n后台\n安装\n下载地址：v2.5.0\n安装并运行 YOURLS 将 sleeky-frontend 目录的内容移动到 YOURLS 安装的根目录 将 sleeky-backend 文件夹移动到 YOURLS 安装的 user/plugins/ 文件夹 在 YOURLS 管理区（example.com/admin/plugins.php）激活插件。该插件将显示为 Sleeky Backend 1 2 3 4 5 # serv00 wget https://github.com/Flynntes/Sleeky/archive/refs/tags/v2.5.0.zip unzip v2.5.0.zip cp -r Sleeky-2.5.0/sleeky-frontend/* public_html/ cp -r Sleeky-2.5.0/sleeky-backend/ public_html/user/plugins/ 如果 css 加载有问题，查看这个 issuse 解决：https://github.com/Flynntes/Sleeky/issues/89\n插件 浏览器 Firefox：YOURLS shortener 点击Setting进入设置，填写信息后测试保存\nServer URL：网址链接 Signature：密钥，在Tools - Secure passwordless API call 可以找到 ","date":"2024-07-07T15:07:53+08:00","permalink":"https://hublog.netlify.app/p/2407027/","title":"yourls，行业标准自托管的PHP网址缩短程序"},{"content":"简介 AList 是一款易于安装且支持多平台的文件管理工具，可以挂载多种存储并提供多种实用功能。它支持 WebDAV、黑暗模式、文件预览、打包下载等，还提供保险箱加密和更多高级功能。\n🗂️ 一个支持多种存储的文件列表程序，使用 Gin 和 Solidjs。\n官方文档：https://alist.nn.ci/zh/guide\n特性 ⚡ 使用简单 AList 从一开始就设计为易于安装, 并且可以在所有平台上使用。 ☰ 多种存储 AList 支持多个存储提供商, 包括本地存储、阿里云盘、OneDrive、Google Drive 等, 且易于拓展。 W 支持 WebDAV AList 支持所有 WebDAV 存储, 这是一种用于访问文件的标准。 🌑 黑暗模式 自由切换明暗模式 ♀ 受保护的路由 为特定路径添加密码保护和身份验证 ◎ 文件预览 支持视频、音频、文档、PDF、图片预览等, 甚至支持 ipa 安装 ⬇ 打包下载/批量下载 使用浏览器的 stream api 支持打包下载, 无需使用服务器 / 使用 Aria2 进行批量下载支持文件夹 ♺ 单点登录 使用单点登录快速登录 AList ▤ 自动注册 AList 帐号 使用单点登录自动注册为 AList 帐号快速注册 ⤓ 离线下载 将种子内容离线下载到指定的目录内, 需要苛刻的网络环境 01 保险箱加密/解密 文件 任何人都可以安全地将加密数据存储在远程存储提供商上。数据存储在保险箱中, 提供商只能看到保险箱, 看不到您的数据。 ••• 更多新功能 包括文本编辑器、README/HTML 渲染、文件永久链接、Cloudflare Workers 代理等 安装 一键脚本 1 2 # 切换到root用户 sudo su - 1 2 # 一键脚本安装 curl -fsSL \u0026#34;https://alist.nn.ci/v3.sh\u0026#34; | bash -s install 新脚本（新增）\n1 curl -fsSL \u0026#34;https://alist.nn.ci/v3.sh\u0026#34; -o alist_v3.sh \u0026amp;\u0026amp; bash alist_v3.sh 设置密码\n1 2 cd /opt/alist/ ./alist admin set \u0026lt;your_password\u0026gt; 访问地址：ip:5244\ndocker-compose 1 2 3 sudo mkdir -p /opt/container/alist cd /opt/container/alist sudo vim docker-compose.yml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 version: \u0026#39;3.3\u0026#39; services: alist: image: \u0026#39;xhofe/alist-aria2:latest\u0026#39; volumes: - \u0026#39;./alist_data:/opt/alist/data\u0026#39; - \u0026#39;/home:/home\u0026#39; - \u0026#39;/root:/root\u0026#39; ports: - \u0026#39;5245:5244\u0026#39; #environment: #- PUID=0 #- PGID=0 #- UMASK=022 container_name: alist restart: unless-stopped networks: - alist_network networks: alist_network: external: true 创建 docker 网络\n1 sudo docker network create alist_network 启动容器\n1 dco up -d 重置密码\n1 docker exec -it alist ./alist admin set \u0026lt;your_password\u0026gt; ","date":"2024-07-05T23:07:42+08:00","permalink":"https://hublog.netlify.app/p/2407005/","title":"alist，一个功能强大的网盘文件列表程序和 WebDAV/S3服务器"},{"content":"在开始菜单搜索微信，编辑应用程序，添加环境变量QT_SCALE_FACTOR=1.75\n右击编辑应用程序，进入如下界面\n点击应用程序，在环境变量输入QT_SCALE_FACTOR=1.75\n此处的1.75经我测试为缩放倍率，我的屏幕缩放为175%，根据自己情况进行更改\n","date":"2024-07-05T10:07:32+08:00","permalink":"https://hublog.netlify.app/p/linux-wechat/","title":"Linux原生版微信在高分辨率屏幕字体小，分辨率异常"},{"content":"安装 Linux Debian\n1 sudo apt install kodi Flatpak\n1 flatpak install flathub tv.kodi.Kodi ","date":"2024-07-04T23:07:42+08:00","permalink":"https://hublog.netlify.app/p/2407004/","title":"Kodi，超级强大的多功能媒体播放器"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 Chain INPUT (policy ACCEPT) target prot opt source destination Chain FORWARD (policy ACCEPT) target prot opt source destination DOCKER-USER all -- anywhere anywhere DOCKER-ISOLATION-STAGE-1 all -- anywhere anywhere ACCEPT all -- anywhere anywhere ctstate RELATED,ESTABLISHED DOCKER all -- anywhere anywhere ACCEPT all -- anywhere anywhere ACCEPT all -- anywhere anywhere Chain OUTPUT (policy ACCEPT) target prot opt source destination Chain DOCKER (1 references) target prot opt source destination Chain DOCKER-ISOLATION-STAGE-1 (1 references) target prot opt source destination DOCKER-ISOLATION-STAGE-2 all -- anywhere anywhere RETURN all -- anywhere anywhere Chain DOCKER-ISOLATION-STAGE-2 (1 references) target prot opt source destination DROP all -- anywhere anywhere RETURN all -- anywhere anywhere Chain DOCKER-USER (1 references) target prot opt source destination RETURN all -- anywhere anywhere 这是 iptables 的输出，显示了当前的防火墙规则。以下是每个部分的解释：\nChain INPUT 政策 (policy): ACCEPT 表示默认允许所有进入的流量。 规则: 当前没有具体的规则定义，意味着所有进入的流量都会被接受。 Chain FORWARD 政策 (policy): ACCEPT 表示默认允许所有转发的流量。 规则: DOCKER-USER: 用户自定义的链，通常用于 Docker 的流量管理。 DOCKER-ISOLATION-STAGE-1: Docker 的隔离阶段链。 ACCEPT all -- anywhere anywhere ctstate RELATED,ESTABLISHED: 允许所有相关和已建立的连接。 DOCKER: Docker 处理的流量。 ACCEPT all -- anywhere anywhere: 允许所有流量（这条规则可能不必要，因为前面的规则已经允许了所有流量）。 Chain OUTPUT 政策 (policy): ACCEPT 表示默认允许所有输出的流量。 规则: 当前没有具体的规则定义，意味着所有输出的流量都会被接受。 Chain DOCKER 这是 Docker 生成的链，当前没有具体的规则。 Chain DOCKER-ISOLATION-STAGE-1 这是 Docker 的隔离阶段链。 规则: DOCKER-ISOLATION-STAGE-2: 进一步的隔离处理。 RETURN: 返回到调用该链的地方。 Chain DOCKER-ISOLATION-STAGE-2 规则: DROP all -- anywhere anywhere: 丢弃所有流量。 RETURN: 返回到调用该链的地方。 Chain DOCKER-USER 用户自定义的链，用于 Docker 的流量管理。 规则: RETURN: 返回到调用该链的地方。 总结 这个配置允许所有进入和输出的流量，转发流量也被允许。 Docker 相关的链用于管理容器之间的流量，包含了一些隔离和处理规则。 这种配置可能不够安全，尤其是在生产环境中，建议根据需要设置更严格的规则。 ","date":"2024-07-03T23:07:42+08:00","permalink":"https://hublog.netlify.app/p/2407003/","title":"Debian，iptables防火墙规则"},{"content":"我的分享 电影 https://115.com/s/swz2nxk3h9j?password=love\u0026# movie 访问码：love\n电视剧 https://115.com/s/swz2njp3h9j?password=love# tvplay 复制这段内容，可在115APP中直接打开！\n动漫 https://115.com/s/swz2nxs3h9j?password=love\u0026# anime 访问码：love\n纪录片 https://115.com/s/swz2n9x3h9j?password=love\u0026# documentary 访问码：love\n软件 https://115.com/s/swz23lc3h9j?password=love# software 复制这段内容，可在115APP中直接打开！\n别人分享第一波 https://115.com/s/sw6t1s73wfp?password=ade1#\n华语剧集_FromAliyundrive_sha1\n访问码：ade1\n复制这段内容，可在115App中直接打开！\nhttps://115.com/s/sw683in3wfp?password=m095#\n一些无损歌曲(1.2T)\n访问码：m095\n复制这段内容，可在115App中直接打开！\nhttps://115.com/s/sw6837g3wfp?password=u2f6#\n欧美剧_45T\n访问码：u2f6\n复制这段内容，可在115App中直接打开！\n电影\nhttps://115.com/s/sw683783wfp?password=g9a0#\n2267部2160p remux FGT(120T)\n访问码：g9a0\n复制这段内容，可在115App中直接打开！\nhttps://115.com/s/sw683713wfp?password=o791#\n原盘 ISO 电影(755T)\n访问码：o791\n复制这段内容，可在115App中直接打开！\n源地址：\nhttps://nga.178.com/read.php?\u0026tid=36573363\u0026pid=695158511\u0026to=1\n","date":"2024-07-01T23:07:42+08:00","permalink":"https://hublog.netlify.app/p/2407001/","title":"115资源分享"},{"content":" 20240614更新，\n本教程同样适用于同一台蓝牙设备，同一个主机上的多系统蓝牙连接。\n本身具有多蓝牙设备切换功能的键盘（如本教程使用的K380），连接不同设备可以生效，比如我可以同时连接 Windows10，手机。但是现在电脑上装了Windows10，Debian12两个系统，使用K380键盘不同模式蓝牙连接后会导致前一个失效（就是蓝牙1连接Windows10，蓝牙2连接Debian12，后连接的那个会导致第一个失效），我猜测可能是一台机器上的蓝牙有唯一标识，所以键盘就算有多蓝牙支持，连接一个系统后，再切换系统、切换键盘蓝牙模式，也会导致前一个蓝牙失效，这也是写本教程的主要原因。\n如果一个设备只装一个系统，且键盘支持多蓝牙切换模式，应该是不会出现这个问题的。当然如果键盘只支持一个模式蓝牙，使用本教程也是可以的。\n下面是正文。。。\n起因 因为我在一台机器上装了两种不同的系统，windows和archlinux系统，在切换系统的时候，蓝牙键盘和蓝牙鼠标会失效，也就是在其中一个系统配对使用后，切换到另一个系统鼠标和键盘会用不了，为了解决这个问题，我查看了archlinux的wiki，和搜索了其他的经验，发现并不是很好理解。所以自己编写了这篇文章以供自己和后来人参考。\narchlinux 官方wiki关于蓝牙的介绍：https://wiki.archlinuxcn.org/wiki/%E8%93%9D%E7%89%99\n设备 设备 说明 蓝牙5.0 系统 Windows10 ，Arch Linux / 键盘 罗技k380 否 鼠标 acer M115 是 为什么要关注 蓝牙的频率呢？ 因为后面的配置文件一样，bt5.0要稍微复杂一下，这个也不用自己查询， 通过archlinux配对蓝牙生成的文件就可以看出来。\n步骤 整体步骤总结为：\n先连接蓝牙，在系统内生成配置文件，有多少个系统就先连接多少个。 修改蓝牙配置文件，确保所有系统中的配置与最后一次蓝牙连接的系统配置一致。 温馨提示，修改linux配置更方便。\n如果我有两个系统 archlinux、windows10，那么我应该先连接archlinux，再连接windows，记录下windows的蓝牙配置，修改archlinux的蓝牙配置。这样就可以实现同一个蓝牙连接两个系统。\n同理，我有三个设备，先连接3个系统生成配置文件，再修改前两次连接的配置。\n连接archlinux 我安装了图形化界面，对于配对蓝牙比较方便，这个过程不再演示。\n如果你是无图形化界面，请参考 蓝牙连接\n配对成功后，打开终端，在 /var/lib/bluetooth 下可以看到 蓝牙设备的mac地址，继续进入蓝牙的mac地址，可以看到已经配对的蓝牙设备的mac地址，每个人的mac地址不一样，请根据自己情况操作。比如我的如下：\n34开头的对应的是我的键盘k380，C8开头的对应的是鼠标m115。让我们来看看他们各自的配置文件是怎样的：\n键盘k380：\n上图的info内容对应的就是一个蓝牙2.4G的设备，后续的更改只需要修改 [LinkKey]标签下的Key即可。\nacer m115鼠标：\n通过图中的配置文件就可以看出，配置多了许多，这是蓝牙5.0的配置文件，我们需要修改的内容大概有\n1 2 3 4 5 6 7 8 [IdentityResolvingKey] Key=75543290F900B56B68F2EA4EF34A2DA9 [LongTermKey] Key=0932311C7550DDE3A0D73A479A521187 EncSize=16 EDiv=35838 Rand=220192556329416 这里面的内容对应windows的内容，查看windows蓝牙注册表对应后，你就一目了然了。\n了解了archlinux的配置文件之后，让我们切换系统到windows，查看windows下的对应的配置。\n连接windows 在windows的环境下配对蓝牙设备，这个过程不再演示。\n修改配置文件 根据前文的知识，我们需要知道archlinux需要配置的值对应windows下是什么，这个值需要通过注册表查看。 为了查看这些值，还需要准备一个软件，正常查看注册表是看不到的，还需要下载微软提供的 PsTool ,下载地址为：https://download.sysinternals.com/files/PSTools.zip 解压软件之后，在解压的目录打开命令行执行下列命令，需要提醒的是，此操作需要管理员权限，建议通过管理员打开powershell，再进入到解压的路径下，比如 1 cd \u0026#39;D:\\Program Files\\PSTools\u0026#39; 1 2 # 在PsTool所在目录执行这个 .\\PsExec64.exe -s -i regedit.exe 接着会打开注册表，在注册表的地址找到 1 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\BTHPORT\\Parameters\\Keys 在keys下面有子项，子项的名称和数据对应的是键盘的mac地址和linkkey 这是蓝牙2.4G，把mac地址对应的值记录下来，替换archlinux键盘的linkkey的key，只需要重启蓝牙，这样就实现了键盘在双系统的无缝切换。重启蓝牙的命令为 ：\n1 sudo systemctl restart bluetooth 对于鼠标，它的项根据我这边的情况，在键盘的项的下面，也就是 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\BTHPORT\\Parameters\\Keys 的子项的子项，点开可以看到一列些熟悉的值，比如 EDIV，IRK，ERand，LTK等值，我们可以把项导出为 .reg文件查看，但是我并不建议导出来，因为archlinux的值是十进制的，windows到处的值是十六进制，后续还要转换进制，稍显麻烦，你细心 的话在注册表里就可以看到转换过的值，也就是括号里面的内容，如图： 记录对应名称对应的数据，有括号记录括号的内容，没有括号的记录整条数据。\n切换到 archlinux 系统\n替换archlinux下对应设备的值和windows一样。\n修改LTK，IRK的时候，把小写字母转换成大写。全部替换完成之后，重启蓝牙。\n1 2 # 重启蓝牙 sudo systemctl restart bluetooth 查看蓝牙设备是否正常工作。\n额外的。archlinux wiki说需要转换，如果不能工作再尝试。\n根据我的经验来看，记录windows注册表蓝牙对应值的时候，仔细小心，如果不行，请参考官方蓝牙教程\n至此，完结撒花 ｡:.ﾟヽ(｡◕‿◕｡)ﾉﾟ.:｡+ﾟ\n","date":"2024-06-28T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406028/","title":"蓝牙设备连接双（多）系统（windows和archlinux）"},{"content":"管理多个 GitHub 账户时，可以使用不同的 SSH 公钥来为每个账户提供访问权限。以下是在本机生成多个 SSH 公钥并为每个 GitHub 账户添加相应公钥的步骤：\n生成 SSH 密钥对： 打开终端（在 Linux 或 macOS 上）或 Git Bash（在 Windows 上），使用 ssh-keygen 命令生成新的 SSH 密钥对。对于每个 GitHub 账户，重复以下步骤：\n1 ssh-keygen -t rsa -b 4096 -C \u0026#34;your_email@example.com\u0026#34; 将 \u0026quot;your_email@example.com\u0026quot; 替换为你的电子邮件地址。-t rsa 指定密钥类型为 RSA，-b 4096 指定密钥长度为 4096 位。\n命名密钥文件： 在提示保存密钥对时，你可以使用默认文件名（如 ~/.ssh/id_rsa），或者为每个 GitHub 账户指定不同的文件名，例如：\n1 Enter file in which to save the key (/c/Users/YourName/.ssh/id_rsa): /c/Users/YourName/.ssh/id_rsa_work 这样，你就可以区分不同账户的密钥。\n设置密钥访问权限： 为确保安全性，应该只让文件所有者访问私钥：\n1 chmod 600 /c/Users/YourName/.ssh/id_rsa_work 添加 SSH 公钥到 GitHub 账户：\n打开生成的公钥文件（默认为 .pub 扩展名），例如 id_rsa_work.pub。 复制公钥内容。 登录到对应的 GitHub 账户。 访问 Settings \u0026gt; SSH and GPG keys \u0026gt; New SSH key，粘贴你的公钥并命名。 点击“Add SSH key”完成添加。 配置 SSH 以使用特定密钥： 在 ~/.ssh/config 文件中添加以下内容，以配置 SSH 客户端使用特定密钥：\n1 2 3 4 5 6 7 8 9 Host github-work HostName github.com User your_github_username IdentityFile ~/.ssh/id_rsa_work Host github-personal HostName github.com User your_github_username IdentityFile ~/.ssh/id_rsa_personal 将 github-work 和 github-personal 替换为你的 GitHub 主机别名，your_github_username 替换为你的 GitHub 用户名，id_rsa_work 和 id_rsa_personal 替换为你的密钥文件路径。\n克隆或推送到 GitHub 仓库： 当你需要克隆或推送到 GitHub 仓库时，使用配置的别名来指定使用哪个密钥：\n1 git clone git@github-work:username/repo.git 或者：\n1 git push github-personal master 通过这种方式，你可以为每个 GitHub 账户生成和管理不同的 SSH 密钥，从而实现对不同账户的访问控制。记得妥善保管你的私钥文件。\n","date":"2024-06-26T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406027/","title":"本地生成多个SSH公钥管理多个GitHub账户"},{"content":"\nOffice 浏览器 FireFox Google Chrome Edge 邮箱 Thunderbird 开源邮箱客户端，https://www.thunderbird.net/zh-CN/\nOutlook 交流 QQ 微信 腾讯会议 Zoom 钉钉 视频/播放器 mpv 开源，极简播放器\n官网 个人配置文件 vlc 另一款开源播放器\nbilibili bilibili客户端\nZyplayer Terminus Player 第三方 Emby 播放器\n音乐/播放器 Spotify 方格音乐 网易云音乐 QQ音乐 MusicPlayer2 开源纯音频播放器，https://github.com/zhongyang219/MusicPlayer2/releases\n落雪 Lx-Music 阅读 Koodo Reader 阅读神器，支持多种格式\n下载工具 Gopeed Go编写的下载工具，跨平台。\nYTDownloader Youtube 下载神器，强烈推荐。\n地址：https://github.com/aandrew-me/ytDownloader\nNeat Download Manager Windows下多线程下载工具\nqBittorrent-Enhanced-Edition 增强版的qBittorrent，地址：https://github.com/c0re100/qBittorrent-Enhanced-Edition/releases\nMotrix 下载工具\nAria2-Windows Windows下的Aria2下载工具，下载地址：\n链接: https://pan.baidu.com/s/1nf2XaO7NprysGgOFXJpeYQ 提取码: love 复制这段内容后打开百度网盘手机App，操作更方便哦\n小白羊云盘 第三方阿里云盘播放器，https://github.com/gaozhangmin/aliyunpan\n剪辑 PS 剪影 HandBrake InfoTech（IT） Jetbrains Idea Datagrip Goland PyCharm WebStorm Android Studio PhpStorm Fleet Jetbrains ToolBox VMware Workstation Pro Tabby ssh工具，地址：https://github.com/Eugeny/tabby\nVSCode GitBash Fiddler Classic MySQL Workbench 8.0 CE Tiny RDM DBeaver Navicat Premium 16 phpstudy_pro Windows下php集成开发环境，地址：https://www.xp.cn/download.html\nApifox api测试工具\nPostman MobaXterm ssh工具，只支持Windows\nFileZilla 开源sftp工具\n编辑器 Typora Obsidian 推荐和Typora使用\nNotepad\u0026ndash; 替代Notpad++\nmassCode 开源，常用代码保存\nSublime Text draw.io 开源画图工具\nNotion Notepad3 替代notepad\n大杂烩 7-Zip File Manager 解压缩工具\nSnipaste 截图神器\nMuMu模拟器12 geek（强烈推荐） 卸载软件神器，可卸载安装软件自动删除注册表\nNmap - Zenmap GUI QuickLook SwitchHosts 快速切换hosts\nOBS Studio (64bit) Speedtest Everything ScreenToGif scrcpy 开源投屏工具\nRustDesk ToDesk Bandizip LocalSend TTime 翻译软件，好用\n有道翻译 Bitwarden Umi-OCR uTools Steam Microsoft Support and Recovery Assistant 全国资格考试网报平台证件照片审核处理系统 RaiDrive 挂载工具，Windows推荐使用\n指纹浏览器 Dolphin Anty 指纹浏览器\nHubstudio 指纹浏览器\nGoLogin 指纹浏览器\nVMLogin 指纹浏览器\nIncogniton 指纹浏览器\n剪辑 哔哩哔哩投稿工具 哔哩哔哩直播姬 Adobe Photoshop 2023 剪映专业版 HandBrake 代理工具 v2rayN nekoray Oblivion Desktop Cloudflare WARP WireGuard Hiddify nodesCatch ","date":"2024-06-25T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406026/","title":"Windows软件清单"},{"content":"百度网盘 链接: https://pan.baidu.com/s/1Fs54P37d3qwATA-95OSqdA?pwd=love 提取码: love 复制这段内容后打开百度网盘手机App，操作更方便哦\n123盘 https://www.123pan.com/s/4MOKVv-cnnpd.html\n云享 https://pan.seektao.cc/s/LwFp\n蓝奏云 https://lzygood.lanzouv.com/iM8o7211b3cb\n","date":"2024-06-24T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406025/","title":"推荐一本书《与神对话》"},{"content":"通用必会 快捷键 作用 触发模式 备注 u 撤销 普通 为你的错误操作买单 Ctrl+r 撤销已做的撤销 普通 不想做撤销呢 移动 移动的命令很重要，删除，复制，粘贴都跟它有关\n光标移动 普通模式下作用\n快捷键 作用 h 光标向左移动一个字符 j 光标向下移动一行 k 光标向上移动一行 l 光标向右移动一个字符 光标跳转 快捷键 作用 w 光标跳转到下一个单词的首字母 b 光标跳转到上一个单词的首字母 e 光标跳转到下一个单词的尾字母 ge 光标跳转到上一个单词的尾字母 $ 光标跳转到当前行的行尾 0（数字） 光标跳转到当前行的行首 ^ 光标跳转到当前行的行首非空字符 g_ 光标跳转到当前行的行尾非空字符 gg 光标跳转到文件首行首个非空字符 G 光标跳转到文件尾行首个非空字符 翻页 快捷键 作用 Ctrl + f 向下滚动一页 Ctrl + b 向上滚动一页 Ctrl + d 向下滚动半页 Ctrl + u 向上滚动半页 替换 快捷键 作用 触发模式 x 替换光标所在的字符 普通模式 ciw 替换当前光标所在的单词 删除 快捷键 作用 触发模式 x 删除光标所在位置的字符 普通模式 dw 删除光标位置到下一个单词开头的字符 普通模式 D/d$ 删除光标位置到行尾的字符 d0 删除光标位置到行首的字符 d^ 删除光标位置到行首非空的字符 dd 删除当前行 普通模式 ndd 删除n行，包含当前行 dgg 删除当前行到文件首行 dG 删除当前行到文件尾行 使用 ndd 可以使用 p 来粘贴刚才删除的行\n复制+粘贴 命令 作用 备注 yy 复制当前行。 yy - Yank (copy) line yw 复制从光标位置到下一个单词结尾的字符。 yw - Yank (copy) word y$ 复制从光标位置到行尾的字符。 y$ - Yank (copy) to end of line y0 复制从光标位置到行首的字符（忽略空白字符）。 y0 - Yank (copy) to beginning of line y^ 复制从光标位置到行首的第一个非空白字符。 y^ - Yank (copy) to first non-blank character p 粘贴最后一次复制的内容。 p - Paste last yanked (copied) content P 在当前行之前粘贴最后一次复制的内容。 P - Paste above current line \u0026ldquo;+y 复制文本到系统剪贴板。 \u0026quot;+y - Yank (copy) to system clipboard \u0026ldquo;+p 从系统剪贴板粘贴内容。 \u0026quot;+p - Paste from system clipboard :reg 查看 Vim 寄存器中保存的内容。 :reg - View contents of Vim registers \u0026ldquo;ayy 将当前行复制到寄存器 a 中。 \u0026quot;ayy - Copy current line to register a \u0026ldquo;ap 从寄存器 a 中粘贴内容。 \u0026quot;ap - Paste from register a \u0026ldquo;ayiw 将当前单词复制到寄存器 a 中。 \u0026quot;ayiw - Copy current word to register a \u0026ldquo;aP 从寄存器 a 中粘贴内容到当前位置。 \u0026quot;aP - Paste from register a at current position ","date":"2024-06-23T13:06:24+08:00","permalink":"https://hublog.netlify.app/p/vim-keyborad/","title":"VIM快捷键"},{"content":"简介 一个简单的 web 应用程序，用作 ssh 客户端连接到 ssh 服务器。它是用 Python 编写的，基于 tornado，paramiko 和 xterm.js。\n项目地址：https://github.com/crazypeace/huashengdun-webssh\n特性 支持 SSH 密码认证，包括空密码。 支持 SSH 公钥认证，包括 DSA RSA ECDSA Ed25519 密钥。 支持加密密钥。 支持双因素认证（基于时间的一次性密码）。 支持全屏终端。 终端窗口可调整大小。 自动检测 SSH 服务器的默认编码。 支持现代浏览器，包括 Chrome、Firefox、Safari、Edge、Opera。 在线体验 https://resulting-maridel-budd-86b51dd4.koyeb.app/ Region: Oregon (US West) https://ssh.ksg.us.kg/ Region: Frankfurt （DE） ","date":"2024-06-22T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406023/","title":"huashengdun-webssh，一款在线的webssh"},{"content":"简介 Serv00 是一个提供免费虚拟主机的平台，支持的服务众多，可选择 php 版本，有多款数据库，MySQL，postgresql，mongdodb，支持 ssh 连接，没有广告，3G 空间。\n官网：https://www.serv00.com/\n温馨提示：注册不要使用代理，建议把上述域名加入白名单\n自定义域名 使用白嫖的二级域名添加三级域名作为 serv00 的自定义域名\n域名托管在 cloudflare\n修改 php 版本 参考：https://forum.serv00.com/d/8-upgrade-version-of-php/2\n在 domains/domain/ 新建文件\n1 vim .htaccess 目前可支持的版本\n1 2 3 4 5 6 7 8 AddType application/x-httpd-php56 .php AddType application/x-httpd-php70 .php AddType application/x-httpd-php71 .php AddType application/x-httpd-php72 .php AddType application/x-httpd-php73 .php AddType application/x-httpd-php74 .php AddType application/x-httpd-php80 .php AddType application/x-httpd-php81 .php 1 echo \u0026#34;AddType application/x-httpd-php74 .php\u0026#34; \u0026gt;\u0026gt; .htaccess SSL 证书 1 cd $HOME/domains/你的网站/public_html 新建 .htaccess文件，开启重定向 http 到 https\n如果你不懂 vim，请找一个你熟悉的编辑软件上传，这里简要介绍一下\n编辑 .htaccess\n1 vim .htaccess 复制下面的内容，粘贴进去\n1 2 3 RewriteEngine On RewriteCond %{HTTPS} off RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301] 英文输入法下 :wq 退出保存\n服务 PM2 1 bash \u0026lt;(curl -s https://raw.githubusercontent.com/k0baya/alist_repl/main/serv00/install-pm2.sh) halo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 server: # 运行端口 port: 8090 spring: # 数据库配置，支持 MySQL、MariaDB、PostgreSQL、H2 Database，具体配置方式可以参考下面的数据库配置 r2dbc: url: r2dbc:pool:postgresql://{HOST}:{PORT}/{DATABASE} username: admin password: 123456 sql: init: mode: always # 需要配合 r2dbc 的配置进行改动 platform: postgresql halo: caches: page: # 是否禁用页面缓存 disabled: true # 工作目录位置 work-dir: $HOME/domains/halo2/.halo2 # 外部访问地址 external-url: https://serve.v6.army # 附件映射配置，通常用于迁移场景 attachment: resource-mappings: - pathPattern: /upload/** locations: - migrate-from-1.x run.sh\n1 2 #!/bin/bash java17 -server -Xms128m -Xmx256m -jar -Duser.timezone=Asia/Shanghai /home/muyiacc/domains/halo2/halo.jar --spring.config.additional-location=/home/muyiacc/domains/halo2/.halo2/application.yaml ","date":"2024-06-22T00:06:14+08:00","permalink":"https://hublog.netlify.app/p/free-virtual-host-serv00-1/","title":"Serv00，免费虚拟主机，提供多种服务支持"},{"content":"有些免费的服务长时间不登录可能会导致删号\nssh登录 serv00.com 3个月不登陆删号，通过定时任务ssh连接实现保活\n定时规则\n1 1 1 1 * * 脚本\n1 sshpass -p \u0026#39;密码\u0026#39; ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -tt 用户名@地址 \u0026#34;exit\u0026#34; ","date":"2024-06-21T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406022/","title":"免费服务保活"},{"content":" 片段节选自《与神对话》第3卷第21节\n“你可以随意选择成为神的任何部分，”我对那小灵魂说，“你是正在经验其自身的绝对神圣。你希望经验到你自己是哪种神圣因素呢？”\n“你是说我可以选择吗？”小灵魂问。我回答说：“是的。你可以选择通过感受或者行动经验任何神圣因素。”\n“好啊，”小灵魂说，“那么我选择宽恕。我想要经验到我自己就是那个叫做彻底的宽恕的神圣因素。”\n嗯，这倒有点棘手，正如你能想象到的。\n没有人需要被宽恕。我创造的一切都是完美和爱。\n“没有人需要被宽恕啊？”小灵魂问，它有些难以置信。\n“是啊，”我回答说，“看看你身边。你觉得哪个灵魂不如你完美、不如你神奇呢？”\n听到这句话，小灵魂四下环顾，吃惊地发现它身边围绕着天堂所有的灵魂。它们从遥远的地方赶过来，因为他们听说小灵魂正在与神进行一次非凡的对话。\n“我没发现不如我完美的灵魂啊！”小灵魂惊奇地说，“那么我该原谅谁呢？”\n就在这时，有个旁观的灵魂站了出来。“你可以原谅我呀，”这个友好的灵魂说。\n“原谅你什么呢？”小灵魂问。\n“在你下世为人时，我会来找你，做一些需要你原谅的事情，”友好的灵魂回答说。\n“但那是什么事呢？你是如此完美的生灵，能做出什么需要我原谅的事情呢？”小灵魂大惑不解。\n“哎呀，”友好的灵魂微笑着说，“我相信我们会有办法的啦。”\n“但你为什么要这样做呢？”小灵魂实在想不通，一个如此完美的生灵，为什么愿意降低它的振动频率，以便它能够真的做出某些“坏”事呢？\n“很简单，”友好的灵魂解释说，“我愿意这么做，因为我爱你。你想要经验到你自己是宽恕，对吧？再说你也帮了我的忙呀。”\n“真的啊？”小灵魂问。\n“当然啦。你不记得啦？我们是一体呀，你和我。我们是上和下，左和右。我们是这和那，此和彼。我们是大和小、雄和雌、好和坏。我们大家都是一体。\n“我们共同决定这么做，这样我们每个人就都能经验到我们自己是神最伟大的组成部分。因为我们明白……”\n“假如没有非你，也就没有你。”\n“如果没有‘冷’，你不可能感到‘暖’。如果没有‘悲伤’，你不可能感受到‘快乐’；如果没有‘恶’，你称之为‘善’的经验便不可能存在。\n“如果你选择成为某样东西，那么在你的宇宙里，必须有相反的某些东西或者某些人存在，你的选择才能够实现。”\n友好的灵魂接着又解释说，这些人都是神特派的天使，这些境遇都是神的礼物。\n“我只要求你一件事，”友好的灵魂大声宣布。\n“什么事都行！什么事都行，”小灵魂激动地说。它现在知道它能够经验神的每一个神圣要素，所以很兴奋。现在他明白了那计划。\n“在我打击你的时候，”友好的灵魂说，“在我对你做出糟糕得超乎你想象的事情的时候——在那个时候……请记得我的真实身份。”\n“哦，我不会忘记的！”小灵魂承诺说，“到时我会看到你是完美无缺的，就像现在这样，我会永远记得你的身份。”\n","date":"2024-06-19T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406020/","title":"《与神对话》节选片段1"},{"content":"初始化仓库 本地没有项目，仓库有\n1 git clone \u0026lt;项目地址\u0026gt; 本地有项目，仓库也有\n确保本地已经初始化git init，先将本地提交了。\n添加远程仓库地址，拉取项目，解决冲突。\n1 git remote add \u0026lt;别名\u0026gt; \u0026lt;仓库地址\u0026gt; 例\n1 git remote add origin git@github.com:muyiacc/test.git 如果本地也有记录，且和远程有冲突，后面讲\n拉取 pull 1 git pull 推送 push 将当前分支提交到对应远程分支\n1 git push 将当前分支提交到特定的远程仓库，同名分支\n1 git push \u0026lt;remote\u0026gt; 将本地分支提交到远程特定的分支\n1 git push \u0026lt;remote\u0026gt; \u0026lt;branch\u0026gt; 设置上游分支，推送当前分支，并设置上游分支（tracking branch）\n这样之后可以使用 git push 直接推送，而不需要指定远程仓库和分支。\n1 git push -u \u0026lt;remote\u0026gt; \u0026lt;branch\u0026gt; 强制推送：强制推送本地更改，即使这会导致远程仓库的更改丢失。使用此选项需要谨慎，因为它可能会覆盖远程分支上的提交。（慎用！！！）\n1 2 3 git push -f # 或者 git push --force 删除远程分支：删除远程仓库上的指定分支。\n1 git push \u0026lt;remote\u0026gt; --delete \u0026lt;branch\u0026gt; 推送标签：推送本地创建的标签到远程仓库\n1 git push \u0026lt;remote\u0026gt; \u0026lt;tag\u0026gt; 推送所有分支和标签：推送所有本地分支和标签到远程仓库。\n1 git push --all 或 git push --tags 使用 git push 时，最好先使用 git pull 或 git fetch 来获取远程仓库的最新状态，以避免潜在的冲突。此外，强制推送（-f 或 --force）可能会导致其他协作者的更改丢失，因此应该在团队中明确沟通后谨慎使用。\n分支 合并 merge 合并某个提交 cherry-pick 选择合并某一个分支的提交记录\n例如：有 main，dev 两个分支，dev 提交了 commit a，commit b，现在需要将 commit b 合并到 main 分支\n查看 dev 分支 commit b 提交的 hash\n1 git log 假设提交的hash值为 837fc5\n切换到要合并的分支 main，执行\n1 git cherry-pick 837fc5 重置 reset \u0026ndash;hard 放弃当前内容，回到某个历史提交的 commit ，并丢弃暂存区\n1 git reset --hard commit-id 同时删除未追踪的文件和目录\n1 2 3 git clean -fd # -f 是表示强制删除 # -d 表示的目录，clean只会删除文件，加上表示把目录也删掉 为什么有这个用法，主要是用来学习，删除了之后，自己再重新写一遍。不用关心需要删除哪些内容。\n\u0026ndash;soft \u0026ndash;mixed （默认） 子模块 submodule 子模块是用在项目中将其他项目作为子项目使用\n初始化子模块配置\n1 git submodule init 更新子模块内容\n1 git submodule update 常见问题 从远程 Git 仓库中删除已经上传但现在希望忽略的文件 确保你已经在 .gitignore 文件中添加了需要忽略的文件或文件夹。\n使用以下命令将文件从 Git 的追踪中移除，但保留本地文件：\n1 git rm --cached \u0026lt;file_or_directory\u0026gt; 如果你想要移除多个文件，可以使用通配符或列出多个文件。\n提交对 .gitignore 文件和移除追踪的更改：\n1 git commit -m \u0026#34;Remove ignored files from tracking\u0026#34; 将更改推送到远程仓库：\n1 git push origin \u0026lt;branch_name\u0026gt; 假设要忽略名为 config.json 的文件，操作如下：\n1 2 3 4 echo \u0026#34;config.json\u0026#34; \u0026gt;\u0026gt; .gitignore git rm --cached config.json git commit -m \u0026#34;Ignore config.json\u0026#34; git push origin main 完成这些步骤后，config.json 文件将不再被 Git 跟踪，并且在之后的提交中将被忽略。\nerror: bad signature 0x00000000 1 2 3 \u0026gt; git status error: bad signature 0x00000000 fatal: index file corrupt 这表示索引出现错误\n备份索引文件：\n在命令行中，进入你的 Git 仓库目录（你已经在 E:\\markstore\\hugo-blog 中），然后执行以下命令：\n`cp .git/index .git/index.backup` （如果你在 Windows 上，可以使用 `copy .git\\index .git\\index.backup`） 删除索引文件：\n`rm .git/index` （在 Windows 上使用 `del .git\\index`） 重新构建索引：\n运行以下命令来重新构建索引：\n`git reset` git status 中文字符显示为 \\1234\\1234 1 git config core.quotepath off 全局生效\n1 git config --global core.quotepath off 还原：off 改成 on。\n","date":"2024-06-18T20:06:17+08:00","permalink":"https://hublog.netlify.app/p/git-command/","title":"Git个人常见用法备忘录"},{"content":"Git 教程 欢迎来到这份详尽的 Git 教程，本教程将引导你从 Git 的基础开始，一直到一些高级特性的使用。\n第一部分：Git 简介 Git 是什么 Git 是一个分布式版本控制系统，由 Linus Torvalds 创建，用于有效、高速地处理从小到大的项目。\n为什么使用 Git 速度：Git 在合并、分支切换等操作上非常快。 效率：支持数千个并发用户协同工作。 安全性：通过 SHA1 哈希算法保护代码和历史完整性。 支持离线工作：可以在无网络的情况下工作。 分支和合并：支持快速、简便的分支和合并操作。 版本控制系统的基本概念 版本：项目的某个状态的快照。 提交：保存项目历史记录的操作。 分支：从某个点分叉出来的代码线。 合并：将两个或多个发展历史合并在一起的操作。 第二部分：安装和配置 Git 在不同操作系统上安装 Git 对于 Linux/Unix：sudo apt-get install git 对于 macOS：brew install git 对于 Windows：从 Git 官网 下载安装程序。 配置 Git 用户信息 1 2 git config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email \u0026#34;your_email@example.com\u0026#34; 第三部分：创建和使用仓库 初始化新仓库 1 2 3 mkdir my_project cd my_project git init 克隆现有仓库 1 git clone https://github.com/user/repo.git 仓库结构介绍 .git：Git 用来存储所有版本信息的目录。 第四部分：基本的 Git 工作流程 查看仓库状态 1 git status 将文件添加到暂存区 1 git add \u0026lt;file\u0026gt; 提交更改到仓库 1 git commit -m \u0026#34;Commit message\u0026#34; 查看提交历史 1 git log 第五部分：分支和标签 创建和切换分支 1 2 git branch \u0026lt;branch_name\u0026gt; # 创建新分支 git checkout \u0026lt;branch_name\u0026gt; # 切换到分支 合并分支 1 git merge \u0026lt;branch_name\u0026gt; 删除分支 1 git branch -d \u0026lt;branch_name\u0026gt; 使用标签 1 2 git tag \u0026lt;tag_name\u0026gt; # 创建标签 git checkout \u0026lt;tag_name\u0026gt; # 切换到标签 第六部分：分支策略 特性分支工作流程 创建分支开发特性。 完成特性后合并回主分支。 Git Flow 和 GitHub Flow Git Flow：使用多个分支进行开发、发布、维护。 GitHub Flow：使用单一的 master 分支和特性分支。 第七部分：解决合并冲突 合并冲突的原因 当两个分支修改了同一文件的同一行。 解决冲突的步骤 手动编辑冲突文件。 将更改添加到暂存区。 完成合并提交。 第八部分：远程仓库的使用 添加远程仓库 1 git remote add origin \u0026lt;repository_URL\u0026gt; 推送到远程仓库 1 git push -u origin \u0026lt;branch_name\u0026gt; 从远程仓库拉取 1 git pull 第九部分：高级 Git 技巧 交互式暂存 1 git add -i 修改最近的提交 1 git commit --amend 取消暂存区的更改 1 git reset HEAD \u0026lt;file\u0026gt; 重置分支 1 git reset --hard \u0026lt;commit_hash\u0026gt; 第十部分：使用 Git 进行协作 协作的工作流程 克隆仓库。 创建特性分支。 提交更改。 创建 Pull Request 或 Merge Request。 讨论和审查代码。 合并分支。 代码审查 审查 Pull Request 或 Merge Request。 讨论代码更改。 批准或请求更改。 第十一部分：Git 工具和资源 图形用户界面（GUI）工具 SourceTree GitHub Desktop GitKraken Git 命令行工具 使用 git 命令行工具。 在线资源和社区 Git 官方文档 GitHub 帮助 Stack Overflow 第十二部分：Git 故障排除 常见问题和解决方法 使用 git status 检查状态。 使用 git reflog 查看历史。 使用 git reflog 恢复丢失的提交 1 2 git reflog git checkout \u0026lt;reflog_entry\u0026gt; 第十三部分：Git 安全性 保护你的凭证 使用凭据存储。 使用 SSH 与 HTTPS 生成 SSH 密钥对。 添加 SSH 密钥到你的 Git 服务。 第十四部分：附录 Git 命令速查表 列出常用 Git 命令和它们的用法。 术语表 解释 Git 术语。 ","date":"2024-06-18T20:06:07+08:00","permalink":"https://hublog.netlify.app/p/git-course/","title":"Git教程详解"},{"content":"","date":"2024-06-18T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406019/","title":"《与神对话》摘录"},{"content":"安装系统选择的是中文，生成几个主要目录也是中文，后来终端切换文件夹影响体验，所以改为英文。\n参考：https://wiki.archlinuxcn.org/wiki/XDG_%E7%94%A8%E6%88%B7%E7%9B%AE%E5%BD%95#\n备份\n1 cp ~/.config/user-dirs.dirs ~/.config/user-dirs.dirs.bak 原本的样子\n1 2 3 4 5 6 7 8 XDG_DESKTOP_DIR=\u0026#34;$HOME/桌面\u0026#34; XDG_DOCUMENTS_DIR=\u0026#34;$HOME/文档\u0026#34; XDG_DOWNLOAD_DIR=\u0026#34;$HOME/下载\u0026#34; XDG_MUSIC_DIR=\u0026#34;$HOME/音乐\u0026#34; XDG_PICTURES_DIR=\u0026#34;$HOME/图片\u0026#34; XDG_PUBLICSHARE_DIR=\u0026#34;$HOME/公共\u0026#34; XDG_TEMPLATES_DIR=\u0026#34;$HOME/模板\u0026#34; XDG_VIDEOS_DIR=\u0026#34;$HOME/视频\u0026#34; 修改为英文\n1 vim .config/user-dirs.dirs 1 2 3 4 5 6 7 8 XDG_DESKTOP_DIR=\u0026#34;$HOME/Desktop\u0026#34; XDG_DOCUMENTS_DIR=\u0026#34;$HOME/Documents\u0026#34; XDG_DOWNLOAD_DIR=\u0026#34;$HOME/Downloads\u0026#34; XDG_MUSIC_DIR=\u0026#34;$HOME/Music\u0026#34; XDG_PICTURES_DIR=\u0026#34;$HOME/Pictures\u0026#34; XDG_PUBLICSHARE_DIR=\u0026#34;$HOME/Public\u0026#34; XDG_TEMPLATES_DIR=\u0026#34;$HOME/Templates\u0026#34; XDG_VIDEOS_DIR=\u0026#34;$HOME/Videos\u0026#34; 现在把已经生成的中文文件夹名字改为英文\n1 2 3 4 5 6 7 8 mv \u0026#34;$HOME/桌面\u0026#34; \u0026#34;$HOME/Desktop\u0026#34; mv \u0026#34;$HOME/文档\u0026#34; \u0026#34;$HOME/Documents\u0026#34; mv \u0026#34;$HOME/下载\u0026#34; \u0026#34;$HOME/Downloads\u0026#34; mv \u0026#34;$HOME/音乐\u0026#34; \u0026#34;$HOME/Music\u0026#34; mv \u0026#34;$HOME/图片\u0026#34; \u0026#34;$HOME/Pictures\u0026#34; mv \u0026#34;$HOME/公共\u0026#34; \u0026#34;$HOME/Public\u0026#34; mv \u0026#34;$HOME/模板\u0026#34; \u0026#34;$HOME/Templates\u0026#34; mv \u0026#34;$HOME/视频\u0026#34; \u0026#34;$HOME/Videos\u0026#34; 最后去文件管理器，把原来的位置改为新的位置。\n但是这整个过程第一次好麻烦，记录一下，方便复制。\n其实也可以选择使用英文环境安装系统，但是中文环境安装能自动安装中文输入法。\n","date":"2024-06-17T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406017/","title":"xdg-user-dirs，修改用户目录。"},{"content":"有时候需要查看hosts，每次都是从网上查看，不如自己记录一下\n1 C:\\Windows\\System32\\drivers\\etc 通过移动硬盘系统挂载后的位置（这个比较随机，看系统）\n1 /media/taoone/C0260DE6260DDDF2/Windows/System32/drivers/etc/ ","date":"2024-06-16T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406016/","title":"Windows下hosts所在目录"},{"content":"原文链接：https://www.seektao.cc/archives/typora-install-activation\n！！！2024-06-15更新全文内容和排版，包括标题！！！\n今天（2024-06-15）新装了一个debian12系统，根据本教程安装了最新版typora并激活，发现竟然失效了，截止今天typora的最新版是 1.8.10，看来是typora修复了，于是我去下载本教程编写时候对应的最新版1.7.5，官网竟然关闭了下载通道，提供离1.7.5的最近的是1.7,6，于是我又下载1.7.6，激活也失败告终，看来只能使用1.7.5了，还好我有备份，不过存在阿里云盘，要登陆，不方便下载，当时本想着这法子是不会失效的，结果。。\n所以本文在之前的内容基础上进行整体更新。\n如果只想快速使用，不想编译，可跳转到 合集仓库 查看安装\n下载安装 Debian 系统版本为：debian12.2\n下载地址：\n123盘：https://www.123pan.com/s/4MOKVv-LNnpd.html提取码:love\n蓝奏云：https://lzygood.lanzouv.com/iEZbz21vzhre 密码:love\n为什么不用阿里云盘？zip不让分享！！限制真多。\n下载后安装：\n1 sudo dpkg -i typora_1.7.5_amd64.deb Windows windows用的是直接解压就可以用的。\n安装包阿里云盘不让分享，嘶。。所以我再次特地下载后上传到蓝奏云和123盘\n蓝奏云：https://lzygood.lanzouv.com/ifJz721w5xla 密码:love\n123盘：https://www.123pan.com/s/4MOKVv-5Nnpd.html提取码:love\n编译可执行文件 此步骤是自己手动编译为自己系统的可执行文件。本次采用系统环境是 debian12\n以下命令均为绝对路径，只需要复制粘贴即可\n克隆项目 克隆这两个仓库到本地\n1 git clone https://github.com/muyiacc/NodeInject.git ~/.NodeInject \u0026amp;\u0026amp; git clone https://github.com/muyiacc/NodeInject_Hook_example.git ~/.NodeInject_Hook_example 将NodeInject_Hook_example下hook.js 复制到 NodeInject/src下，并改名为hooklog.js\n1 cp ~/.NodeInject_Hook_example/hook.js ~/.NodeInject/src/hooklog.js 安装rust 需要用到cargo，这是rust所包含的包管理工具，所以还得安装rust\n1 curl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh 中间选择 1 使用默认推荐安装，安装完成之后，接着刷新环境\n1 source \u0026#34;$HOME/.cargo/env\u0026#34; 接着在终端输入，测试安装是否成功\n1 cargo -V 输出如下信息则安装成功\n1 cargo 1.73.0 (9c4383fb5 2023-08-26) 编译可执行文件 进入NodeInject编译\n1 cd ~/.NodeInject \u0026amp;\u0026amp; cargo build 如果提示缺乏 gcc，需要安装gcc debian：sudo apt install gcc\n激活typora 将编译后的可执行文件复制到 typora文件夹下，执行复制的文件\n1 sudo cp ~/.NodeInject/target/debug/node_inject /usr/share/typora/ \u0026amp;\u0026amp; sudo /usr/share/typora/node_inject 这里出现如下信息，则到目前为止，没有任何问题。\n1 2 3 4 5 extracting node_modules.asar adding hook.js applying patch packing node_modules.asar done! 切换回 NodeInject_Hook_example，生成 license\n1 cd ~/.NodeInject_Hook_example/license-gen/ \u0026amp;\u0026amp; cargo build \u0026amp;\u0026amp; ~/.NodeInject_Hook_example/license-gen/target/debug/license-gen 接着出现 license\n1 License for you: 5QSW2H-X9GNBU-64F2MZ-YYHJ7W 打开typora，输入邮箱和许可证激活，就可以激活了。\n合集仓库 上面分享的软件和可执行文件我建了一个仓库，更便于下载了：\n地址：https://github.com/muyiacc/typora-activation\ntypora存放的是typora历史版本 直接上传有问题，采用release发布\nactivation存放的是破解执行文件\n如果是直接使用我编译文件，以debain为例\n下载安装typora，可以选择Github内的文件，也可以选择 上面分享的链接下载\n下载执行的文件\n将node_inject复制到typora目录（/usr/share/typora/）\n1 cp node_inject /usr/share/typora/ \u0026amp;\u0026amp; cd /usr/share/typora/ \u0026amp;\u0026amp; sudo ./node_inject 执行证书生成文件，生成证书 1 ./license-gen 打开typora，输入刚才生成的许可证和随机邮箱即可。 卸载typora 有时候会因为卸载不干净而激活失败，所以这里给出彻底卸载typora方式\nDebian 1 2 3 4 5 6 7 8 9 10 11 12 13 sudo apt remove typora find ~/.config -iname \u0026#39;*typora*\u0026#39; -exec rm -rf {} + find ~/.cache -iname \u0026#39;*typora*\u0026#39; -exec rm -rf {} + find ~/.local/share -iname \u0026#39;*typora*\u0026#39; -exec rm -rf {} + sudo apt autoremove sudo apt clean sudo rm -rf /usr/share/typora 替代方案 marktext obsibian ","date":"2024-06-15T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406015/","title":"Typora安装，激活"},{"content":"启用屏幕录制提示错误：\n1 2 3 KDE Portal Integration Failed to start screencasting Failed to create PipeWire context 解决办法\n1 2 sudo apt install pipewire # 安装 pipewire systemctl --user start pipewire # 在用户空间，启动 pipewire 服务 重启obs-studio\n","date":"2024-06-14T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406014/","title":"obs-studio在wayland环境下出现黑屏，解决方案"},{"content":"marktext 破解 typora 怎么说都不是一件值得推广的事，在寻找 typora 替代软件的过程中，发现了 marktext，外观类似 typora，有些方面可能更美观。神奇的是目前（2024-06-15）已经 45k star 了，但是已经很久没有更新发行版了，最新的版本还停留在 2022 年 3 月，Issuse 已经积累到 1.1k，pull requests42 各没有处理。仓库的 develop 分支还在小幅度不定时更新，也一直没合并到主分支。\n地址：https://github.com/marktext/marktext\n安装后主界面长这样\n整体默认的样式看上去就很舒服，细心的同学可以看到，代码块有复制按钮，同 obsibian 一样，但是 obsibian 太丑了。\n目前有几个影响写作体验感的方面：\n无法识别 picgo，也无法设置命令行，这对写文章需要图片上传的时候是个很严重的影响。 可以看到左侧显示没有 picgo，右边全局变量设置后其实已经可以用了，切换到命令行脚本，实际上却无法保存。\n当然了，这也不知道是不是和我的环境有关。\ntypora 剪贴板有超链接，使用 ctrl+k 后自动补全，光标自动跳转到链接标题，输入即可，这点体验感很好。但是 marktext 还是在链接末尾，需要手动调整光标到标题框。\n另一个是 marktext 粘贴超链接到文档中有明显的卡顿。\n这两点对于我写作就有相当大的考验，总观全文，你就知道我为了方便查看跳转设置了多个带标题的超链接，而不是直接粘贴链接，那样太影响阅读体验了。\nmarktext 连续的两个代码块之间新增一行，~~变得很困难，~~比如我有时侯会修改内容，现在有两个代码块，我在后面的代码块前面新增说明而不是写入代码块中，typora 只需要通过键盘将光标定位到前面的代码块最后一行的最后位置，按 ctrl+enter，即可新建一行不包含代码块的内容。\n在 marktext 中则是需要移动鼠标到代码块前面，在弹出的框选择New Paragraph。\n使用少，经验不足，原来有个内置的快捷键ctrl+shift+n即可新建一行，不管光标在代码哪个位置，即可新建一行，反转！比 typora 更好用，typora 要么使用上述使用的方案，要么使用菜单-段落-在下方插入段落。而这个操作 typora 自定义快捷键更麻烦。\n最后，如果在众多软件中选择一个替代品，我优先推荐 marktext。\nObsibian 它并不能算一个纯粹的 Markdown 编辑器，而是一个 markdown 仓库管理软件，网络上已经有很多人介绍过了，我这就不献丑了。\n推荐和 typora 或 marktext 一起使用，obsibian 管理仓库，不好编辑的时候交给 typora 或者 marktext。\n它很强大，但是默认有点点丑，需要自己摸索。我一般用来管理 markdown 文章。\n下面是我定制 obsibian 过后的界面：\n","date":"2024-06-13T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406013/","title":"Markdown软件推荐，Typora下位替代品marktext"},{"content":"https://github.com/pdone/lx-music-source\nhttps://github.com/Huibq/keep-alive\n在线导入 - 原始链接 SixYin\n1 https://raw.githubusercontent.com/pdone/lx-music-source/main/sixyin/latest.js Huibq\n1 https://raw.githubusercontent.com/pdone/lx-music-source/main/huibq/latest.js Flower\n1 https://raw.githubusercontent.com/pdone/lx-music-source/main/flower/latest.js LX\n1 https://raw.githubusercontent.com/pdone/lx-music-source/main/lx/latest.js ikun\n1 https://raw.githubusercontent.com/pdone/lx-music-source/main/ikun/latest.js Grass\n1 https://raw.githubusercontent.com/pdone/lx-music-source/main/grass/latest.js 在线导入 - 加速链接 SixYin\n1 https://ghproxy.net/raw.githubusercontent.com/pdone/lx-music-source/main/sixyin/latest.js Huibq\n1 https://ghproxy.net/raw.githubusercontent.com/pdone/lx-music-source/main/huibq/latest.js Flower\n1 https://ghproxy.net/raw.githubusercontent.com/pdone/lx-music-source/main/flower/latest.js LX\n1 https://ghproxy.net/raw.githubusercontent.com/pdone/lx-music-source/main/lx/latest.js ikun\n1 https://ghproxy.net/raw.githubusercontent.com/pdone/lx-music-source/main/ikun/latest.js Grass\n1 https://ghproxy.net/raw.githubusercontent.com/pdone/lx-music-source/main/grass/latest.js ","date":"2024-06-12T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406012/","title":"lx-music落雪音乐，音源"},{"content":"首先极不建议过多美化，美化过重导致系统容易崩溃不说，又占用资源，又耗费时间，且我觉得不耐看，要知道，美化的尽头是默认。。。\n本章目录结构采用和kde系统设置一致，便于查看\n外观 全局主题 欢迎屏幕 默认实在是丑了，换一个\nQuarksSplashDark：下载量排行榜第一\nVivid-Splash\n工作区 窗口管理 任务切换器 Classic task switcher\n开机与关机 登陆屏幕 Sugar Candy for SDDM\n","date":"2024-06-11T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406011/","title":"Linux系统桌面Kde plasma个性化设置"},{"content":" 1 sudo apt install ftp 1 2 sudo useradd -m -d /home/ftp/new_username -s /sbin/nologin new_username sudo passwd new_username ","date":"2024-06-10T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406010/","title":"Linux搭建ftp服务"},{"content":"前言 以前写过一篇关于archlinux开机自动挂载windows磁盘的文章，这次教程和之前核心一样，都需要安装ntfs-3g，但是/etc/fstable 文件编写的内容不一样`\n关于/etc/fatable 文件各列的简单解释：\n第一列是挂载的设备（可以填写设备label或者uuid） 第二列是挂载点。（必须是已经存在的目录） 第三列是分区的格式。（如ntfs、btrfs、ext2、ext3、nfs、vfat） 第四列是mount的挂载参数，一般情况下，直接写defaults即可。 第五列的数字表示是否被dump备份，是的话为1，不是为0。 第六列是开机时是否自检磁盘。1，2都表示检测，0表示不检测。但1，2表示不同的优先级，1更高。所以/ 分区必须设为1，而且整个fstab只允许出现一个1，若有多个分区需要检测，那么都设为2。 准备 本身直接挂载windows磁盘也是可以的，不过需要每次都输入密码，为了解决这个问题，所以需要安装 ntfs-3g\n源码：https://github.com/tuxera/ntfs-3g\n下面介绍各个系统如何自动挂载windows磁盘\nDebian系统 此节介绍Debian系统通过ntfs-3g自动挂载磁盘\n安装ntfs-3g\n1 sudo apt install ntfs-3g 创建自动挂载服务\n1 sudo vim /etc/systemd/system/windows-mount.service 1 2 3 4 5 6 7 8 9 10 11 12 [Unit] Description=Mount Windows Partition After=network-online.target Wants=network-online.target [Service] ExecStart=/usr/bin/mount -a Type=oneshot RemainAfterExit=yes [Install] WantedBy=default.target 服务开机自启动\n1 2 sudo systemctl enable windows-mount.service sudo systemctl start windows-mount.service 查看/etc/fstab，仿照格式，将windows磁盘对应的信息填进去\n1 cat /etc/fstab 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # /etc/fstab: static file system information. # # Use \u0026#39;blkid\u0026#39; to print the universally unique identifier for a # device; this may be used with UUID= as a more robust way to name devices # that works even if disks are added and removed. See fstab(5). # # systemd generates mount units based on this file, see systemd.mount(5). # Please run \u0026#39;systemctl daemon-reload\u0026#39; after making changes here. # # \u0026lt;file system\u0026gt; \u0026lt;mount point\u0026gt; \u0026lt;type\u0026gt; \u0026lt;options\u0026gt; \u0026lt;dump\u0026gt; \u0026lt;pass\u0026gt; # / was on /dev/sda2 during installation UUID=97f36186-e41b-4a80-b3e2-306671b3a72a / ext4 errors=remount-ro 0 1 # /boot/efi was on /dev/sda1 during installation UUID=B601-46F5 /boot/efi vfat umask=0077 0 1 # swap was on /dev/sda3 during installation UUID=185f74ac-8a42-4433-8fbe-361f63ef7320 none swap sw 0 0 查看磁盘详细信息\n1 lsblk -o NAME,FSTYPE,SIZE,MOUNTPOINT,LABEL,UUID 创建挂载点\n1 2 # 创建挂载点，文件夹必须存在 sudo mkdir -p /mnt/c /mnt/d /mnt/e 编辑/etc/fstab\n1 sudo vim /etc/fstab 填入如下内容（请修改为自己的磁盘信息）\n1 2 3 4 5 6 # windows c UUID=C0260DE6260DDDF2 /mnt/c ntfs-3g defaults 0 0 # windows d UUID=72C2959BC29563DF /mnt/d ntfs-3g defaults 0 0 # windows e UUID=C6A4ED67A4ED5A87 /mnt/e ntfs-3g defaults 0 0 重启系统，查看是否成功\n","date":"2024-06-09T16:06:01+08:00","image":"https://s2.loli.net/2024/10/03/nEjbHgrFzmXRsc8.png","permalink":"https://hublog.netlify.app/p/2406009/","title":"Linux开机自动挂载Windows磁盘"},{"content":"GitHub地址：https://github.com/hideuvpn/android-google-play-store\n本篇介绍如何安装最新版google框架和play store\n三件套是：\ngoogle服务框架 google play service google play store 安装google服务框架 https://www.apkmirror.com/apk/google-inc/google-services-framework/\n","date":"2024-06-07T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406007/","title":"google三件套"},{"content":"帮助信息：https://support.mozilla.org/zh-CN/kb/%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E2%80%94%E2%80%94Firefox%20%E4%BF%9D%E5%AD%98%E4%B9%A6%E7%AD%BE%E3%80%81%E5%AF%86%E7%A0%81%E5%92%8C%E5%85%B6%E4%BB%96%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%87%E4%BB%B6#w_finding-your-profile-without-opening-firefox\nwindows\n1 2 C:\\Users\\\u0026lt;your Windows login username\u0026gt;\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\ Windows ","date":"2024-06-06T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406006/","title":"firefox用户配置文件——Firefox 保存书签、密码和其他用户数据的文件"},{"content":"前言 2024-06-06，未知原因 docker.com 国内镜像全都被要求下架服务。\n为了另求出路，采用 cloudflare wokers pages 搭建镜像服务。\n特点：免费、简单\n部署 本次使用 cmliu 提供的代码。\n地址：https://github.com/muyiacc/CF-Workers-docker.io\n克隆仓库，登陆 cloudflare，选择 Wokers \u0026amp; Pages create an application 选择 pages - connect to git - github - github account - select a repository begin setup custom domains 第 5 步自定义的域名即是 docker 镜像地址，如本人搭建的服务：\nhttps://docker.ksg.us.kg 访问这个网址可查找镜像\n配置镜像 修改文件 /etc/docker/daemon.json，如果不存在则需要手动创建\n1 2 3 4 5 6 7 8 9 10 11 sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json \u0026lt;\u0026lt;-\u0026#39;EOF\u0026#39; { \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://docker.ksg.us.kg\u0026#34;, \u0026#34;https://docker.1panelproxy.com\u0026#34; ] } EOF sudo systemctl daemon-reload sudo systemctl restart docker 镜像列表 收集的公益镜像：\n1 2 3 4 https://docker.526899.xyz https://docker.1panelproxy.com https://docker.888666222.xyz https://docker.rainbond.cc 相似项目：https://github.com/muyiacc/cloudflare-docker-proxy\n2025-05-18更新\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 { \u0026#34;registry-mirrors\u0026#34; : [ \u0026#34;https://docker.registry.cyou\u0026#34;, \u0026#34;https://docker-cf.registry.cyou\u0026#34;, \u0026#34;https://dockercf.jsdelivr.fyi\u0026#34;, \u0026#34;https://docker.jsdelivr.fyi\u0026#34;, \u0026#34;https://dockertest.jsdelivr.fyi\u0026#34;, \u0026#34;https://mirror.aliyuncs.com\u0026#34;, \u0026#34;https://dockerproxy.com\u0026#34;, \u0026#34;https://mirror.baidubce.com\u0026#34;, \u0026#34;https://docker.m.daocloud.io\u0026#34;, \u0026#34;https://docker.nju.edu.cn\u0026#34;, \u0026#34;https://docker.mirrors.sjtug.sjtu.edu.cn\u0026#34;, \u0026#34;https://docker.mirrors.ustc.edu.cn\u0026#34;, \u0026#34;https://mirror.iscas.ac.cn\u0026#34;, \u0026#34;https://docker.rainbond.cc\u0026#34;, \u0026#34;https://do.nark.eu.org\u0026#34;, \u0026#34;https://dc.j8.work\u0026#34;, \u0026#34;https://dockerproxy.com\u0026#34;, \u0026#34;https://gst6rzl9.mirror.aliyuncs.com\u0026#34;, \u0026#34;https://registry.docker-cn.com\u0026#34;, \u0026#34;http://hub-mirror.c.163.com\u0026#34;, \u0026#34;http://mirrors.ustc.edu.cn/\u0026#34;, \u0026#34;https://mirrors.tuna.tsinghua.edu.cn/\u0026#34;, \u0026#34;http://mirrors.sohu.com/\u0026#34; ], \u0026#34;insecure-registries\u0026#34; : [ \u0026#34;registry.docker-cn.com\u0026#34;, \u0026#34;docker.mirrors.ustc.edu.cn\u0026#34; ], \u0026#34;debug\u0026#34;: true, \u0026#34;experimental\u0026#34;: false } ","date":"2024-06-05T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406005/","title":"部署自己的Docker Hub镜像站，附Docker Hub镜像地址"},{"content":"卸载apt安装的obs\n1 2 3 4 5 sudo apt remove obs-studio rm -r ~/.config/obs-studio sudo apt purge obs-studio sudo apt autoremove sudo apt clean 安装flathub\n其他系统：Set Up Flathub | Flathub\n1 sudo apt install flatpak 如果是gnome\n1 sudo apt install gnome-software-plugin-flatpak 如果是kde\n1 sudo apt install plasma-discover-backend-flatpak 添加flathub仓库\n1 flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo 重启系统。\n重启后，安装obs-studio\n1 flatpak install flathub com.obsproject.Studio 如果下载速度慢，换flathub镜像源\n上海交大的，镜像帮助地址：https://mirrors.sjtug.sjtu.edu.cn/docs/flathub\n1 sudo flatpak remote-modify flathub --url=https://mirror.sjtu.edu.cn/flathub 运行obs-sutdio\n1 flatpak run com.obsproject.Studio ","date":"2024-06-04T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406004/","title":"Debian12通过flatapk安装"},{"content":"安装系统时，选择了其中一个桌面环境如xfce，安装完成后，现在我想换另一个，比如kde、gnome，该怎么做呢？\ngnome 1 2 sudo apt update sudo apt install gnome-core kde 1 2 sudo apt update sudo apt install kde-plasma-desktop 安装后需要选择对应的显示管理器，以下为对应桌面环境的显示管理器\nGNOME：通常使用 gdm3（GNOME Display Manager 3）作为默认显示管理器。\nKDE Plasma：通常使用 sddm（Simple Desktop Display Manager）或 lightdm，尽管 lightdm 可以配置为与 KDE Plasma 很好地配合工作。\nXFCE：通常推荐使用 lightdm 或 xdm（X Display Manager），但 lightdm 是更现代的选择。\nLXDE：可以使用 slim（Simple Login Manager）或 lightdm。\nMATE：通常使用 mate-display-manager 或 gdm3，因为 MATE 基于 GNOME 2 的代码。\nCinnamon：通常使用 lightdm 或 gdm3。\nBudgie：通常使用 gdm3，因为 Budgie 是基于 GNOME 的。\nDeepin：通常使用 lightdm。\nEnlightenment：使用 enlightenment_start，这是 Enlightenment 的一部分。\ni3：通常不使用传统的显示管理器，而是直接从 xinit 或类似的工具启动。\n","date":"2024-06-03T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406003/","title":"Debian12安装新的桌面环境"},{"content":"Debian 要在Debian上安装字体，可以按照以下步骤进行操作：\n打开终端，以管理员权限运行以下命令更新软件包列表：\n1 sudo apt update 安装字体管理工具（fontconfig）：\n1 sudo apt install fontconfig 将字体文件复制到系统字体目录（/usr/share/fonts/）或用户字体目录（~/.fonts/）。例如，假设你有一个名为\u0026quot;font.ttf\u0026quot;的字体文件，可以使用以下命令将其复制到系统字体目录：\n1 sudo cp font.ttf /usr/share/fonts/ 或者，如果你想将字体文件复制到用户字体目录，可以使用以下命令：\n1 cp font.ttf ~/.fonts/ 运行以下命令更新字体缓存：\n1 sudo fc-cache -f -v 这将重新生成字体缓存，使系统能够识别新安装的字体文件。\n完成后，你可以在应用程序中选择新安装的字体进行使用。\n字体推荐 fira code https://github.com/tonsky/FiraCode/releases/tag/6.2\n1 sudo mkdir -p /usr/share/fonts/fira_code \u0026amp;\u0026amp; sudo unzip Fira_Code_v6.2.zip -d /usr/share/fonts/fira_code/ \u0026amp;\u0026amp; fc-cache -f -v 简单预览\n","date":"2024-06-02T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406002/","title":"Linux安装字体"},{"content":"地址：https://www.registry.com.mp/\ndns解析：https://hostry.com\n","date":"2024-06-01T16:06:01+08:00","permalink":"https://hublog.netlify.app/p/2406001/","title":"com.mp免费域名注册"},{"content":"最近需要电子版规档，其中一部分内容需要”手写“，只能另辟蹊径，最后找到了这个东西\u0026mdash;-公文处理助手\n它可以将规整的一行字体打乱，模拟手写效果。像这样：\n光靠办公助手还是不行的，除此之外还需要 ”手写字体“，这两个网站可以免费下载字体\n字体天下-云峰寒蝉体 字体天下-上首鸿志手写体 字体家-遇见你时很甜\n关于更多手写字体可以自己网上找找。\n公文处理助手\u0026amp;办公助手：http://gwclzs.cn/ 下载地址：http://www.gwclzs.cn/%E5%8A%9E%E5%85%AC%E5%8A%A9%E6%89%8B.zip\n安装完成后，打开word，点击：公文处理助手-编号-仿手写\n就可以看到啦\n不过开启后有些卡顿，我的建议是不用时可以禁用，禁用方式为：\n文件-选项-加载项-管理(A)com加载项 转到按钮-取消公文处理助手勾选-确定即可\n或者\u0026hellip;.卸载？？\n","date":"2024-05-12T16:05:43+08:00","permalink":"https://hublog.netlify.app/p/2405012/","title":"公文处理助手\u0026办公助手"},{"content":"Linux Bench.sh 秋水逸冰大佬的写的Bench.sh脚本\n特点\n显示当前测试的各种系统信息； 取自世界多处的知名数据中心的测试点，下载测试比较全面； 支持 IPv6 下载测速； IO 测试三次，并显示平均值。 使用\n1 wget -qO- bench.sh | bash 1 curl -Lso- bench.sh | bash 1 wget -qO- 86.re/bench.sh | bash 1 curl -so- 86.re/bench.sh | bash FreeBSD 没有root权限测速\n1 pip install --user speedtest-cli 1 ~/.local/bin/speedtest-cli ","date":"2024-05-11T16:05:43+08:00","permalink":"https://hublog.netlify.app/p/2405011/","title":"VPS性能测试脚本"},{"content":"项目地址：https://github.com/SpotX-Official/SpotX\n1 iex \u0026#34;\u0026amp; { $(iwr -useb \u0026#39;https://raw.githubusercontent.com/SpotX-Official/spotx-official.github.io/main/run.ps1\u0026#39;) } -new_theme\u0026#34; ","date":"2024-05-10T16:05:43+08:00","permalink":"https://hublog.netlify.app/p/2405010/","title":"SpotX，Spotify的开源去广告工具"},{"content":"Monica 是一个使用最先进的 AI 模型（GPT-4、Claude 3、Gemini 等）帮助你对话、搜索、写作、翻译的一站式 AI 助手。\n温馨提示：该网站需要魔法\n通过我的邀请链接注册可获得 100 次查询，包含5 Claude 3/GPT-4 \u0026amp; 95 GPT-3.5。还有机会获得无限标准（永久无限的GPT3.5）的查询。\n邀请链接：https://bit.ly/44MQEh9\n获得永久免费的无限 GPT 查询次数！点击链接并下载Monica插件，即可参加限时活动。\n也可扫描二维码：\n","date":"2024-05-09T16:05:43+08:00","permalink":"https://hublog.netlify.app/p/2405009/","title":"Monica，一个使用最先进的AI模型（GPT-4、Claude3、Gemini 等）帮助你对话、搜索、写作、翻译的一站式 AI 助手。"},{"content":"Monica 是一个使用最先进的 AI 模型（GPT-4、Claude 3、Gemini 等）帮助你对话、搜索、写作、翻译的一站式 AI 助手。\n温馨提示：该网站需要魔法\n通过我的邀请链接注册可获得 100 次查询，包含5 Claude 3/GPT-4 \u0026amp; 95 GPT-3.5。还有机会获得无限标准（永久无限的GPT3.5）的查询。\n邀请链接：https://bit.ly/44MQEh9\n获得永久免费的无限 GPT 查询次数！点击链接并下载Monica插件，即可参加限时活动。\n也可扫描二维码：\n","date":"2024-05-08T16:05:43+08:00","permalink":"https://hublog.netlify.app/p/2405008/","title":"Monica，ChatGPT AI助手"},{"content":"最开始的话 在写这篇文章时，我可是广搜资料，尝试了太多方式，都不能远程访问，jupyter官方网站也没找到教程，尝试了一个下午和一个晚上也没整好，导致瞌睡都没睡好，第二天早上，突然灵光乍现，改变了修改的配置文件，然后就成了！！这其中的辛酸，不足道也。\n起因 为了更好，更便捷的使用python，在服务器上安装jupyterlab，随时随地都可访问。\n步骤 一、安装minconda（非必须，但建议） 使用conda可以更好的管理包和环境，所以采用conda的方式安装jupyter和python，环境新建一个，再使用即可\n下载minconda，下载的位置任意即可\n1 curl https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh 下载完成后的名字为 Miniconda3-latest-Linux-x86_64.sh ，给它赋予可执行权限\n1 chmod +x Miniconda3-latest-Linux-x86_64.sh 安装执行，根据提示安装即可\n1 ./Miniconda3-latest-Linux-x86_64.sh 如果还需要配置环境变量，因为我使用的是zsh，命令如下（不可全抄，路径可能不一样）\n1 2 3 4 5 # zsh环境执行这个 echo \u0026#34;PATH=$PATH:~/minconda/bin\u0026#34; \u0026gt;\u0026gt; ~/.zshrc # bash环境执行这个 echo \u0026#34;PATH=$PATH:~/minconda/bin\u0026#34; \u0026gt;\u0026gt; ~/.bashrc 新建一个python环境\n1 conda create -n lab python=3.10 如果下载速度比较慢，那么需要修改镜像源\n1 2 3 4 5 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/ conda config --set show_channel_urls yes 激活环境\n1 conda activate lab 默认情况下，会进入base环境，我的建议是可以关闭默认base环境\n1 conda config --set auto_activate_base false 二、安装jupyterlab 本文采用的是conda安装jupyter，执行如下命令\n1 2 3 4 5 6 7 8 9 10 # 进入conda创建的环境，前文已经创建 conda activate lab # 安装jupyterlab conda install jupyter # 或者，建议安装jupyter,比较全 conda install jupyterlab # 退出环境 conda deactivate 如果使用python自带的pip安装，那么执行\n1 pip install jupyter 三、修改配置，使jupyterlab可以远程连接（重要） 这步是核心，生成的命令有,有的教程用的是jupyter notebook，我需要的jupyter lab，还有的教程用的是jupyter lab，生成的却是jupyter notebook，我想不是很理解这个做法。根据最后结果，生成的文件配置了也是不能生效的，这部分可花了我太多时间了，我一个一个尝试，都以失败告终。这点希望后来人引以为戒\n1 2 3 jupyter server --generate-config jupyter-lab --generate-config jupyter-notebook --generate-config 以下为成功配置：\n直接生成密码配置文件，jupyter远程访问，没有密码怎么可以呢，请妥善保存密码，后续登录jupyter lab会用到\n至于为什么要先生成密码，后续会用到生成的配置文件，默认位置会在家目录生成 .jupyter/jupyter_server_config.json\n我的则是 /home/ecs-user/.jupyter/jupyter_server_config.json，如下所示\n1 2 3 4 5 jupyter server password Enter password: Verify password: [JupyterPasswordApp] Wrote hashed password to /home/ecs-user/.jupyter/jupyter_server_config.json 在 jupyter_server_config.json 文件里面，默认生成就是密码了，如图\n​编辑\n修改生成的 json文件，我们需要添加的内容有\n1 2 3 4 5 \u0026#34;ip\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;port\u0026#34;: 8899, \u0026#34;open_browser\u0026#34;: false, \u0026#34;allow_remote_access\u0026#34;: true \u0026#34;notebook_dir\u0026#34;: \u0026#34;/home/ecs-user/codespace/jupyterProjects\u0026#34; 根据实际情况修改即可，\nip 直接填 * 号即可\nport 为端口号，你可以更改，\nopen_browser 为默认打开浏览器，服务器资源宝贵，没安装图形化界面，关闭\nallow_remote_access 允许远程访问，这个必须打开\nnotebook_dir jupyter默认打开的位置\n修改后如图所示：\n​编辑\n四、查看配置项（非必须） 在第三步中，给出的配置项从哪知道呢，这就可以用到生成默认配置文件模板了\n1 2 jupyter server --generate-config ─╯ Writing default config to: /home/ecs-user/.jupyter/jupyter_server_config.py 生成的文件默认路径在用户家目录下 .jupyter/jupyter_server_config.py\n重要！！！：如果你生成了该文件，请修改名字，否则会导致jupyter lab启动读取该文件而不读取json文件，而该文件就算修改了也没有效果，谨记！！！\n1 mv jupyter_server_config.py jupyter_server_config.py.1 我们先来瞄一眼大概长什么样\n​编辑\n​编辑\n来对比一下 jupyter_server_config.json\n​编辑\n根据如上图的对比所示，大致也明白了，json文件中该如何修改了。\n五、启动jupyter lab 在 使用 lab 环境下\n1 2 # 使用lab环境 conda activate lab 5.1 前台启动（不建议） 1 2 # 启动jupyter lab jupyter-lab ​编辑\n5.1 后台启动（推荐） 1 2 # 后台启动，标准输出重定向到 /dev/null 标准错误重定向到 标准输出 nohup jupyter-lab \u0026gt;/deb/null 2\u0026gt;\u0026amp;1 \u0026amp; ​编辑\n打开本地浏览器窗口，输入ip:port，输入密码（这个密码在生成密码配置文件的时候输入的密码）\n如果服务端安全组端口没有打开，请自寻资料打开；\n防火墙需要关闭的关闭；\n这里就不介绍了\n输入ip和端口后，界面如下\n​编辑\n输入密码，进入如下界面\n​编辑\n至此，恭喜你，终于完成了，完结撒花 ｡:.ﾟヽ(｡◕‿◕｡)ﾉﾟ.:｡+ﾟ\n​\n","date":"2024-05-06T16:05:43+08:00","permalink":"https://hublog.netlify.app/p/2405006/","title":"Linux（Debian）安装jupyter lab，实现远程登录访问"},{"content":"","date":"2024-05-05T16:05:43+08:00","permalink":"https://hublog.netlify.app/p/2405005/","title":"dujiaoka独角卡安装，docker版本"},{"content":"前言 certbot 安装还是过于麻烦， snap 不轻量，不使用 snap 使用 nginx 申请容易出问题，使用 acme.sh 申请 ssl 证书 之后，发现很方便\n相比于 certbot 不同的地方在于 acme 使用 nginx/apaceh 申请证书不会修改原有的配置\n好处：不用担心配置被搞坏 缺点：需要手动配置 ssl 证书的位置。 简介 acme.sh 是一个轻量级的、纯 Shell 脚本实现的 ACME 协议客户端，主要用于自动化获取和续订 SSL/TLS 证书。它支持 Let\u0026rsquo;s Encrypt 和其他 ACME 兼容的证书颁发机构（CA）。\n主要特点 简单易用：用户只需通过简单的命令行操作即可获取和管理证书。 轻量级：不依赖于复杂的编程语言，易于部署和维护。 多种 DNS 插件：支持多种 DNS 提供商的 API，便于自动化 DNS 验证。 支持多种证书类型：可以获取通配符证书和普通域名证书。 灵活的配置：支持用户自定义配置和命令，满足不同需求。 acme.sh 是一个非常适合希望简化 SSL/TLS 证书管理流程的用户和开发者的工具。\n项目地址：https://github.com/acmesh-official/acme.sh\n后续所有 SSL/TLS 证书简称 证书\n快速上手 如果你想直接使用 acme.sh 这里提供一个简要教程\n需要修改：\n邮箱mail@yourdomain.com 域名yourdomain.com 安装 acme.sh\n将 mail@yourdoamin.com 修改为申请证书的邮箱\n1 curl https://get.acme.sh | sh -s email=mail@yourdomain.com 刷新环境变量\n1 source ~/.bashrc 修改证书 CA 机构\n1 acme.sh --set-default-ca --server letsencrypt 申请证书\n1 acme.sh --issue -d yourdomain.com --standalone 创建证书文件夹\n1 mkdir -p /etc/cert 安装证书\n1 2 3 acme.sh --install-cert -d yourdomain.com \\ --key-file /etc/cert/key.pem \\ --fullchain-file /etc/cert/cert.pem 详细内容请查看后续\n安装 acme.sh 国外服务器\n将 mail@yourdoamin.com 修改为申请证书的邮箱\n1 curl https://get.acme.sh | sh -s email=mail@yourdomain.com 1 source ~/.bashrc 国内服务器\n将 mail@yourdoamin.com 修改为申请证书的邮箱\n1 2 3 git clone https://gitee.com/neilpang/acme.sh.git cd acme.sh ./acme.sh --install -m mail@yourdomain.com 卸载 acme.sh 待续\n修改证书 CA 机构 默认证书的 CA 机构是 zerossl\n在申请证书之前，可以通过如下命令修改 CA 机构\n1 acme.sh --set-default-ca --server letsencrypt 生成证书：HTTP 方式 apache 待续\u0026hellip;\nnginx 先在 nginx 配置文件夹新增 conf 文件，填好基础的模板，比如：\n1 2 3 4 5 6 7 8 9 10 11 12 server { listen 80; server_name yourdomain.com; location / { proxy_pass http://127.0.0.1:8080; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } 修改为自己的信息\n再使用 acme.sh 申请\n1 acme.sh --issue -d yourdomain.com --nginx no web server 如果你还没有运行任何 web 服务, 80 端口是空闲的, 那么 acme.sh 还能假装自己是一个 webserver, 临时听在80 端口, 完成验证:\n1 acme.sh --issue -d yourdomain.com --standalone 更高级的用法请参考: https://github.com/Neilpang/acme.sh/wiki/How-to-issue-a-cert\n生成证书：DNS 方式（推荐） 手动 DNS 方式 手动在域名上添加一条 txt 解析记录, 验证域名所有权.\n好处：你不需要任何服务器, 不需要任何公网 ip, 只需要 dns 的解析记录即可完成验证\n缺点：如果不同时配置 Automatic DNS API，使用这种方式 acme.sh 将无法自动更新证书，每次都需要手动再次重新解析验证域名所有权。\n1 2 acme.sh --issue --dns -d yourdomain.com \\ --yes-I-know-dns-manual-mode-enough-go-ahead-please 然后, acme.sh 会生成相应的解析记录显示出来, 你只需要在你的域名管理面板中添加这条 txt 记录即可.\n等待解析完成之后, 重新生成证书:\n1 2 acme.sh --renew -d yourdomain.com \\ --yes-I-know-dns-manual-mode-enough-go-ahead-please 注意第二次这里用的是 --renew\n自动 DNS 方式（推荐） DNS 方式的强大之处在于可以使用域名解析商提供的 api 自动添加 txt 记录完成验证\nacme.sh 目前支持 cloudflare, dnspod, cloudxns, godaddy 以及 ovh 等数十种解析商的自动集成\ncloudflare 域名托管在 cloudflare 上申请方式\n单个域名 登录 cloudflare ,\n查看域名的 Zone ID\n1 763eac4f1bcebd8b5c95e9fc50d010b4 创建 API Token\n设置环境变量\n1 2 export CF_Token=\u0026#34;Y_jpG9AnfQmuX5Ss9M_qaNab6SQwme3HWXNDzRWs\u0026#34; export CF_Zone_ID=\u0026#34;763eac4f1bcebd8b5c95e9fc50d010b4\u0026#34; 申请证书\n1 acme.sh --issue --dns dns_cf -d yourdomain.com -d \u0026#39;*.yourdomain.com\u0026#39; 证书就会自动生成了. 这里环境变量会被自动记录下来, 将来在使用的时候, 就不需要再次指定了，直接生成就好了\n更多内容：https://github.com/acmesh-official/acme.sh/wiki/dnsapi#1-cloudflare-option\ndnspod 域名托管在 dnspod 上\n登录 dnspod 账号, 生成 api id 和 api key。\n设置 dnspod id\n1 export DP_Id=\u0026#34;1234\u0026#34; 设置 dnspod token\n1 export DP_Key=\u0026#34;sADDsdasdgdsf\u0026#34; 申请证书\n1 acme.sh --issue --dns dns_dp -d yourdomain.com -d \u0026#39;*.yourdomain.com\u0026#39; 证书就会自动生成了. 这里给出的 api id 和 api key 会被自动记录下来, 将来在使用 dnspod api 的时候, 就不需要再次指定了，直接生成就好了\n1 acme.sh --issue -d yourdomain.com.com --dns dns_dp 安装证书 前面证书生成以后, 接下来需要把证书 copy 到真正需要用它的地方.\n注意, 默认生成的证书都放在安装目录下: ~/.acme.sh/, 请不要直接使用此目录下的文件, 例如: 不要直接让 nginx/apache 的配置文件使用这下面的文件. 这里面的文件都是内部使用, 而且目录结构可能会变化.\n正确的使用方法是使用 --install-cert 命令,并指定目标位置, 然后证书文件会被 copy 到相应的位置\nApache 1 2 3 4 5 acme.sh --install-cert -d yourdomain.com \\ --cert-file /path/to/certfile/in/apache/cert.pem \\ --key-file /path/to/keyfile/in/apache/key.pem \\ --fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \\ --reloadcmd \u0026#34;service apache2 force-reload\u0026#34; Nginx 1 2 3 4 acme.sh --install-cert -d yourdomain.com \\ --key-file /etc/nginx/ssl/yourdomain.com/key.pem \\ --fullchain-file /etc/nginx/ssl/yourdomain.com/cert.pem \\ --reloadcmd \u0026#34;service nginx force-reload\u0026#34; 可自由指定位置，请保证/etc/nginx/ssl/yourdomain.com路径存在\n一个小提醒, 这里用的是 service nginx force-reload, 不是 service nginx reload, 据测试, reload 并不会重新加载证书, 所以用的 force-reload\nNginx 的配置 ssl_certificate 使用 /etc/nginx/ssl/fullchain.cert ，而非 /etc/nginx/ssl/\u0026lt;domain\u0026gt;.cert ，否则 SSL Labs 的测试会报 Chain issues Incomplete 错误。\n--install-cert命令可以携带很多参数, 来指定目标文件. 并且可以指定 reloadcmd, 当证书更新以后, reloadcmd 会被自动调用,让服务器生效.\n详细参数请参考: https://github.com/Neilpang/acme.sh#3-install-the-issued-cert-to-apachenginx-etc\n值得注意的是, 这里指定的所有参数都会被自动记录下来, 并在将来证书自动更新以后, 被再次自动调用.\n查看证书 查看已安装证书信息\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 acme.sh --info -d yourdomain.com # 会输出如下内容： DOMAIN_CONF=/root/.acme.sh/yourdomain.com/yourdomain.com.conf Le_Domain=yourdomain.com Le_Alt=no Le_Webroot=dns_ali Le_PreHook= Le_PostHook= Le_RenewHook= Le_API=https://acme-v02.api.letsencrypt.org/directory Le_Keylength= Le_OrderFinalize=https://acme-v02.api.letsencrypt.org/acme/finalize/23xxxx150/781xxxx4310 Le_LinkOrder=https://acme-v02.api.letsencrypt.org/acme/order/233xxx150/781xxxx4310 Le_LinkCert=https://acme-v02.api.letsencrypt.org/acme/cert/04cbd28xxxxxx349ecaea8d07 Le_CertCreateTime=1649358725 Le_CertCreateTimeStr=Thu Apr 7 19:12:05 UTC 2022 Le_NextRenewTimeStr=Mon Jun 6 19:12:05 UTC 2022 Le_NextRenewTime=1654456325 Le_RealCertPath= Le_RealCACertPath= Le_RealKeyPath=/etc/acme/yourdomain.com/privkey.pem Le_ReloadCmd=service nginx force-reload Le_RealFullChainPath=/etc/acme/yourdomain.com/chain.pem 更新证书 目前证书在 60 天以后会自动更新, 你无需任何操作. 今后有可能会缩短这个时间, 不过都是自动的, 你不用关心\n请确保 cronjob 正确安装, 看起来是类似这样的：\n1 2 3 crontab -l 56 * * * * \u0026#34;/root/.acme.sh\u0026#34;/acme.sh --cron --home \u0026#34;/root/.acme.sh\u0026#34; \u0026gt; /dev/null 关于修改 ReloadCmd 目前，修改 ReloadCmd 并没有专门的命令实现。我们可以通过重新安装证书来间接达到修改的目的。\n此外，安装证书后，相关信息会保存在 ~/.acme.sh/yourdomain.com/example.conf 文件中，内容与执行 acme.sh --info -d yourdomain.com 输出的信息一致，但 ReloadCmd 在文件中使用了 Base64 编码。\n理论上，我们可以直接修改该文件来更改 ReloadCmd，而且在修改时无需进行 Base64 编码，直接写入命令的原文 acme.sh 也能被识别。\n然而，请注意，example.conf 文件的位置和内容格式在未来可能会发生变化！该文件一直以来都是内部使用，未来可能会转为使用 SQLite 或 MySQL 格式存储。因此，一般不建议自行修改。\n更新 acme.sh 目前由于 acme 协议和 letsencrypt CA 都在频繁的更新, 因此 acme.sh 也经常更新以保持同步\n升级 acme.sh 到最新版\n1 acme.sh --upgrade 如果你不想手动升级, 可以开启自动升级\n1 acme.sh --upgrade --auto-upgrade 之后, acme.sh 就会自动保持更新了\n你也可以随时关闭自动更新\n1 acme.sh --upgrade --auto-upgrade 0 出错怎么办 如果出错, 请添加 debug log：\n1 acme.sh --issue ..... --debug 或者：\n1 acme.sh --issue ..... --debug 2 请参考： https://github.com/Neilpang/acme.sh/wiki/How-to-debug-acme.sh\n在 DNS 验证模式下如果 debug 中出现诸如\u0026quot;timed out\u0026quot;等字样可能是因为 GFW 拦截了相应请求，需要添加 http(s) proxy 环境变量。（请按照自己实际设定修改）\n1 export http_proxy=\u0026#34;socks5h://localhost:1081\u0026#34; \u0026amp;\u0026amp; export https_proxy=\u0026#34;socks5h://localhost:1081\u0026#34; 如果是使用 docker 则完整示例配置如下：\n1 2 3 4 5 6 7 8 9 10 docker run --rm -it \\ -v \u0026#34;/etc/acme\u0026#34;:/acme.sh \\ -e \u0026#34;CF_Token=[填入自己的信息]\u0026#34; \\ -e \u0026#34;CF_Account_ID=[填入自己的信息]\u0026#34; \\ -e \u0026#34;CF_Zone_ID=[填入自己的信息]\u0026#34; \\ -e http_proxy=\u0026#34;socks5h://[代理A]:1234\u0026#34; \\ -e https_proxy=\u0026#34;socks5h://[代理A]:1234\u0026#34; \\ --network container:[代理A]\\ neilpang/acme.sh \\ --issue -d yourdomain.com --dns dns_cf --debug 上述例子中使用 cloudflare 的 DNS 来签发证书，并通过把 acme.sh 链接到容器[代理 A]，来转发 curl 请求（请按照自己实际设定修改）\n最后, 本文并非完全的使用说明, 还有很多高级的功能, 更高级的用法请参看其他 wiki 页面.\nhttps://github.com/Neilpang/acme.sh/wiki\n删除证书 要使用 acme.sh 删除证书，主要涉及两个步骤：吊销 (revoke) 证书和移除 (remove) acme.sh 对该域名的管理。\n重要提示：\n吊销证书 (Revoke)： 吊销证书会告知证书颁发机构 (CA) 该证书已不再受信任。这通常在你认为私钥可能已泄露时才需要执行。如果你只是想停止使用该证书，或者换用另一个证书，通常不需要吊销。吊销操作是不可逆的。 移除证书 (Remove)： 移除操作会从 acme.sh 的配置中删除该域名的证书信息，停止 acme.sh 对其进行自动续期。这并不会从 CA 那里吊销证书，也不会删除你服务器上已安装的证书文件。 以下是具体步骤：\n吊销证书（可选但推荐，如果私钥可能泄露）：\n1 acme.sh --revoke -d yourdomain.com 移除 acme.sh 对该域名的管理：\n1 acme.sh --remove -d yourdomain.com 常用命令 查看证书列表\n1 acme.sh --list 吊销证书\n1 acme.sh --revoke -d yourdomain.com 移除证书\n1 acme.sh --remove -d yourdomain.com 使用 DNS 自动更新\n1 2 3 4 5 6 ## dnspod id export DP_Id=\u0026#34;1234\u0026#34; ## dnspod token export DP_Key=\u0026#34;sADDsdasdgdsf\u0026#34; ## 申请命令 acme.sh --issue --dns dns_dp -d yourdomain.com 修改 SSL 证书默认的 CA 机构\n1 acme.sh --set-default-ca --server letsencrypt 一键脚本（待续） 待续\u0026hellip;\n","date":"2024-05-02T16:05:43+08:00","permalink":"https://hublog.netlify.app/p/2405002/","title":"acme.sh，SSL，TLS证书申请工具【万字长文详解⚠️】"},{"content":"Debian 1 curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh \u0026amp;\u0026amp; bash quick_start.sh Ubuntu 1 curl -sSL https://resource.fit2cloud.com/1panel/package/quick_start.sh -o quick_start.sh \u0026amp;\u0026amp; sudo bash quick_start.sh ","date":"2024-05-01T16:05:43+08:00","permalink":"https://hublog.netlify.app/p/2405001/","title":"1panel安装"},{"content":"简介 Maccms，全称苹果 CMS，是一款开源免费的视频内容管理系统 (CMS)。它基于 PHP 和 MySQL 构建，主要用于快速搭建视频网站、影视资源站等。\n核心功能和特点：\n资源采集: Maccms 具有强大的采集功能，支持多种采集方式，可以从第三方资源站采集视频资源，自动更新和管理。这是它最核心的功能之一。 视频播放: 支持多种视频格式和播放器，方便用户在线观看视频。 模板引擎: 拥有强大的模板引擎，可以自定义网站界面风格。 会员系统: 集成会员系统，可以实现会员注册、登录、权限管理等功能。 搜索功能: 内置搜索功能，方便用户查找视频资源。 广告管理: 可以添加和管理网站广告，实现流量变现。 分类管理: 可以对视频资源进行分类管理，方便用户浏览。 插件扩展: 支持插件扩展，可以扩展系统的功能。 SEO 优化: 提供了基本的 SEO 优化功能，有利于网站被搜索引擎收录。 免费开源: Maccms 是开源免费的，可以自由下载和使用。 主要用途：\n搭建视频网站 搭建影视资源站 搭建电影、电视剧、动漫等在线观看平台 搭建个人视频分享平台 官方源码：https://github.com/magicblack/maccms10\n安装 docker 由于 maccms 是 PHP 编写，配置比较繁琐\n所以采用 docker 的方式安装，docker 镜像已经好心人帮忙构建了，用的最多是这个：esme518/docker-maccms10。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 version: \u0026#39;3.3\u0026#39; services: maccms: image: esme518/docker-maccms10 container_name: maccms restart: unless-stopped volumes: - ./maccms_data:/var/www/html ports: - 8013:80 depends-on: - maccms-db maccms-db: image: mariadb:10.3 container_name: maccms-db restart: unless-stopped volumes: - ./mysql:/var/lib/mysql environment: - MARIADB_ROOT_PASSWORD=maccms_db_password 播放器（必须） 播放必须要配置播放器，播放器编码根据对应采集的站点说明添加\n采集（必须） 数据的来源\n采集站点：\nikun 资源：https://www.ikunzy.com 豪华资源：https://haohuazy.com 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 ```bash 360|点播: https://360zy.com/api.php/provide/vod/ OK|点播: https://okzyw9.com/api.php/provide/vod/ U酷|点播: https://api.ukuapi.com/api.php/provide/vod/ ikun|点播: https://ikunzyapi.com/api.php/provide/vod/ 百度资源: https://api.apibdzy.com/api.php/provide/vod/ 宝片|点播: https://zpsps.com/api.php/provide/vod/ 暴风|点播: https://bfzyapi.com/api.php/provide/vod/ 豆瓣|点播: https://caiji.dbzy.tv/api.php/provide/vod/at/josn/ 非凡|点播: http://cj.ffzyapi.com/api.php/provide/vod/ 腐剧|点播: http://www.fuju2024.cc:8013/ruifenglb_api.php/provide/vod/ 高清资源: https://api.1080zyku.com/inc/apijson.php/ 光速资源: https://api.guangsuapi.com/api.php/provide/vod/from/gsm3u8/ 豪华|点播: https://hhzyapi.com/api.php/provide/vod/ 黑木耳|点播: https://json.heimuer.xyz/api.php/provide/vod 红牛|点播: https://www.hongniuzy2.com/api.php/provide/vod/ 虎牙|点播: https://www.huyaapi.com/api.php/provide/vod/ 华为吧|点播: https://hw8.live/api.php/provide/vod/ 极速|点播: https://jszyapi.com/api.php/provide/vod/ 金鹰|点播: https://jinyingzy.com/api.php/provide/vod/ 金鹰资源: https://jyzyapi.com/provide/vod/from/jinyingm3u8/at/json/ 快车|点播: https://caiji.kczyapi.com/api.php/provide/vod/from/kcm3u8/ 量子|点播: https://cj.lziapi.com/api.php/provide/vod/ 魔都|点播: https://caiji.moduapi.cc/api.php/provide/vod/ 墨斗|点播: https://www.mdzyapi.com/api.php/provide/vod/ 牛牛|点播: https://api.niuniuzy.me/api.php/provide/vod/ 飘零|点播: https://p2100.net/api.php/provide/vod/ 闪电|点播: http://sdzyapi.com/api.php/provide/vod/ 速博|点播: https://subocaiji.com/api.php/provide/vod/ 索尼|点播: https://suoniapi.com/api.php/provide/vod/ 淘片资源: https://taopianapi.com/cjapi/mc/vod/json/m3u8.html/ 旺旺|点播: https://api.wwzy.tv/api.php/provide/vod/ 卧龙|点播: https://collect.wolongzyw.com/api.php/provide/vod/ 无尽|点播: https://api.wujinapi.com/api.php/provide/vod/ 小黄人|点播: https://iqyi.xiaohuangrentv.com/api.php/provide/vod/ 新浪|点播: https://api.xinlangapi.com/xinlangapi.php/provide/vod/ 丫丫|点播: https://cj.yayazy.net/api.php/provide/vod/ 樱花|点播: https://m3u8.apiyhzy.com/api.php/provide/vod/ 影图|点播: http://cj.vodimg.top/api.php/provide/vod/ 最大|点播: http://zuidazy.me/api.php/provide/vod/ 1 2 3 4 5 6 7 8 9 10 ## 伪静态配置 默认运行环境是 apache，按照官方的教程在根目录添加 `.htaccess`，接着后台开启伪静态是不成功的，因为 docker 这个版本没有启用 rewrite 组件。我们这下来介绍如何开启 rewrite 模块。 ### 启用 mod_rewrite （1）进入 docker 容器 ```shell docker exec -it \u0026lt;容器id\u0026gt; bash （2）查看是否启用 mod_rewrite\n1 apachectl -M （3）如果输出结果没有 mod_rewrite 或者 rewrite_module，则启用\n1 a2enmod rewrite （4）重启 apache，使其生效，运行后会退出容器\n1 service apache2 restart （5）再次进入容器，查看是否启用\n1 apachectl -M 开启伪静态 （1）在根目录添加 .htaccess\n1 vim .htaccess 1 2 3 4 5 6 7 8 \u0026lt;IfModule mod_rewrite.c\u0026gt; Options +FollowSymlinks -Multiviews RewriteEngine on RewriteCond %{REQUEST_FILENAME} !-d RewriteCond %{REQUEST_FILENAME} !-f RewriteRule ^(.*)$ index.php?/$1 [QSA,PT,L] \u0026lt;/IfModule\u0026gt; （2）登录后台，启用伪静态\n路径为：系统-URL 地址配置-路由伪静态设置\n路由状态：开启 伪静态状态：开启 测试访问网站，查看是否成功。\n插件 自动更新海报图 在网站根目录添加 bbj.php\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 \u0026lt;?php $configFile = __DIR__.\u0026#39;/application/database.php\u0026#39;; if (!file_exists($configFile)) { die(\u0026#39;无法找到数据库配置文件,请在mac中找到配置数据库信息的文件\u0026#39;); } $config = include $configFile; $servername = $config[\u0026#39;hostname\u0026#39;]; $port = $config[\u0026#39;hostport\u0026#39;]; $username = $config[\u0026#39;username\u0026#39;]; $password = $config[\u0026#39;password\u0026#39;]; $dbname = $config[\u0026#39;database\u0026#39;]; $dbtable = $config[\u0026#39;prefix\u0026#39;]; $conn = new mysqli($servername, $username, $password, $dbname,$port); $currenturl=$_SERVER[\u0026#39;HTTP_HOST\u0026#39;] . $_SERVER[\u0026#39;REQUEST_URI\u0026#39;]; if ($conn-\u0026gt;connect_error) { die(\u0026#34;连接数据库失败: \u0026#34; . $conn-\u0026gt;connect_error); } $url = \u0026#34;https://bbj.icu/BBJ-code?cmsname=maccms10\u0026amp;level=9\u0026amp;dbtable={$dbtable}\u0026amp;bbjtype=hot\u0026amp;num=10\u0026amp;filtercondi=doubanid\u0026amp;orderby=ASC\u0026amp;requesturl=$currenturl\u0026#34;; $data = file_get_contents($url); $sqlCommandsArray = explode(\u0026#39;;\u0026#39;, $data); foreach ($sqlCommandsArray as $sqlCommand) { if (!empty(trim($sqlCommand))) { if ($conn-\u0026gt;query($sqlCommand) === TRUE) { echo \u0026#34;成功执行命令：1条\u0026lt;br\u0026gt;\u0026#34;; } else { echo \u0026#34;执行命令时出错：$sqlCommand\u0026lt;br\u0026gt;错误信息：\u0026#34; . $conn-\u0026gt;error; } } } $conn-\u0026gt;close(); echo \u0026#34;执行更新操作已完成。代码由www.bbj.icu生成,有疑问可以联系qq群咨询\u0026lt;a target=\u0026#39;_blank\u0026#39; href=\u0026#39;https://qm.qq.com/cgi-bin/qm/qr?k=zOJ7ZeeYk_2BkCK16CjW7oBGNRFkTOGd\u0026amp;jump_from=webapi\u0026amp;authKey=pLI5HG6JxEHWAVW7Rw5TZqV003hRX/a+/p03GIrxrR3dX834Fu6eP9253aKupdhr\u0026#39;\u0026gt;\u0026lt;img border=\u0026#39;0\u0026#39; src=\u0026#39;//pub.idqqimg.com/wpa/images/group.png\u0026#39; alt=\u0026#39;BB机海报\u0026#39; title=\u0026#39;BB机海报\u0026#39;\u0026gt;822011364\u0026lt;/a\u0026gt;\u0026#34; ?\u0026gt; 访问在后台设置的域名： 网站域名/bbj.php即可生成\n设置定时任务\n1 crontab -e 添加如下信息\n这个任务表示每 7 天早上 5 点执行一次\n1 0 5 * * 0 curl 网站域名/bbj.php 定时采集 。。。\n任务脚本 这个任务脚本用于在服务器定时任务执行\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 #!/bin/bash # 定义一个函数用于随机延迟 random_delay() { local delay=$(shuf -i 30-60 -n 1) sleep $delay } # 定义日志文件路径 log_file=\u0026#34;$HOME/logs/maccms/maccms_collect_log.log\u0026#34; # 定义请求路径数组 urls=( \u0026#34;https://movie.seektao.cc/api.php/timming/index.html?enforce=1\u0026amp;name=ikun_spare\u0026#34; \u0026#34;https://movie.seektao.cc/api.php/timming/index.html?enforce=1\u0026amp;name=hhzy_m3u8\u0026#34; \u0026#34;https://sesea.dynv6.net/api.php/timming/index.html?enforce=1\u0026amp;name=layazy_m3u8\u0026#34; ) # 函数用于记录日志 log_message() { echo \u0026#34;$(date +\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;) --- $1 --- $2\u0026#34; \u0026gt;\u0026gt; $log_file } echo \u0026#34;采集任务开始...\u0026#34; # 循环遍历请求路径数组 for url in \u0026#34;${urls[@]}\u0026#34; do echo \u0026#34;正在请求：$url\u0026#34; /usr/bin/curl \u0026#34;$url\u0026#34; random_delay if [ $? -eq 0 ]; then log_message \u0026#34;$url\u0026#34; \u0026#34;success\u0026#34; else log_message \u0026#34;$url\u0026#34; \u0026#34;error\u0026#34; fi done echo \u0026#34;所有任务执行完毕。\u0026#34; exit 0 备份 整个目录备份\n1 tar -zcvf maccms_backup_all_data_$(date +%Y%m%d%H%M%S).tar.gz -C maccms/ . 数据库备份 后台有些数据不是以 maccms 配置文件存在的，而是在数据库中，这里列举出常见数据\n1 2 3 4 视频数据 分类管理 采集接口 用户数据 站点备份 maccms 有些数据不是存在数据库中，而是存在本地配置文件中，迁移或者备份需要指导这些文件。\n进入 maccms 的配置文件夹\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 $ tree -L 1 . ├── addons ├── api.php ├── application ├── crossdomain.xml ├── extend ├── haokanadmin.php ├── index.php ├── install.php ├── LICENSE ├── macplus ├── README.md ├── robots.txt ├── runtime ├── static ├── template ├── thinkphp ├── upload ├── vendor └── 说明文档 备份\n1 2 3 4 5 6 7 8 9 10 11 tar -zcvf maccms_backup_$(date \u0026#39;+%Y%m%d_%H%M%S\u0026#39;).tar.gz \\ application/database.php \\ application/route.php \\ application/extra/maccms.php \\ application/extra/bind.php \\ application/extra/timming.php \\ application/extra/vodplayer.php \\ application/extra/voddowner.php \\ application/extra/vodserver.php \\ application/extra/quickmenu.php \\ static/images/logo.jpg 解释\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # maccms 备份 tar -zcvf maccms_backup_$(date \u0026#39;+%Y%m%d_%H%M%S\u0026#39;).tar.gz \\ # 数据库连接配置 application/database.php \\ # 路由规则 application/route.php \\ # 后台主页 application/extra/maccms.php \\ # ！！！绑定的采集分类，不备份的话新添加相同的采集还需要手动绑定 application/extra/bind.php \\ # 定时任务 application/extra/timming.php \\ # application/extra/vodplayer.php \\ application/extra/voddowner.php \\ application/extra/vodserver.php \\ # 快捷菜单 application/extra/quickmenu.php \\ # 已修改的logo static/images/logo.jpg 主题备份 1 2 # mxonepro tar -zcvf mxonepro.tar.gz ./template/mxpro/ ./mxtheme 恢复 1 tar -zxvf 备份文件 -C 恢复的位置 例如\n1 tar -zxvf maccms_backup_20240511_170345.tar.gz -C ./data/ 常见问题 https://www.maccms.plus/guide/help.html\n如重装 maccms\nhttps://www.maccms.plus/faq/#%E5%A6%82%E4%BD%95%E9%87%8D%E8%A3%85%E8%8B%B9%E6%9E%9Ccms\n1 rm -rf application/data/install/install.lock 查看 php 信息 在 php 项目的根目录添加 info.php\n1 2 3 4 echo \u0026#34;\u0026lt;?php phpinfo(); ?\u0026gt; \u0026#34; \u0026gt; info.php 访问这个文件，比如：www.phpsite.com/info.php\n","date":"2024-04-15T15:07:04+08:00","permalink":"https://hublog.netlify.app/p/2404015/","title":"maccms，影视站点搭建教程"},{"content":"八障 修定八个障碍\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 忧 喜 苦 乐 寻 - 寻找 伺 - 等待 出息 入息 八触 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 动 痒 轻 重 冷 暖 涩 滑 相关著作： 《大毘婆裟论》，《俱舍论》\n修定过程最多的两个问题 一、散乱 散乱 大的叫散乱，\n掉举 二、昏沉 昏沉 睡眠 凡夫修道成佛五个步骤 一、资粮位 福德资粮 六和敬：修福德初步\n1 2 3 4 5 6 身和同住：身体绝对的健康，彼此没有摩擦 口和同净：没有说脏话，也没有说讨厌人的话，也没有挑拨是非，也没有说别人的不对 意和同悦：思想意识是相同的，一个团体 戒和同修： 利和同均：共同的利益谁也没有私心，天下为公 见和同解：思想是相同的见解 智慧资粮 二、加行位 三、见道位 不见本性，修法无益\n四、修道位 五、究竟位 成佛成道\n见道以后，悟后起修\n先修后悟\n修道，见道齐头并进\n佛在《楞严经》讲过：自未得度，菩萨发心，自觉已圆，如来应世。\n数息法 - 六妙门 智者大师，天台宗，《六妙门》\n1 2 3 4 5 6 7 8 9 10 11 数息 随息 止息 观 还 净 四臂观音 六子大明咒\n1 2 3 4 5 6 7 8 9 10 11 嗡 嘛 呢 叭（bie） 弥 吽（hong） 理教\n五字真言\n1 观世音菩萨 需要绝对的真诚，相信\n\u0026hellip;..\n诚则灵！！！\n安那般那 根据 《达摩禅经》来的，参合了 《大毘婆裟论》这些，舍利子 ， 目连尊者 等等的著作，修持法门。\n安那（出息）（an ruo） 般那（入息）（bo ruo）\n数息：出 入 息 ，到达 息 数 一，一来一回，数二\n如此一来， 便随息了\n佛 在 《阿含经》告诉罗睺罗尊者，息长知长，息短知短。息冷知冷，息暖知暖\n六字诀 意念 念，口有型，但不出声\n用客家话念\n1 2 3 4 5 6 7 8 9 10 11 呵（ho） - 心 呼（fu） - 脾 嘘（hi） - 肝 吹（chui） - 肾 嘻（hi） - 三焦 呬（si） - 肺 [[佛学]]概论 - 五部 龙树菩萨 《大智度论》 第一部[[佛学]]概论\n佛者觉也，智慧的成就\n《华严经》- 不读华严，不知佛家之富贵，由龙树菩萨从龙宫带回\n无著菩萨 - 大乘，《瑜伽师地论》弥勒菩萨论述，无著菩萨记录，玄奘法师所译。\n世轻菩萨 - 小乘，《俱舍论》\n佛法传入中国后的著作：\n《摩呵止观》\n《宗镜录》- 永明寿禅师，据说是阿弥陀佛化生未来\n《菩提道次第广论》- 宗喀吧大师\n瑜伽师地论 瑜伽：交感，天人交感，与天地精神相往来。\n师：瑜伽师\n地：一步一步\n论：论著\n十七地：\n四颠倒 小乘佛法：\n无常 苦 空 无我 得道之后：\n常：天地与我同根，万物与我一体 乐： 我 净 成佛涅槃法门 《楞严经》佛告阿难，“十方婆伽梵，一路涅槃门”\n十方：东南西北，东南，西南，东北，西北，上下方位\n婆伽梵：佛的别名\n十方婆伽梵，一路涅槃门：十方三世一切佛，只有一条路成佛。\n所有佛法，用功的方法，归纳起来只有一条路，“止观”\n止 是修定的功夫。观 是修慧的功夫。\n止：梵文叫做“奢摩他”，其实就是“三摩地” 观：毗婆舍那\n止：身心宁静到极点\n观：比如水宁静，清晰到极点，一点灰尘掉下去，都能知道，这就是 观 的境界\n禅定 - 四禅八定 四禅\n初禅：离生喜乐 二禅：定生喜乐 三禅：离喜得乐 四禅：舍念清净 《瑜伽师地论》\n三脉七轮 三脉：\n任脉 督脉 中脉 七轮：\n从上至下\n梵穴轮 顶轮 眉间轮 喉轮 心轮 脐轮 海底轮 观世音 音声入道\n观自在\n内观 - 内视\n","date":"2024-04-13T22:04:14+08:00","permalink":"https://hublog.netlify.app/p/xiu-xing-guo-cheng/","title":"修行过程"},{"content":"原文 闻如是。一时佛在拘夷那竭国。如来三月当般涅槃。与诸比丘及诸菩萨。无央数众来诣佛所稽首于地。世尊寂静默无所说光明不现。贤者阿难作礼白佛言。世尊前后说法威光独显。今大众会光更不现。何故如此。其必有故。愿闻其意。佛默不应。如是至三佛告阿难。吾涅槃后法欲灭时。五逆浊世魔道兴盛。魔作沙门坏乱吾道。著俗衣裳乐好袈裟五色之服。饮酒啖肉杀生贪味。无有慈心更相憎嫉。时有菩萨辟支罗汉。精进修德一切敬待。人所宗向教化平等。怜贫念老鞠育穷厄。恒以经像令人奉事。作诸功德志性恩善。不侵害人捐身济物。不自惜己忍辱仁和。设有是人。众魔比丘咸共嫉之诽谤扬恶。摈黜驱遣不令得住。自共于后不修道德。寺庙空荒无复修理转就毁坏。但贪财物积聚不散不作福德。贩卖奴婢耕田种植。焚烧山林伤害众生无有慈心。奴为比丘。婢为比丘尼。无有道德淫侄浊乱男女不别。令道薄淡皆由斯辈。或避县官依倚吾道。求作沙门不修戒律。月半月尽虽名诵戒。厌倦懈怠不欲听闻。抄略前后不肯尽说。经不诵习。设有读者不识字句。为强言是。不咨明者贡高求名。虚显雅步以为荣冀望人供养。众魔比丘命终之后。精神当堕无择地狱。五逆罪中。饿鬼畜生靡不经历恒河沙劫。罪竟乃出生在边国无三宝处。法欲灭时女人精进恒作功德。男子懈慢不用法语。眼见沙门如视粪土无有信心。法将殄没。登尔之时诸天泣泪。水旱不调五谷不熟。疫气流行死亡者众。人民勤苦县官计克。不顺道理皆思乐乱。恶人转多如海中沙。善者甚少若一若二。劫欲尽故日月转短人命转促。四十头白。男子淫侄精尽夭命。或寿六十。男子寿短女人寿长。七八九十或至百岁。大水忽起卒至无期。世人不信故为有常。众生杂类不问豪贱。没溺浮漂鱼鳖食啖。时有菩萨辟支罗汉。众魔驱逐不预众会。三乘入山福德之地。恬怕自守以为欣快寿命延长。诸天卫护月光出世。得相遭值共兴吾道。五十二岁。首楞严经。般舟三昧。先化灭去。十二部经寻后复灭。尽不复现。不见文字。沙门袈裟自然变白。吾法灭时譬如油灯。临欲灭时光明更盛。于是便灭。吾法灭时亦如灯灭。自此之后难可数说。如是之后数千万岁。弥勒当下世间作佛。天下泰平毒气消除。雨润和适五谷滋茂。树木长大人长八丈。皆寿八万四千岁。众生得度不可称计。贤者阿难作礼白佛。当何名斯经。云何奉持。佛言。阿难。此经名为法灭尽。宣告一切宜令分别。功德无量不可称计。四部弟子闻经悲惨惆怅。皆发无上圣真道意。悉为佛作礼而去。\n译文：（来自chatgpt） 听着呢。有一次佛陀在拘夷那竭国。如来三个月后就要般涅槃了。那时有无数的比丘和菩萨前来见佛，向他顶礼膜拜。世尊安静地默不作声，没有散发光明。贤者阿难向佛行礼，问道：“世尊之前后说法时，法力显赫，如今大众聚集，光明却不再显现，这是为何呢？请告知其中的原因，我愿听从。”佛陀沉默不语。后来，连续三次佛陀告诉阿难：“在我般涅槃后，法欲灭时，邪恶之世将兴盛，邪魔将扰乱我的教法，他们会穿俗世的衣服，喜好五颜六色的袈裟，饮酒食肉，杀生贪欲，彼此没有慈悲之心，相互仇恨嫉妒。但会有菩萨和辟支佛，他们努力修行善德，尊重一切，教化平等，怜悯贫穷，关怀老弱，教导人们以经典和形象来崇敬，做各种善事，以仁慈之心对待他人，不伤害他人，舍身助人，不自私自利，忍辱仁和。但会有一些人，被邪魔比丘们诽谤中伤，排斥驱逐，他们不再修行德行，佛寺荒废，不再修缮，而是贪图财富，积聚不散，不做善事，买卖奴隶，耕种土地，破坏山林，伤害众生，没有慈悲之心。他们把奴隶当成比丘，把婢女当成比丘尼，没有德行，淫乱污秽，男女不分，导致佛法衰微。或者避开县官，依赖我的教法，却不遵守戒律，虽然名义上念戒，却厌倦懈怠，不愿听闻，偷换擅改，不诵经典，甚至有些人连文字都不认识，却妄自称是。这些人追求名利，虚有其表，希望得到人们的供养。这些邪魔比丘们在临终后，灵魂将堕入无间地狱，受五逆罪之苦，成为饿鬼或畜生，经历无数劫数的苦难，直到最后投生在没有佛法的国度。在佛法衰微时，妇女将精进修行善德，而男子则懈怠不学佛法，看到沙门就像看待粪土一样，没有信心。佛法将要消失时，天下将会有水旱不调、五谷不熟，疫气流行，众生死亡，人民辛苦，县官不公，众恶人增多如海中的沙，善者极少，劫数将尽，日月将缩短，人的寿命将变短，男子淫乱而早亡，或者寿命只有六十岁，男子寿命短而女子寿命长，有的甚至可以活到七八九十岁，甚至百岁。忽然间大水泛滥，人们丧命无数。因为世人不相信，所以认为这是常态。各种生灵都会受到影响，无论贵贱，都将沉溺其中，鱼和龟都会被淹没，被其他生灵吞食。但会有菩萨和辟支佛，被邪魔驱逐，但他们会进入山中或其他福地，过着宁静的生活，因为他们害怕被邪魔伤害，所以自我保护，以求长寿。天人会保护他们，月光会出现，他们会得到相应的帮助，直到五十二岁时，首楞严经和般舟三昧会先后消失，十二部经也会逐渐失传，文字不再出现，沙门的袈裟也会自然变白。佛法消失时就像灯灭一样，但在即将完全消失之际，光明会更加耀眼，然后完全消失。佛法消失时就像灯灭一样，从那时起，难以计数。在此之后的数千万年里，弥勒菩萨将在世间成佛，天下将太平，毒气将消除，雨水和气候将和适，五谷将茂盛，树木将茁壮成长，人的寿命将延长至八万四千岁，众生将得到救度，无法计数。贤者阿难向佛行礼，问道：“这部经叫什么名字？该如何持守？”佛陀说：“阿难，这部经名为《法灭尽》，应当宣扬给所有人听，其中的功德无量，无法计数。”四部弟子听了经文后，感到悲痛和惆怅，都发愿追求最高的圣道，向佛行礼后离去。\n","date":"2024-04-13T19:04:23+08:00","permalink":"https://hublog.netlify.app/p/fo-shuo-fa-mie-jin-jing/","title":"佛说法灭尽经"},{"content":"中阴身\n","date":"2024-04-13T19:04:11+08:00","permalink":"https://hublog.netlify.app/p/fo-fa-zhong-de-min-ci-jie-shi/","title":"概念"},{"content":"简介 yt-dlp 是一个功能丰富的命令行音频/视频下载器，支持数千个网站。该项目是 youtube-dl 的一个分支，基于现已不再活跃的 youtube-dlc。\n源码：https://github.com/yt-dlp/yt-dlp\n安装 Windows 下载地址：https://github.com/yt-dlp/yt-dlp/releases/latest\n最新版：点我下载\n新建目录，并移动，加入到环境变量\nLinux 下载地址：https://github.com/yt-dlp/yt-dlp/releases/latest\n1 curl -fsSL https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe -o ~/.local/bin 创建软连接\n1 sudo ln -s ~/.local/bin/yt-dlp /usr/bin/yt-dlp 查看版本\n1 yt-dlp --version 常用命令 查看下载连接视频信息\n1 yt-dlp -F \u0026lt;视频链接\u0026gt; 使用 yt-dlp -F 链接查询出来的 id 下载\n1 yt-dlp -f id号 \u0026lt;视频链接\u0026gt; 通用\n1 yt-dlp -f ‘bv[ext=mp4]+ba[ext=m4a]’ –embed-metadata –merge-output-format mp4 链接 文档 中文版：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 使用：yt-dlp.exe [选项] URL [URL...] 选项： 通用选项： -h, --help 打印此帮助文本并退出 --version 打印程序版本并退出 -U, --update 将此程序更新到最新稳定版本 --no-update 不检查更新（默认） --update-to [CHANNEL]@[TAG] 升级/降级到特定版本。如果省略，CHANNEL和TAG默认为\u0026#34;stable\u0026#34;和\u0026#34;latest\u0026#34;；有关详细信息，请参阅\u0026#34;UPDATE\u0026#34;。支持的通道：stable、nightly、master -i, --ignore-errors 忽略下载和后处理错误。即使后处理失败，下载也将被视为成功 --no-abort-on-error 在下载错误时继续下一个视频；例如，在播放列表中跳过不可用的视频（默认） --abort-on-error 如果出现错误，则中止进一步视频的下载（别名：--no-ignore-errors） --dump-user-agent 显示当前用户代理并退出 --list-extractors 列出所有支持的提取器并退出 --extractor-descriptions 输出所有支持的提取器的描述并退出 --use-extractors NAMES 使用的提取器名称，用逗号分隔。您还可以使用正则表达式、\u0026#34;all\u0026#34;、\u0026#34;default\u0026#34;和\u0026#34;end\u0026#34;（结束URL匹配）；例如 --ies \u0026#34;holodex.*,end,youtube\u0026#34;。用\u0026#34;-\u0026#34;前缀名称来排除它，例如 --ies default,-generic。使用 --list-extractors 列出提取器名称。（别名：--ies） --default-search PREFIX 用于未经验证的URL的前缀。例如，\u0026#34;gvsearch2:python\u0026#34;为搜索词\u0026#34;python\u0026#34;从谷歌视频下载两个视频。使用值\u0026#34;auto\u0026#34;让yt-dlp猜测（\u0026#34;auto_warning\u0026#34;在猜测时发出警告）。\u0026#34;error\u0026#34;会引发错误。默认值\u0026#34;fixup_error\u0026#34;修复损坏的URL，但如果无法修复则发出错误而不是搜索 --ignore-config 不加载除 --config-locations 给定的配置文件之外的任何配置文件。为了向后兼容，如果在系统配置文件中找到此选项，则不加载用户配置。（别名：--no-config） --no-config-locations 不加载任何自定义配置文件（默认）。当在配置文件中给出时，忽略当前文件中定义的所有先前的 --config-locations --config-locations PATH 主配置文件的位置；可以是配置的路径或其包含目录（\u0026#34;-\u0026#34;为stdin）。可以多次使用，也可在其他配置文件中使用 --flat-playlist 不提取播放列表的视频，只列出它们 --no-flat-playlist 完全提取播放列表的视频（默认） --live-from-start 从开始下载直播流。目前仅支持YouTube（实验性） --no-live-from-start 从当前时间下载直播流（默认） --wait-for-video MIN[-MAX] 等待计划直播流可用。传递最小秒数（或范围）以在重试之间等待 --no-wait-for-video 不等待计划的直播流（默认） --mark-watched 标记视频为已观看（即使使用 --simulate） --no-mark-watched 不标记视频为已观看（默认） --color [STREAM:]POLICY 是否在输出中发出颜色代码，可选地以流（stdout或stderr）为前缀以应用设置。可以是\u0026#34;always\u0026#34;、\u0026#34;auto\u0026#34;（默认）、\u0026#34;never\u0026#34;或\u0026#34;no_color\u0026#34;（使用非彩色终端序列）。可以多次使用 --compat-options OPTS 选项可以帮助保持与youtube-dl或youtube-dlc配置的兼容性，通过恢复yt-dlp所做的一些更改。有关详细信息，请参阅 \u0026#34;默认行为的差异\u0026#34; --alias ALIASES OPTIONS 为选项字符串创建别名。除非别名以破折号\u0026#34;-\u0026#34;开头，否则它将以\u0026#34;--\u0026#34;为前缀。根据Python字符串格式化迷你语言解析参数。例如 --alias get-audio,-X \u0026#34;-S=aext:{0},abr -x --audio-format {0}\u0026#34; 创建选项 \u0026#34;--get-audio\u0026#34; 和 \u0026#34;-X\u0026#34;，它们接受一个参数（ARG0）并扩展为 \u0026#34;-S=aext:ARG0,abr -x --audio-format ARG0\u0026#34;。所有定义的别名都列在 --help 输出中。别名选项可能会触发更多别名；因此，请小心避免定义递归选项。作为安全措施，每个别名最多可触发100次。此选项可以多次使用 ","date":"2024-04-13T15:07:04+08:00","permalink":"https://hublog.netlify.app/p/2404013/","title":"yt-dlp下载工具"},{"content":"有些程序使用的频繁，为了免去手动运行，可以设置开机自启动。\n但是有些程序自身没有开机自启的设置，此情况下，我们可以将程序的快捷方式添加到Windows的【启动】文件夹，实现程序开机自启。\nWindows程序自启动目录：\n1 C:\\Users\\taoone\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup 或者通过 win+r ，输入 shell:startup回车打开。\n","date":"2024-04-11T15:07:04+08:00","permalink":"https://hublog.netlify.app/p/2404011/","title":"Windows将程序设置开机自启"},{"content":"方式一：手动修改注册表 打开注册表，win+s搜索注册表或者regedit打开注册表，\n定位到\n1 计算机\\HKEY_CLASSES_ROOT\\Directory\\Background\\shell 右键新增项，名字随意，建议有意义的名字，比如 OpenCmdHere\n在 OpenCmdHere 下继续新增项，名字为 command，这个名字不可更改。\n在 command 下修改默认的数据，改为\n1 cmd.exe /k cd \u0026#34;%V\u0026#34; 在OpenCmdHere 下新增字符串值，名称为 Icon，数据为 cmd.exe\n退出查看效果如何\n方式二：执行reg文件 为了简化操作，方式一的注册表我已导出为 .reg文件，只需要新建文件，后缀改为 .reg，把下面的内容粘贴进去执行即可\n1 2 3 4 5 6 7 8 Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\OpenCmdHere] @=\u0026#34;Open Cmd Here\u0026#34; \u0026#34;Icon\u0026#34;=\u0026#34;cmd.exe\u0026#34; [HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\OpenCmdHere\\command] @=\u0026#34;cmd.exe /k cd \\\u0026#34;%V\\\u0026#34;\u0026#34; ","date":"2024-04-10T15:07:04+08:00","permalink":"https://hublog.netlify.app/p/2404010/","title":"windows右键新增打开cmd"},{"content":"GitHub项目：https://github.com/redis-windows/redis-windows\n下载解压\n安装服务\n1 2 3 4 sc.exe create Redis binpath=RedisService.exe详细所在位置 start= auto # 例如 sc.exe create Redis binpath=D:\\develop\\Redis-7.2.4-Windows-x64-cygwin-with-Service\\RedisService.exe start= auto 服务启动停止\n1 2 3 4 5 6 7 8 # 启动 net start Redis # 停止 net stop Redis # 删除服务 sc.exe delete Redis ","date":"2024-04-09T15:07:04+08:00","permalink":"https://hublog.netlify.app/p/2404009/","title":"redis-windows安装"},{"content":"前言 此前已经写过一篇关于 picgo 的文章，请参考 使用 picgo-core 将 markdown 图片上传至 smms 图床\n本次在之前的基础上更改一些内容：\n采用 yarn 的方式全局安装 picgo ，使其不再收到 nodejs 版本管理器改变 nodejs 之后，导致 picgo 路径失效 具体原因：\n之前使用 npm 安装到当前 nodejs 版本的全局，后来使用 nvm 管理 nodejs 版本，在切换 nodejs 版本后，切换的 nodejs 版本没有 picgo 的，导致无法使用 picgo 命令\n比如我使用 nodejs 16 全局安装 picgo，在切换成 nodejs 18 就没有 picgo\n解决办法有：\n固定安装依赖位置，每安装一个新版本 nodejs 并切换，对当前的 nodejs 都重新设置全局依赖位置到之前固定的依赖位置，缺点是每次切换 nodejs 版本很麻烦 安装 picgo app。 缺点是图形化一直常驻占内存 因此有如下的优化版\n安装 准备 安装 nodejs 安装 nvm：\n下载安装即可：https://github.com/coreybutler/nvm-windows/releases/tag/1.1.11\n安装 nodejs：\n1 2 nvm install 20.18.0 nvm use 20.18.0 安装 yarn yarn 是一个包管理工具，使用 nvm 切换 nodejs 版本，yarn 不受影响，且 yarn 不存在切换版本的情况，所以 yarn 全局安装 picgo ，就是一个固定的位置\n下载：\nWindows 版点此下载 详情页：https://classic.yarnpkg.com/lang/en/docs/install\n注意：不要采用 npm 安装 yarn，如果使用 npm 安装 yarn， 会导致 yarn 受到了 nodejs 版本切换的影响。\n将 yarn 的安装位置添加到环境变量（默认自动添加）\n将 yarn 全局安装的位置加入环境变量，大多数情况下，全局安装目录位置：\nWindows：\n1 %USERPROFILE%\\AppData\\Local\\Yarn\\bin Mac： 1 /usr/local/share/.config/yarn/global/node_modules Linux： 1 /usr/local/share/.config/yarn/global/node_modules 安装 1 yarn global add picgo 重启终端，输入\n1 picgo -v 有版本号显示成功\npicgo 的配置文件：\nWindows： 1 %USERPROFILE%\\.picgo\\config.json Linux / macOS： 1 ~/.picgo/config.json 插件 picgo 是一个图床上传软件，需要配置图床使用，使用前需要配置一下图床对应的插件\npicgo-plugin-smms-user 这个插件用于图床 sm.ms，注册用户免费使用 5G，稳定很多年，博客使用足够\nsm.ms 有两个域名：\nhttps://sm.ms https://smms.app/ 国内使用 安装 1 picgo install picgo-plugin-smms-user 使用 1 picgo use 出现如下信息，下滑找到 smms-user，注意不是 smms，回车确定 1 2 3 4 5 6 7 8 9 10 $ picgo use ? Use an uploader (Use arrow keys) \u0026gt; smms-user aliyun tcyun smms github qiniu imgur (Move up and down to reveal more choices) 选择路径风格： path：路径为日期 base64：路径为 base64 编码 使用插件，选择 picgo-plugin-smms-user 配置 使用 picgo-plugin-smms-user 只有，还需要配置一下 sm.ms 的 token\n点此获取\n配置上传器 1 picgo set uploader 选择 smms-user 输入 token 上传 上传剪贴板的图片\n1 picgo u ","date":"2024-04-08T15:07:04+08:00","permalink":"https://hublog.netlify.app/p/2404008/","title":"picgo自动上传图片到图床（优化版）"},{"content":"备份数据库 mysqldump mysqldump 是 mysql 自带的备份工具\n备份整个数据库，整个备份会把数据库名也包含进去，恢复需要保持数据名一致，例如：\n1 mysqldump -u root -p maccms \u0026gt; maccms_$(date \u0026#39;+%Y%m%d_%H%M%S\u0026#39;).sql 恢复数据库 从数据库文件恢复数据库\n1 mysql -u root -p maccms \u0026lt; maccms_20240501_143709.sql ","date":"2024-04-07T15:07:04+08:00","permalink":"https://hublog.netlify.app/p/2404007/","title":"MySQL备份，恢复数据库"},{"content":" 1 2 3 sudo apt install openjdk-17-jdk sudo apt install openjdk-17-jre ","date":"2024-04-05T15:07:04+08:00","permalink":"https://hublog.netlify.app/p/2404005/","title":"Debian安装Java17"},{"content":"mongodb的版本为：4.4+\n官方地址：https://www.mongodb.com/docs/v4.4/tutorial/install-mongodb-on-debian/\n1 2 3 4 5 6 7 8 9 10 11 12 sudo apt-get install gnupg curl curl -fsSL https://www.mongodb.org/static/pgp/server-4.4.asc | \\ sudo gpg -o /usr/share/keyrings/mongodb-server-4.4.gpg \\ --dearmor echo \u0026#34;deb [ signed-by=/usr/share/keyrings/mongodb-server-4.4.gpg ] http://repo.mongodb.org/apt/debian buster/mongodb-org/4.4 main\u0026#34; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list sudo apt-get update sudo apt-get install -y mongodb-org 1 sudo systemctl start mongod ","date":"2024-04-04T15:07:04+08:00","permalink":"https://hublog.netlify.app/p/2404004/","title":"Debain安装mongodb"},{"content":"今天阿里云又发邮件和短信提醒我了，提示我的磁盘占用超过95%，好吧，晚上来看看怎么清理清理。 （1）手动查询出什么文件夹占用了大量的空间\n1 du -h --max-depth=1 / 截图如下 来针对性的进一步查询\n1 2 3 du -h --max-depth=1 /home | sort -hr ## 接下来依葫芦画瓢即可,找到不需要的大文件删除 （2）docker 我平时诸多服务采用的都是docker启动，借助docker自动删除一些不用的镜像，容器，网络，存储卷\n1 2 3 4 5 6 7 8 9 docker image prune -a docker container prune docker volume prune docker network prune docker system prune -a 最后结果\n可以看到清理了9个g个空间。有些应用知识临时测试，不打算长期用就及时删除吧，免得到时候还不好找。\n阿里云的ecs，40个g对于我安装了15个应用来说，只能刚刚好了。\n","date":"2024-04-03T15:07:04+08:00","permalink":"https://hublog.netlify.app/p/2404003/","title":"Linux存储空间的查询，清理"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 汝坐道场。销落诸念。其念若尽。则诸离念一切精明。动静不移。忆忘如一。当住此处。入三摩提。如明目人。处大幽暗。精性妙净。心未发光。此则名为色阴区宇。若目明朗。十方洞开。无复幽黯。名色阴尽。是人则能超越劫浊。观其所由。坚固妄想以为其本。 汝坐道场。销落诸念。其念若尽。则诸离念一切精明。动静不移。忆忘如一。当住此处。入三摩提。如明目人。处大幽暗。精性妙净。心未发光。此则名为色阴区宇。若目明朗。十方洞开。无复幽黯。名色阴尽。是人则能超越劫浊。观其所由。坚固妄想以为其本。 彼善男子。修三摩提。受阴尽者。虽未漏尽。心离其形。如鸟出笼。已能成就。从是凡身。上历菩萨六十圣位。得意生身。随往无碍。譬如有人。熟寐寱言。是人虽则无别所知。其言已成音韵伦次。令不寐者。咸悟其语。此则名为想阴区宇。若动念尽。浮想销除。于觉明心。如去尘垢。一伦生死。首尾圆照。名想阴尽。是人则能超烦恼浊。观其所由。融通妄想以为其本。 彼善男子。修三摩提。想阴尽者。是人平常梦想消灭。寤寐恒一。觉明虚静。犹如晴空。无复粗重。前尘影事。观诸世间大地山河。如镜鉴明。来无所黏。过无踪迹。虚受照应。了罔陈习。唯一精真。生灭根元。从此披露。见诸十方十二众生。毕殚其类。虽未通其各命由绪。见同生基。犹如野马。熠熠清扰。为浮根尘究竟枢穴。此则名为行阴区宇。若此清扰熠熠元性。性入元澄。一澄元习。如波澜灭。化为澄水。名行阴尽。是人则能超众生浊。观其所由。幽隐妄想以为其本。 彼善男子。修三摩提。行阴尽者。诸世间性。幽清扰动。同分生机。倏然隳裂。沈细纲纽。补特伽罗。酬业深脉。感应悬绝。于涅槃天。将大明悟。如鸡后鸣。瞻顾东方。已有精色。六根虚静。无复驰逸。内外湛明。入无所入。深达十方十二种类。受命元由。观由执元。诸类不召。于十方界。已获其同。精色不沈。发现幽秘。此则名为识阴区宇。若于群召已获同中。销磨六门。合开成就。见闻通邻。互用清净。十方世界。及与身心。如吠琉璃。内外明彻。名识阴尽。是人则能超越命浊。观其所由。罔象虚无。颠倒妄想以为其本。 汝等存心。秉如来道。将此法门。于我灭后。传示末世。普令众生觉了斯义。无令见魔。自作沈孽。保绥哀救。销息邪缘。令其身心入佛知见。从始成就。不遭歧路。 精真妙明。本觉圆净。非留死生。及诸尘垢。乃至虚空。皆因妄想之所生起。斯元本觉妙明精真。妄以发生诸器世间。如演若多。迷头认影。妄元无因。于妄想中。立因缘性。迷因缘者。称为自然。彼虚空性。犹实幻生。因缘自然。皆是众生妄心计度。阿难。知妄所起。说妄因缘。若妄元无。说妄因缘。元无所有。何况不知。推自然者。是故如来与汝发明。五阴本因。同是妄想。 是五受阴。五妄想成。汝今欲知因界浅深。唯色与空。是色边际。唯触及离。是受边际。唯记与忘。是想边际。唯灭与生。是行边际。湛入合湛。归识边际。此五阴元。重叠生起。生因识有。灭从色除。理则顿悟。乘悟并销。事非顿除。因次第尽。 ","date":"2024-03-20T12:03:27+08:00","permalink":"https://hublog.netlify.app/p/len-yan-jing-1/","title":"楞严经：增补楞严法要串珠修证次第"},{"content":"南无（mo）阿（a）弥陀佛\n南无 \u0026mdash; 皈依 阿 \u0026mdash; 无量无边 弥陀 \u0026mdash; 寿与光\n阿弥陀佛 \u0026mdash; 无量光寿佛 \u0026mdash; 无量光无量寿\n普贤如来根本咒\n1 2 3 4 5 嗡 ------------ 喉咙带鼻音到脑部，打通脑部气脉 阿 (a) ------------ 胸部发音 吽 ------------ 丹田发音 ","date":"2024-03-20T12:03:19+08:00","permalink":"https://hublog.netlify.app/p/nan-mo-a-mi-tuo-fo/","title":"南无阿弥陀佛"},{"content":"MySQL客户端执行SQL文件 不登录MySQL客户端执行SQL文件 有时候不想登录 MySQL 客户端执行 SQL 文件，也不想使用第三方的 gui 工具，可以如下命令\n1 mysql -u 用户名 -p -D数据库 \u0026lt; sql文件的全路径 例如\n1 mysql -u root -p -Dtorna \u0026lt; mysql.sql 数据库要提前创建好，sql 文件的路径要对\n","date":"2024-03-20T12:03:16+08:00","permalink":"https://hublog.netlify.app/p/mysql-tip/","title":"MySQL技巧"},{"content":"更新软件包缓存\n1 apt update 安装软件\n1 apt install 名字 卸载软件\n1 apt remove 名字 更新软件包\n1 apt upgrade 卸载软件并删除与之关联的配置文件\n1 apt purge 名字 ","date":"2024-03-20T12:03:03+08:00","permalink":"https://hublog.netlify.app/p/apt-command/","title":"apt常见命令"},{"content":"前言 最近在看动漫，但是好多站点要么没有，要么搜不到，有些搜索还有时间限制，或者从网盘转存，太繁琐了。所以想在自己的服务器新增一个看影视的功能，毕竟有时候找资源是真的痛苦。\n加上之前了解到GitHub上有一个在线采集影视的项目，正好今天上上手，自己动手部署，丰衣足食。\n项目介绍 项目框架为 Go+Vue。用到了 Redis和 Mysql，经过我的测试，docker启动运行需要差不多 500M 的内存，主要是MySQL占用内存较大，感觉可以优化为 postgresql 来大大降低内存占用。\n项目地址：https://github.com/ProudMuBai/GoFilm\n项目提供的教程需要自己构建docker镜像，并且构建的镜像需要特别大，对此我进行了优化，并讲 docker 镜像上传到了 docker仓库，所以你可以直接使用我构建的镜像而不用自己手动构建\n截至目前构建的最新版本为\n1 2 3 提交编号：67097207074deffb884c2ba88c935dc35efd46f0 日期：Feb 26, 2024 前置准备 安装好 docker，如果没有，请参考 docker安装。\n部署 方式一： xxxxxxxxxx # 前台运行./cms​# 后台运行nohup ./cms shell\n为了简单起见，采用 root 用户，如果不是，请自己注意权限问题，加上 sudo提权。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 进入 /opt/目录 cd /opt/ # 克隆项目 git clone https://github.com/muyiacc/GoFilm.git # 复制 GoFilm的 film目录到 /opt/ cp -r GoFilm/film ./ # 进入film cd film # 创建容器 docker compose up -d 方式二 使用项目作者提供的教程，请参考：film项目安装\n初始化 部署完成后还需进入管理端设置采集主站点\n浏览器输入 ip/manage，进入管理界面，默认用户和密码为 admin\n\u0026ldquo;HD(bf)\u0026rdquo;, Uri: https://bfzyapi.com/api.php/provide/vod/\n\u0026ldquo;HD(kk)\u0026rdquo;, Uri: https://kuaikan-api.com/api.php/provide/vod/from/kuaikan/\n\u0026ldquo;HD(fs)\u0026rdquo;, Uri: https://www.feisuzyapi.com/api.php/provide/vod/\n\u0026ldquo;HD(bfBk)\u0026rdquo;, Uri: http://by.bfzyapi.com/api.php/provide/vod/\n经测试，推荐使用的采集站\n删除容器 1 docker compose down ","date":"2024-03-11T00:03:15+08:00","permalink":"https://hublog.netlify.app/p/2403011/","title":"开源多播放源采集在线影视GoFilm"},{"content":"备份数据库 使用 pg_dump 命令备份整个数据库：\n1 pg_dump -U username -d dbname \u0026gt; backup.sql username 是数据库用户的用户名。 dbname 是要备份的数据库的名称。 backup.sql 是备份文件的名称。 备份特定表：\n只备份特定的表，可以使用以下命令：\n1 pg_dump -U username -d dbname -t tablename \u0026gt; table_backup.sql tablename 是要备份的表的名称。 备份远程数据库：\n如果要备份远程数据库，可以使用以下命令：\n1 pg_dump -h hostname -U username -d dbname \u0026gt; backup.sql hostname 是数据库服务器的主机名或 IP 地址。 备份不包括所有者和权限信息：\n备份时不包括所有者和权限信息。使用以下命令：\n1 pg_dump -U username -d dbname -O -x \u0026gt; backup.sql -O 选项用于不包括所有者信息。 -x 选项用于不包括访问权限信息。 备份完成后，你会在当前目录下找到生成的备份文件。\n请注意，备份数据库时，确保数据库连接是安全的，并且备份文件存储在安全的位置。\n恢复数据库 恢复数据库：\n使用 psql 命令来还原数据库，命令如下：\n1 psql -U username -d dbname \u0026lt; backup.sql 这将从备份文件中还原数据库。\n","date":"2024-03-09T00:03:15+08:00","permalink":"https://hublog.netlify.app/p/2403009/","title":"PostgreSQL备份，恢复数据库"},{"content":"查看ssl证书详细信息\n1 2 3 openssl x509 -in /path/to/public.crt -text -noout openssl ec -in /path/to/private.key -text -noout 比如快速查找包含的域名\n1 openssl x509 -in cert.pem -text -noout | grep seektao.cc ","date":"2024-03-08T00:03:35+08:00","permalink":"https://hublog.netlify.app/p/2403008/","title":"openssl小小使用"},{"content":"Certbot 申请 SSL 证书 Certbot 是一个由 Electronic Frontier Foundation (EFF) 开发的免费、开源的工具，用于自动化在 Web 服务器上部署 SSL/TLS 证书。SSL/TLS 证书是用于加密网站与用户之间传输的数据，确保数据传输的安全性和隐私性。\nCertbot 支持大多数常见的 Web 服务器，包括 Apache、Nginx、IIS 等。\n安装 certbot 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # debian sudo apt update # 添加软件源 sudo apt install software-properties-common sudo add-apt-repository ppa:certbot/certbot # 安装certbot sudo apt install certbot # centos 没用，不太清楚，应该类似于debian sudo yum update 此处省略添加软件源，请自己记得添加。。。 sudo yum install certbot 这里注意：一定要添加软件源，安装最新版本的 certbot，否则后面提示安装 dns 插件有问题\n安装完成，查看版本 certbot --version，目前是 2.9.0\n官方使用 snap 安装的教程： https://certbot.eff.org/instructions?ws=nginx\u0026os=debianbuster\n申请域名证书 使用 certbot 来申请 Let\u0026rsquo;s Encrypt 免费 CA 的 SSL 证书\n官网教程 https://eff-certbot.readthedocs.io/en/latest/using.html#getting-certificates-and-choosing-plugins\n1 2 # 比如，实际我没用，我使用的是下面的dns插件来获取 certbot certonly --webroot -w /path/to/your/website -d yourdomain.com 使用 Web 根目录/path/to/your/website中的文件验证您拥有yourdomain.com的控制权，并为该域名获取 SSL 证书。\nDNS 获取 SSL 泛域名证书（推荐） DNS 获取证书的好处在于可以申请泛域名证书，也就是像 *.seektao.cc也就是一次申请，到处使用，方便至极。\ncertbot-dns-dnspod certbot-dns-dnspod 是 dnspod 的插件，默认的 certbot 是没有的，需要手动安装\nGithub 地址\nhttps://github.com/tengattack/certbot-dns-dnspod\n1 2 3 4 5 6 7 8 9 # pip sudo pip install git+https://github.com/tengattack/certbot-dns-dnspod.git # snap 本次没有采用 sudo snap install certbot-dns-dnspod sudo snap set certbot trust-plugin-with-root=ok sudo snap connect certbot:plugin certbot-dns-dnspod 安装完成之后新建一个 .ini 文件，比如 /etc/certbot/dnspod.ini\n1 2 sudo mkdir /etc/certbot sudo touch /etc/certbot/dnspod.ini 编辑 dnspod.ini，填入下面的内容，点此跳转到 dnspod api 申请页面，注意申请的是 dnspod token\n1 2 dns_dnspod_api_id = 12345 dns_dnspod_api_token = 1234567890abcdef1234567890abcdef 1 sudo chmod 600 /etc/certbot/dnspod.ini 申请，替换为自己的域名\n1 2 3 4 5 6 7 8 9 10 11 12 sudo certbot certonly -a dns-dnspod \\ --dns-dnspod-credentials /etc/certbot/dnspod.ini \\ -d seektao.cc \\ -d \u0026#34;*.seektao.cc\u0026#34; 接着就是: 输入邮箱， 是否同意注册acme（选Y）， 是否同意发送邮件。。。看自己吧 接着等待，等待。。就完成了 通过日志可以看到证书文件保存在 /etc/letsencrypt/live\n1 2 3 4 5 # 其中 [cert name]/privkey.pem：证书的私钥。 [cert name]/fullchain.pem：在大多数服务器软件中使用的证书文件。 [cert name]/chain.pem：在Nginx \u0026gt;=1.3.7 中用于 OCSP stapling。 [cert name]/cert.pem：会破坏许多服务器配置，不应在未进一步阅读文档的情况下使用。 我们用到 privkey.pem，fullchain.pem 即可。\n此节关于 dnspod 申请 ssl 证书就是如此。\n自动续期 自动续期添加一个定时任务即可\n1 2 3 4 5 # 设置定时任务 sudo crontab -e # 每月1号的午夜执行 certbot renew 命令来续订证书 0 0 1 * * /usr/local/bin/certbot renew 需要注意自己的 certbot 执行路径是否正确\nwhich certbot 可以看到 certbot 执行路径\n关于续期的更多文档可以观看\nhttps://eff-certbot.readthedocs.io/en/latest/using.html#setting-up-automated-renewal\nNginx 一键生成模板 需求 1 这个需求在于我使用 Nginx 作为反代服务器，每新增一个服务，就要手动去新增一个 nginx 文件，而且我主要使用的是二级域名加端口的模式，配合使用 泛域名证书来编写这个脚本就很方便了。\n现在想要实现输入 脚本文件 域名 端口 就会在 /etc/nginx/conf.d/下新增一个以域名开头的配置文件，例如：\n1 2 3 4 5 6 $ sudo ./generate_nginx_simple_template.sh test1.seektao.cc 5980 Do you want to reload Nginx configuration? (y/n) y Reloading Nginx configuration... $ ll /etc/nginx/conf.d/test1.conf -rw-r--r-- 1 root root 965 Mar 25 13:01 /etc/nginx/conf.d/test1.conf 模板的内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 $ cat /etc/nginx/conf.d/test1.conf server { listen 80; server_name test1.seektao.cc; return 301 $scheme://test1.seektao.cc$request_uri; } server { listen 443 ssl http2; server_name test1.seektao.cc; # SSL 证书配置 ssl_certificate /etc/letsencrypt/live/seektao.cc/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/seektao.cc/privkey.pem; # 安全设置 ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; # 反向代理 location / { proxy_pass http://127.0.0.1:5980/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } # 日志配置 access_log /var/log/nginx/test1.seektao.cc.access.log; error_log /var/log/nginx/test1.seektao.cc.error.log; } 需求 1 脚本的配置 使用这个脚本请先申请泛域名证书，或者你自己再修改配置文件的证书位置。\nvim generate_nginx_simple_template.sh\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 #!/bin/bash # 检查参数数量 if [ \u0026#34;$#\u0026#34; -ne 2 ]; then echo \u0026#34;Usage: $0 \u0026lt;domain\u0026gt; \u0026lt;application_port\u0026gt;\u0026#34; exit 1 fi DOMAIN=$1 APPLICATION_PORT=$2 PORT_HTTP=80 PORT_HTTPS=443 CERT_DOMAIN=$(echo \u0026#34;$DOMAIN\u0026#34; | awk -F. \u0026#39;{print $(NF-1)\u0026#34;.\u0026#34;$NF}\u0026#39;) CONF_FILE_PREFIX=$(echo \u0026#34;$DOMAIN\u0026#34; | awk -F. \u0026#39;{print $1}\u0026#39;) CONF_FILE=\u0026#34;/etc/nginx/conf.d/${CONF_FILE_PREFIX}.conf\u0026#34; # 生成 Nginx 配置内容 cat \u0026lt;\u0026lt;EOF \u0026gt; $CONF_FILE server { listen $PORT_HTTP; server_name $DOMAIN; return 301 \\$scheme://$DOMAIN\\$request_uri; } server { listen $PORT_HTTPS ssl http2; server_name $DOMAIN; # SSL 证书配置 ssl_certificate /etc/letsencrypt/live/$CERT_DOMAIN/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/$CERT_DOMAIN/privkey.pem; # 安全设置 ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; # 反向代理 location / { proxy_pass http://127.0.0.1:$APPLICATION_PORT/; proxy_set_header Host \\$host; proxy_set_header X-Real-IP \\$remote_addr; proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto \\$scheme; } # 日志配置 access_log /var/log/nginx/$DOMAIN.access.log; error_log /var/log/nginx/$DOMAIN.error.log; } EOF # 检查临时文件是否成功创建 if [ ! -f \u0026#34;${CONF_FILE}\u0026#34; ]; then echo \u0026#34;Error: Failed to create temporary configuration file.\u0026#34; exit 1 fi # 提示用户是否需要修改配置文件 # read -p \u0026#34;Do you want to modify the configuration file before saving? (y/n) \u0026#34; choice # 根据用户选择执行相应操作 # case \u0026#34;$choice\u0026#34; in # y|Y ) # # 使用文本编辑器让用户修改配置文件 # echo \u0026#34;Editing configuration file...\u0026#34; # vim \u0026#34;${CONF_FILE}\u0026#34; # 或者使用你喜欢的其他文本编辑器，如 nano # ;; # n|N ) # # 直接将临时文件移动到目标位置 # echo \u0026#34;Saving configuration file without modification...\u0026#34; # mv \u0026#34;${CONF_FILE}\u0026#34; \u0026#34;${CONF_FILE}\u0026#34; # ;; # * ) # echo \u0026#34;Invalid choice. Exiting...\u0026#34; # exit 1 # ;; # esac # 检查 SSL 证书路径是否存在，如果不存在，提示用户手动申请 if [ ! -e \u0026#34;/etc/letsencrypt/live/$CERT_DOMAIN/fullchain.pem\u0026#34; ]; then echo \u0026#34;Warning: SSL certificate for $CERT_DOMAIN does not exist.\u0026#34; echo \u0026#34;Please use certbot or another tool to manually obtain a certificate for $CERT_DOMAIN.\u0026#34; fi # 提示用户是否需要重新加载 Nginx 配置 read -p \u0026#34;Do you want to reload Nginx configuration? (y/n) \u0026#34; reload_choice case \u0026#34;$reload_choice\u0026#34; in y|Y ) # 重新加载 Nginx 配置 echo \u0026#34;Reloading Nginx configuration...\u0026#34; sudo nginx -s reload ;; n|N ) echo \u0026#34;Nginx configuration will not be reloaded.\u0026#34; ;; * ) echo \u0026#34;Invalid choice. Exiting...\u0026#34; exit 1 ;; esac 需求 2 此内容为更新内容： 和需求 1 不同的是：生成的 nginx 配置文件为域名.conf而非 域名前缀.conf 这么做的目的是我在使用多个不同域名方便区分配置文件，特此更改。\n以下内容为正文：从需求 1 复制更改\n这个需求在于我使用 Nginx 作为反代服务器，每新增一个服务，就要手动去新增一个 nginx 文件，而且我主要使用的是二级域名加端口的模式，配合使用 泛域名证书来编写这个脚本就很方便了。\n现在想要实现输入 脚本文件 域名 端口 就会在 /etc/nginx/conf.d/下新增一个以全域名开头的配置文件，例如：\n1 2 3 4 5 6 $ sudo ./generate_nginx_simple_template.sh test1.seektao.cc 5980 Do you want to reload Nginx configuration? (y/n) y Reloading Nginx configuration... $ ll /etc/nginx/conf.d/test1.seektao.cc.conf -rw-r--r-- 1 root root 965 Mar 25 13:01 /etc/nginx/conf.d/test1.seektao.cc.conf 模板的内容如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 $ cat /etc/nginx/conf.d/test1.seektao.cc.conf server { listen 80; server_name test1.seektao.cc; return 301 $scheme://test1.seektao.cc$request_uri; } server { listen 443 ssl http2; server_name test1.seektao.cc; # SSL 证书配置 ssl_certificate /etc/letsencrypt/live/seektao.cc/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/seektao.cc/privkey.pem; # 安全设置 ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; # 反向代理 location / { proxy_pass http://127.0.0.1:5980/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } # 日志配置 access_log /var/log/nginx/test1.seektao.cc.access.log; error_log /var/log/nginx/test1.seektao.cc.error.log; } 需求 2 脚本的配置 使用这个脚本请先申请泛域名证书，或者你自己再修改配置文件的证书位置。\nvim generate_nginx_simple_template1.sh\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 #!/bin/bash # 检查参数数量 if [ \u0026#34;$#\u0026#34; -ne 2 ]; then echo \u0026#34;Usage: $0 \u0026lt;domain\u0026gt; \u0026lt;application_port\u0026gt;\u0026#34; exit 1 fi DOMAIN=$1 APPLICATION_PORT=$2 PORT_HTTP=80 PORT_HTTPS=443 CERT_DOMAIN=$(echo \u0026#34;$DOMAIN\u0026#34; | awk -F. \u0026#39;{print $(NF-1)\u0026#34;.\u0026#34;$NF}\u0026#39;) CONF_FILE_PREFIX=$(echo \u0026#34;$DOMAIN\u0026#34;) CONF_FILE=\u0026#34;/etc/nginx/conf.d/${CONF_FILE_PREFIX}.conf\u0026#34; # 生成 Nginx 配置内容 cat \u0026lt;\u0026lt;EOF \u0026gt; $CONF_FILE server { listen $PORT_HTTP; server_name $DOMAIN; return 301 \\$scheme://$DOMAIN\\$request_uri; } server { listen $PORT_HTTPS ssl http2; server_name $DOMAIN; # SSL 证书配置 ssl_certificate /etc/letsencrypt/live/$CERT_DOMAIN/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/$CERT_DOMAIN/privkey.pem; # 安全设置 ssl_protocols TLSv1.2 TLSv1.3; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; # 反向代理 location / { proxy_pass http://127.0.0.1:$APPLICATION_PORT/; proxy_set_header Host \\$host; proxy_set_header X-Real-IP \\$remote_addr; proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto \\$scheme; } # 日志配置 access_log /var/log/nginx/$DOMAIN.access.log; error_log /var/log/nginx/$DOMAIN.error.log; } EOF # 检查临时文件是否成功创建 if [ ! -f \u0026#34;${CONF_FILE}\u0026#34; ]; then echo \u0026#34;Error: Failed to create temporary configuration file.\u0026#34; exit 1 fi # 提示用户是否需要修改配置文件 # read -p \u0026#34;Do you want to modify the configuration file before saving? (y/n) \u0026#34; choice # 根据用户选择执行相应操作 # case \u0026#34;$choice\u0026#34; in # y|Y ) # # 使用文本编辑器让用户修改配置文件 # echo \u0026#34;Editing configuration file...\u0026#34; # vim \u0026#34;${CONF_FILE}\u0026#34; # 或者使用你喜欢的其他文本编辑器，如 nano # ;; # n|N ) # # 直接将临时文件移动到目标位置 # echo \u0026#34;Saving configuration file without modification...\u0026#34; # mv \u0026#34;${CONF_FILE}\u0026#34; \u0026#34;${CONF_FILE}\u0026#34; # ;; # * ) # echo \u0026#34;Invalid choice. Exiting...\u0026#34; # exit 1 # ;; # esac # 检查 SSL 证书路径是否存在，如果不存在，提示用户手动申请 if [ ! -e \u0026#34;/etc/letsencrypt/live/$CERT_DOMAIN/fullchain.pem\u0026#34; ]; then echo \u0026#34;Warning: SSL certificate for $CERT_DOMAIN does not exist.\u0026#34; echo \u0026#34;Please use certbot or another tool to manually obtain a certificate for $CERT_DOMAIN.\u0026#34; fi # 提示用户是否需要重新加载 Nginx 配置 read -p \u0026#34;Do you want to reload Nginx configuration? (y/n) \u0026#34; reload_choice case \u0026#34;$reload_choice\u0026#34; in y|Y ) # 重新加载 Nginx 配置 echo \u0026#34;Reloading Nginx configuration...\u0026#34; sudo nginx -s reload ;; n|N ) echo \u0026#34;Nginx configuration will not be reloaded.\u0026#34; ;; * ) echo \u0026#34;Invalid choice. Exiting...\u0026#34; exit 1 ;; esac 后话 在编写这篇教程之前，我一直都是用的是 Nginx Proxy Manager （简称 NPM）图形化管理界面，觉得 Nginx 配置看不懂，太复杂，对 Nginx 也不太懂。\n教程的前一天，我想使用 Nginx Proxy Manager 为反代的服务添加 location 片段，却会导致添加了 location 的服务挂掉，不论是图形化添加还是修改配置文件，我还以为是我的配置姿势不对，添加的 location 内容有错，后面找了很久的资料，却没能找到解决办法，最后还是在 NPM 的 Github issues 很多人出现了这个问题，而且没有一个合适的解决方案，NPM 的 bug。唉，一不做，二不休，不如直接用 Nginx，还少去了 NPM 占据了一部分内存。\n安装 Nginx 的过程还是很愉快的。但是对于 ssl 证书我又了解甚少了，对此又花费了很多精力去了解 certbot，结果 apt 安装的 certbot 没有 dnspod 插件？？我一个大问号，又卸载了 apt 方式安装的 certbot，去安装 snap，通过 snap 安装 certbot，我发现 snap 也有问题？？但是找到了 snap 上 GitHub 上的 dnspod 插件，也支持 snap，然后又卸载 certbot，snap，重新通过 apt 安装 certbot，然后下载 dnspod，结果又在申请证书的时候出错了。原来我为了简便，dnspod.ini 用的是 NPM 之前的配置。后来改了就好了。\n现在只差反代了，上面的脚本也是为了我在 NPM 已经反代的服务而写的，毕竟一个一个复制然后改端口也挺麻烦的。\n全文完。\n","date":"2024-03-06T00:03:15+08:00","permalink":"https://hublog.netlify.app/p/2403006/","title":"Certbot安装和申请免费Let's Encrypt证书，附一键生成脚本"},{"content":"nginx-proxy-manager 可以自动续期ssl证书，使用docker搭建也比较方便。\n今天我的网站出现证书过期，然后我去管理端手动续期也出现了失败，但是没有报具体的错误，接着升级了镜像，新开容器也没有解决。\n还好这个问题之前我也遇见过，可以通过重新申请域名ssl证书复现，让其给出真正的报错，结果和之前一样，缺乏 “zope”模块。\n错误大概如下：\n1 The \u0026#39;certbot_dns_dnspod.dns_dnspod\u0026#39; plugin errored while loading: No module named \u0026#39;zope\u0026#39;. You may need to remove or update this plugin. The Certbot log will contain the full error details and this should be reported to the plugin developer. 其中的 No module named \u0026lsquo;zope\u0026rsquo;，就是重点，解决办法就是进入容器，安装 zope\n1 2 3 4 sudo docker exec -it [容器的id] /bin/bash # 进入容器之后 pip install zope -i https://pypi.tuna.tsinghua.edu.cn/simple 等待安装完成，ctrl+p，ctrl+q 退出即可。\n接着再重新去手动续期下即可。\n","date":"2024-03-05T00:03:15+08:00","permalink":"https://hublog.netlify.app/p/2403005/","title":"nginx-proxy-manager申请证书失败，缺乏zope模块(已解决)"},{"content":"nginx-proxy-manager 可以自动续期ssl证书，使用docker搭建也比较方便。\n今天我的网站出现证书过期，然后我去管理端手动续期也出现了失败，但是没有报具体的错误，接着升级了镜像，新开容器也没有解决。\n还好这个问题之前我也遇见过，可以通过重新申请域名ssl证书复现，让其给出真正的报错，结果和之前一样，缺乏 “zope”模块。\n错误大概如下：\n1 The \u0026#39;certbot_dns_dnspod.dns_dnspod\u0026#39; plugin errored while loading: No module named \u0026#39;zope\u0026#39;. You may need to remove or update this plugin. The Certbot log will contain the full error details and this should be reported to the plugin developer. 其中的 No module named \u0026lsquo;zope\u0026rsquo;，就是重点，解决办法就是进入容器，安装 zope\n1 2 3 4 sudo docker exec -it [容器的id] /bin/bash # 进入容器之后 pip install zope -i https://pypi.tuna.tsinghua.edu.cn/simple 等待安装完成，ctrl+p，ctrl+q 退出即可。\n接着再重新去手动续期下即可。\n","date":"2024-03-05T00:03:15+08:00","permalink":"https://hublog.netlify.app/p/2403005/","title":"nginx-proxy-manager申请证书失败，缺乏zope模块(已解决)"},{"content":"简介 简单、强大且灵活的工具，管理多个 Flutter SDK 版本。\n官网：https://fvm.app/\n安装 fvm Windows-自动安装 1 choco install fvm 如果没有安装 choco，需要手动安装\n1 Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(\u0026#39;https://chocolatey.org/install.ps1\u0026#39;)) Windows-手动安装 下载 fvm：fvm-3.2.1-windows-x64.zip\n解压，加入到 PATH环境变量\nLinux 1 curl -fsSL https://fvm.app/install.sh | sudo bash 安装 flutter 指定 Flutter 版本缓存路径（可选） 设置环境变量 FVM_CACHE_PATH\n1 D:\\develop\\fvm 查看 Flutter 可下载的版本 1 fvm releases 安装 Flutter 1 fvm install 3.24.5 如果提示：\n1 2 3 fatal: unable to access \u0026#39;https://github.com/flutter/flutter.git/\u0026#39;: Recv failure: Connection was reset Exception: Git clone failed 需要配置 flutter 的 git 镜像地址，可以设置为清华的地址，通过设置环境变量 FVM_FLUTTER_URL实现，之后重新安装 flutter\n1 https://mirrors.tuna.tsinghua.edu.cn/git/flutter-sdk.git 如果设置了缓存地址在 D:\\develop\\fvm，flutter 安装完成后，会产生几个文件夹：\ncache.git：缓存文件夹 versions：下载 flutter 版本 设置 flutter 在上一步安装完成之后，使用管理员权限打开终端，设置全局 flutter，保证fvm flutter命令可用\n1 fvm global 3.24.5 设置这一步后，会在 D:\\develop\\fvm产生 default文件夹，指向设置的 flutter 版本\n启用 flutter 使用 fvm flutter命令，会下载一些依赖\n1 2 3 4 5 6 7 8 9 10 11 PS C:\\Windows\\system32\u0026gt; fvm flutter Checking Dart SDK version... Downloading Dart SDK from Flutter engine ... Downloading the Dart SDK using the BITS service failed, retrying with WebRequest... Expanding downloaded archive with PowerShell... Building flutter tool... Running pub upgrade... Resolving dependencies... (48.6s) Downloading packages... (37.7s) Got dependencies. Manage your Flutter app development. 直到完成，fluttter 就可以使用了\n由于是使用 fvm 安装的 flutter，所以在使用 flutter 命令前，需要加上 fvm 命令作为前置命令。\nfvm 基本使用 查看本地已经安装的版本\n1 fvm list flutter doctor （必做） 为了更好的开发，使用 fvm flutter doctor 检查依赖和本地环境，跟着提示完成操作\n1 fvm flutter doctor 根据提示信息安装缺少的组件，大致如下所示：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 PS C:\\Windows\\system32\u0026gt; fvm flutter doctor Downloading Material fonts... 3.3s Downloading Gradle Wrapper... 272ms Downloading package sky_engine... 418ms Downloading package flutter_gpu... 356ms Downloading flutter_patched_sdk tools... 679ms Downloading flutter_patched_sdk_product tools... 518ms Downloading windows-x64 tools... 3.2s Downloading windows-x64/font-subset tools... 366ms Doctor summary (to see all details, run flutter doctor -v): [!] Flutter (Channel stable, 3.24.5, on Microsoft Windows [版本 10.0.19045.5965], locale zh-CN) ! Upstream repository https://mirrors.tuna.tsinghua.edu.cn/git/flutter-sdk.git is not a standard remote. Set environment variable \u0026#34;FLUTTER_GIT_URL\u0026#34; to https://mirrors.tuna.tsinghua.edu.cn/git/flutter-sdk.git to dismiss this error. [√] Windows Version (Installed version of Windows is version 10 or higher) [X] Android toolchain - develop for Android devices X Unable to locate Android SDK. Install Android Studio from: https://developer.android.com/studio/index.html On first launch it will assist you in installing the Android SDK components. (or visit https://flutter.dev/to/windows-android-setup for detailed instructions). If the Android SDK has been installed to a custom location, please use `flutter config --android-sdk` to update to that location. [√] Chrome - develop for the web [X] Visual Studio - develop Windows apps X Visual Studio not installed; this is necessary to develop Windows apps. Download at https://visualstudio.microsoft.com/downloads/. Please install the \u0026#34;Desktop development with C++\u0026#34; workload, including all of its default components [√] Android Studio (version 2024.3.2) [√] Connected device (3 available) [!] Network resources X A network error occurred while checking \u0026#34;https://maven.google.com/\u0026#34;: 信号灯超时时间已到 X An HTTP error occurred while checking \u0026#34;https://github.com/\u0026#34;: 信号灯超时时间已到 ! Doctor found issues in 4 categories. 需要做的有：\nFlutter：Flutter SDK Android toolchain - develop for Android devices：安装 Android 工具链，包括不限于 Android SDK，通过 Android Studio 可以安装 Android SDK Visual Studio - develop Windows apps：开发 Windows app Android Studio：开发工具，IDE 附录 对于 Flutter 具体版本的选择和配置可以按照参考这里：CSDN\n也可以参考我的另一篇文章：Flutter 安装配置\n","date":"2024-03-03T00:03:15+08:00","permalink":"https://hublog.netlify.app/p/2403003/","title":"FVM，Flutter的多版本管理工具"},{"content":"情景一：主机连接容器 需求：主机内的某个应用需要用到容器启动的数据库，主机的应用关于该容器数据库的host，port该如何填写？\n情景二：容器连接容器 第一种：同一配置文件 第二种：不同配置文件 新建一个网络，把容器都加入到这个网络里\n1 docker network create my_network 容器1：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 version: \u0026#39;3.3\u0026#39; services: maccms10: image: esme518/docker-maccms10 container_name: maccms10 volumes: - ./data:/var/www/html ports: - 2419:80 networks: - my_network environment: - DB_HOST=mariadb - DB_PORT=3306 networks: my_network: external: true 容器2：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 version: \u0026#39;3.3\u0026#39; services: mariadb: image: mariadb:10.3 container_name: mariadb volumes: - ./mysql:/var/lib/mysql - ./backup:/backup environment: - MARIADB_ROOT_PASSWORD=12345678 ports: - 2420:3306 networks: - my_network networks: my_network: external: true 情景三：容器连接主机 1 2 3 4 5 6 7 8 9 10 11 12 version: \u0026#39;3.3\u0026#39; services: maccms10: image: esme518/docker-maccms10 container_name: maccms10 volumes: - ./data:/var/www/html ports: - 2419:80 environment: - DB_HOST=host.docker.internal # 使用特殊的DNS名称连接到主机上的数据库 - DB_PORT=3306 # 主机上数据库的端口 ","date":"2024-03-02T00:03:11+08:00","permalink":"https://hublog.netlify.app/p/2403002/","title":"Docker容器和主机互相连接的三种情景"},{"content":"前言 之前一直使用压缩包的方式安装MySQL，后来发现新装系统要下载指定版本，版本不一定好找，安装过程的命令复用性不高，并不好用， 遂采用apt仓库安装。\n卸载 卸载系统自带，删除残留的文件\n1 2 3 4 5 dpkg -l | grep -E \u0026#39;(mysql|maria)\u0026#39; sudo apt remote --purge 软件包名字 sudo rm -rf /etc/mysql /var/lib/mysql 安装 mysql-apt-config 下载 mysql-apt-config 下载地址：https://dev.mysql.com/downloads/repo/apt/\n1 2 # 一键命令 wget https://repo.mysql.com//mysql-apt-config_0.8.32-1_all.deb 历史版本： wget https://dev.mysql.com/get/mysql-apt-config_0.8.29-1_all.deb\n安装 mysql-apt-config 1 sudo apt install ./mysql-apt-config_0.8.32-1_all.deb 弹出配置界面，如果需要配置，回车进入，一般默认即可，所以直接键盘上下键选择ok，即可添加成功\n更新软件仓库 1 sudo apt update 安装MySQL 1 2 3 4 5 6 7 8 9 10 11 sudo apt install mysql-community-client-plugins sudo apt install mysql-community-client-core sudo apt install mysql-common sudo apt install mysql-community-client sudo apt install mysql-client sudo apt install mysql-community-server 最后弹出图形界面，设置密码即可\n","date":"2024-03-01T00:03:15+08:00","permalink":"https://hublog.netlify.app/p/2403001/","title":"Debian使用APT安装，卸载MySQL"},{"content":"视频讲解：Bilibili/B站\n脚本名称：autoload.lua\n功能：实现 mpv 播放器 自动播放 下一个视频\n脚本地址：Github\n","date":"2023-12-12T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2312012/","title":"MPV播放器入门指南-第二期：脚本：自动连播"},{"content":" Windows10专业工作站版本\n1. 概述 RuskDesk 是一个使用 rust语言编写的开源的远程控制，支持自行搭建服务端，本次就来介绍一下如何在 windows上搭建。\n官网地址：https://rustdesk.com\n2. 搭建RustDesk Server 下载两个工具：NSSM ，RuskDesk Server\n解压它们，放到各自的文件夹下，把 NSSM 加入到系统的环境变量，确保可随处执行\nxxxxxxxxxx nssm stop JupyterLabService​​nssm remove JupyterLabServicecmd\n1 2 nssm install \u0026#34;RustDesk hbbs service\u0026#34; \u0026#34;C:\\Program Files\\RustDesk Server\\hbbs.exe\u0026#34; -r 0.0.0.0 -k _ nssm install \u0026#34;RustDesk hbbr service\u0026#34; \u0026#34;C:\\Program Files\\RustDesk Server\\hbbr.exe\u0026#34; -k _ 比如我的如下\n1 nssm install \u0026#34;RustDesk hbbs service\u0026#34; \u0026#34;D:\\Program Files\\rustdesk-server-windows-x86_64\\hbbs.exe\u0026#34; -r 0.0.0.0 -k _ 执行完成之后应该在 服务 能够看到这个 启动服务\n1 nssm start \u0026#34;RustDesk hbbs service\u0026#34; 关闭服务\n1 nssm stop \u0026#34;RustDesk hbbs service\u0026#34; 3. 客户端 下载客户端：点此下载\n安装到本地，安装过程不做介绍。\n安装完成应该如下 点击我所标记的地方，进入设置 接着点击网络，解锁网络设置 填如id服务器，和Key。等等，我发现了个问题，web端官方给出的文档是 21114端口，好像无法访问，先打开打开cmd，查看监听的端口， 果然没有21114端口，然后我去github官方找doc了， 搜索 21114，有一个相关的回答，官方说web端被移除了，合着我白忙活了？？\n不过别慌，不就是没有web客户端嘛，先填写本机ip试试先，至于这个 key嘛，如果你留意文件夹还记得是否还记得有个 .pub结尾的。熟悉证书的都有点灵感了，这个一般都是公钥，使用记事本打开复制到key中试试，结果如下\n返回主页，看中间的底部，有个 就绪字样 可以了？？为了确定到底是不是，然后我就把那个id服务器随便填了一个ip，发现还真就不行了，多试了几次也还是这样，填回自己的就好了，为了给你们看看还是截图为证\n好了，关于这部分应该就是可以了，至于远程连接实际有没有问题，下次再测试测试，现在已经晚上12：23了。\n在后来我找解决web客户端的时候，我发现 rustdesk server 文件夹下有个RustDeskServer.Setup.exe 好家伙，这不就是server安装程序嘛，我还用nssm干嘛，点击下一步下一步就好了，后面测试了确实是可以的，不过有一步是弹出个程序框，需要点击启动。好了，现在真的12：30了。\n","date":"2023-12-11T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2312011/","title":"Windows搭建RustDesk-Server并使用-1"},{"content":"1. 概述 想在 Windows上搭建 Jupyter-lab服务，开启自启，有公网ip的同学还可以远程访问，实现远程办公。\n1 conda install jupyterlab 1 2 3 4 5 6 nssm install JupyterLabService \u0026#34;jupyter-lab\u0026#34; \u0026#34;--config=C:\\path\\to\\your\\jupyter_config.json\u0026#34; nssm install JupyterLabService \u0026#34;D:\\develop\\miniconda3\\Scripts\\jupyter-lab.exe\u0026#34; \u0026#34;--config=C:\\path\\to\\your\\jupyter_config.json\u0026#34; sc create JupyterLabService binPath= \u0026#34;\\\u0026#34;D:\\develop\\miniconda3\\Scripts\\jupyter-lab.exe\\\u0026#34; --config=C:\\path\\to\\your\\jupyter_config.json\u0026#34; start= auto 使用以下命令来启动这个服务：\n1 nssm start JupyterLabService 这将会启动 JupyterLab 服务，并让它使用你指定的 jupyter_server_config.json 配置文件。\n1 2 3 4 nssm stop JupyterLabService nssm remove JupyterLabService ","date":"2023-12-10T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2312010/","title":"Windows搭建Jupyter-lab服务，加入系统服务，开机自启。指定端口和默认路径，开启远程访问，配合公网ip，可远程工作。(未完成)"},{"content":"工具下载 下载 Unlocker: https://github.com/DrDonk/unlocker/releases/download/v4.2.7/unlocker427.zip\n下载 VMware17: https://www.vmware.com/go/getworkstation-win\n下载 MacOS 13: https://archive.org/download/macos-collection/Public%20Betas/macOS%2013%20%28Ventura%29/Ventura%2013.0%20v18.0.03.iso\n建议使用 motix 下载，速度更快，有些可能需要用点上网手段才可以下载： Motrix: https://dl.motrix.app/release/Motrix-Setup-1.8.19.exe\nVM新建虚拟机选择MacOS，版本选择13即可\n1 2 3 4 5 6 7 8 9 10 11 12 smbios.reflectHost = \u0026#34;TRUE\u0026#34; hw.model = \u0026#34;MacBookPro14,3\u0026#34; board-id = \u0026#34;Mac-551B86E5744E2388\u0026#34; cpuid.0.eax = \u0026#34;0000:0000:0000:0000:0000:0000:0000:1011\u0026#34; cpuid.0.ebx = \u0026#34;0111:0101:0110:1110:0110:0101:0100:0111\u0026#34; cpuid.0.ecx = \u0026#34;0110:1100:0110:0101:0111:0100:0110:1110\u0026#34; cpuid.0.edx = \u0026#34;0100:1001:0110:0101:0110:1110:0110:1001\u0026#34; cpuid.1.eax = \u0026#34;0000:0000:0000:0001:0000:0110:0111:0001\u0026#34; cpuid.1.ebx = \u0026#34;0000:0010:0000:0001:0000:1000:0000:0000\u0026#34; cpuid.1.ecx = \u0026#34;1000:0010:1001:1000:0010:0010:0000:0011\u0026#34; cpuid.1.edx = \u0026#34;0000:0111:1000:1011:1111:1011:1111:1111\u0026#34; featureCompat.enable = \u0026#34;TRUE\u0026#34; 1 2 3 4 5 6 7 8 9 10 11 12 13 cpuid.0.eax = \u0026#34;0000:0000:0000:0000:0000:0000:0000:1011\u0026#34; cpuid.0.ebx = \u0026#34;0111:0101:0110:1110:0110:0101:0100:0111\u0026#34; cpuid.0.ecx = \u0026#34;0110:1100:0110:0101:0111:0100:0110:1110\u0026#34; cpuid.0.edx = \u0026#34;0100:1001:0110:0101:0110:1110:0110:1001\u0026#34; cpuid.1.eax = \u0026#34;0000:0000:0000:0001:0000:0110:0111:0001\u0026#34; cpuid.1.ebx = \u0026#34;0000:0010:0000:0001:0000:1000:0000:0000\u0026#34; cpuid.1.ecx = \u0026#34;1000:0010:1001:1000:0010:0010:0000:0011\u0026#34; cpuid.1.edx = \u0026#34;0000:0111:1000:1011:1111:1011:1111:1111\u0026#34; smbios.reflectHost = \u0026#34;TRUE\u0026#34; hw.model = \u0026#34;MacBookPro14,3\u0026#34; board-id = \u0026#34;Mac-551B86E5744E2388\u0026#34; keyboard.vusb.enable = \u0026#34;TRUE\u0026#34; mouse.vusb.enable = \u0026#34;TRUE\u0026#34; ","date":"2023-12-09T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2312009/","title":"VMware17安装MacOS13（待）"},{"content":"在初次使用 Redis 时，以下是一些常见的需要修改的命令：\n修改绑定地址：\n1 bind 127.0.0.1 默认情况下，Redis 绑定在本地回环地址 127.0.0.1。如果您想让 Redis 可以从其他主机访问，可以将此地址修改为服务器的 IP 地址或 0.0.0.0，表示接受来自任何地址的连接。\n修改监听端口：\n1 port 6379 默认情况下，Redis 监听端口 6379。如果您需要使用其他端口，可以将此值修改为所需的端口号。\n配置密码：\n1 requirepass your_password 默认情况下，Redis 未设置密码。为了增加安全性，您可以设置密码以保护 Redis 服务器。将 your_password 替换为您自己的密码。\n设置持久化选项：\n1 save 60 1000 这是示例持久化选项的配置。Redis 允许您将数据持久化到磁盘，以便在重启后恢复数据。上述配置表示在 60 秒内，如果有至少 1000 个键被修改，则自动执行持久化操作。您可以根据需求调整这些值。\n配置最大内存限制：\n1 maxmemory 2GB 默认情况下，Redis 不设置最大内存限制。通过设置最大内存限制，您可以防止 Redis 在使用过多内存时导致服务器性能下降或崩溃。将 2GB 替换为您希望设置的内存限制值。\n这些是一些常见的需要修改的 Redis 配置命令，您可以根据自己的需求进行相应的修改。修改完成后，记得重新启动 Redis 服务器使更改生效。\n1 2 3 4 daemonize protected-mode bind requirepass ","date":"2023-12-08T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2312008/","title":"Redis初始配置"},{"content":"概述 mpv 是一个免费的（在自由）媒体播放器的命令行。它支持多种媒体文件格式、音频和视频编解码器以及字幕类型。\n官网：https://mpv.io/\n源码：https://github.com/mpv-player/mpv\n下载地址：https://mpv.io/installation/\n文档：https://mpv.io/manual/stable/\n安装 Windows mpv-x86_64-v3-20231210：点击开始下载。\n注意：下载之后，不要解压到 C 盘，放到其他盘符\n比如 D:\\player\\mpv\n双击 mpv.exe 即可运行 mpv 播放器。\n配置 关联格式 进入解压目录下的 installer 文件夹，有个 mpv-install.bat脚本，管理员权限运行它，等待完成，按任意键退出。\n配置文件夹 配置文件夹用于自定义配置，安装插件\n进入解压的目录，新建 portable_config文件夹\n进入 portable_config\n新建文件：\nmpv.conf：mpv 配置文件 input.conf：存放自定义的快捷键配置 新建文件夹：\nscripts：存放第三方脚本 script-opts：存放第三方脚本配置 脚本 所有脚本都遵循上述规范的配置\n缩略图 项目地址：https://github.com/po5/thumbfast\n下载项目下的 thumbfast.lua，osc.lua\n下载之后把 thumbfast.lua 放入 mpv目录/portable_config/，也就是 mpv.conf 同目录。\nosc.lua 放入 mpv目录/portable_config/scripts。\n在 input.conf 加入一行\n1 a load-script \u0026#34;~~home/thumbfast.lua\u0026#34;;show-text \u0026#34;载入略缩图脚本\u0026#34; 重启 mpv，即可生效\n手动启用， 按 a即可加载缩略图。\n如果需要默认加载，把 thumbfast.lua 放入 scripts 中即可\n文件浏览器 功能：在 mpv 中浏览和打开文件和文件夹。\n该脚本在 mpv API 之外不使用任何东西，因此在所有平台上都应该是相同的。浏览器可以上下移动目录，开始播放文件和文件夹，或者将它们添加到队列中。\n项目地址：https://github.com/CogentRedTester/mpv-file-browser\n快捷键：\nCtrl+o 打开脚本，进入选择 键盘上下键 选择列表 enter 选中播放 键盘左右键 切换文件夹 ECS 关闭列表 脚本配置：\nmpv目录/portable_config/script-opts/file_browser.conf\n1 2 # 注意使用英文 , 隔开 root=~/Videos,~/Music,~/Pictures,~/,C:/,D:/,E:/ 最近播放列表 功能：查看最近播放的列表\n项目地址：https://github.com/hacel/recent\n快捷键：\n`：打开最近播放 脚本配置：\nmpv目录\\portable_config\\script-opts\\recent.conf\nauto_run_idle=no：关闭 mpv 打开时显示最近播放，默认为 yes\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 auto_save=yes save_bind= auto_save_skip_past= auto_run_idle=no\t# 关闭mpv打开时显示最近播放，默认为yes write_watch_later=yes display_bind=` mouse_controls=yes log_path=history.log date_format=%d/%m/%y %X show_paths=no split_paths=yes font_scale=50 border_size=0.7 hi_color=H46CFFF ellipsis=no 杜比视界 杜比视界 DV HDR 常见的播放器都不支持，mpv 只需要在 mpv.conf 中添加两行代码即可让颜色正常化\n1 2 vo=gpu-next # 杜比视界颜色正常化 gpu-context=win # 杜比视界颜色正常化 mpv.conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 ##### 视频输出 ##### ## 设置视频输出驱动为 gpu-next，通常用于更好的视频渲染和支持杜比视界等高级视频特性。 vo=gpu-next # 杜比视界颜色正常化 ## 指定 GPU 上下文为 Windows，确保在 Windows 平台上使用正确的图形上下文，以实现颜色正常化。 # gpu-context=win # 杜比视界颜色正常化 ##### 音量 ##### # 默认音量 volume=80 ##### 窗口配置 ##### ## 如果启用则视频不会超过屏幕大小。 autofit-larger=100%x100% ## 如果启用则默认启动时最大化窗口。 # window-maximized=yes ## 设置窗口缩放比例为 1，表示窗口大小为默认大小。 window-scale=2 # 设置窗口的初始大小为 1500x1200 像素。 #--geometry=1500x1200 ## 如果启用则 MPV 启动时会全屏。 # fullscreen=yes ##### 其他 ##### ## 退出自动保存进度 save-position-on-quit=yes # 保存音量 volume-save=yes 快捷键 皆为内置快捷键\n1 2 3 4 5 6 7 8 9 f\t全屏 j J\t循环当前的字幕 [ ] 将当前播放速度减小/增加10% backspace\t将速度重置为正常 m\t静音，再按取消静音 9 0\t调小音量/调大音量 space p\t暂停，再按取消暂停 q\t停止播放并退出 Q\t停止播放并退出，如果重新播放，尽可能恢复播放的文件的播放位置 关于快捷键可查看 附录-快捷键\n附录 快捷键 图示：\n英文版\n中文版：\n快捷键 中文 英文 LEFT and RIGHT 向后/向前跳转 5 秒。Shift+箭头进行 1 秒精确跳转（见\u0026ndash;hr-seek）。 Seek backward/forward 5 seconds. Shift+arrow does a 1 second exact seek (see \u0026ndash;hr-seek). UP and DOWN 向前/向后跳转 1 分钟。Shift+箭头进行 5 秒精确跳转（见\u0026ndash;hr-seek）。 Seek forward/backward 1 minute. Shift+arrow does a 5 second exact seek (see \u0026ndash;hr-seek). Ctrl+LEFT and Ctrl+RIGHT 跳转到上一个/下一个字幕。受一些限制，可能并不总是有效；参见 sub-seek 命令。 Seek to the previous/next subtitle. Subject to some restrictions and might not always work; see sub-seek command. Ctrl+Shift+LEFT and Ctrl+Shift+RIGHT 调整字幕延迟，以便下一个或上一个字幕立即显示。这对于将字幕与音频同步特别有用。 Adjust subtitle delay so that the next or previous subtitle is displayed now. This is especially useful to sync subtitles to audio. [ and ] 将当前播放速度减小/增加 10%。 Decrease/increase current playback speed by 10%. { and } 当前播放速度减半/加倍。 Halve/double current playback speed. BACKSPACE 将播放速度重置为正常。 Reset playback speed to normal. Shift+BACKSPACE 撤销上次跳转。仅当播放列表条目未更改时有效。再次按下将返回到原始位置。有关详细信息，请参阅 revert-seek 命令。 Undo the last seek. This works only if the playlist entry was not changed. Hitting it a second time will go back to the original position. See revert-seek command for details. Shift+Ctrl+BACKSPACE 标记当前位置。然后 Shift+BACKSPACE 将使用该标记位置作为还原位置（一旦您跳回，标记将被重置）。您可以使用此功能在文件中进行跳转，然后返回到您离开的确切位置。 Mark the current position. This will then be used by Shift+BACKSPACE as revert position (once you seek back, the marker will be reset). You can use this to seek around in the file and then return to the exact position where you left off. \u0026lt; and \u0026gt; 在播放列表中向后/向前。 Go backward/forward in the playlist. ENTER 在播放列表中向前。 Go forward in the playlist. p and SPACE 暂停（再次按下取消暂停）。 Pause (pressing again unpauses). . 向前一步。按一次将暂停，每连续按下一次将播放一帧，然后再次进入暂停模式。 Step forward. Pressing once will pause, every consecutive press will play one frame and then go into pause mode again. , 向后一步。按一次将暂停，每连续按下一次将倒放一帧，然后再次进入暂停模式。 Step backward. Pressing once will pause, every consecutive press will play one frame in reverse and then go into pause mode again. q 停止播放并退出。 Stop playing and quit. Q 类似于 q，但存储当前播放位置。如果可能的话，稍后再次播放相同的文件将在旧的播放位置继续播放。请参阅 RESUMING PLAYBACK。 Like q, but store the current playback position. Playing the same file later will resume at the old playback position if possible. See RESUMING PLAYBACK. / and * 减小/增大音量。 Decrease/increase volume. 9 and 0 减小/增大音量。 Decrease/increase volume. m 静音。 Mute sound. _ 循环浏览可用的视频轨道。 Cycle through the available video tracks. # 循环浏览可用的音频轨道。 Cycle through the available audio tracks. E 循环浏览可用的版本。 Cycle through the available Editions. f 切换全屏（另请参阅\u0026ndash;fs）。 Toggle fullscreen (see also \u0026ndash;fs). ESC 退出全屏模式。 Exit fullscreen mode. T 切换置顶（另请参阅\u0026ndash;ontop）。 Toggle stay-on-top (see also \u0026ndash;ontop). w and W 减小/增大平移和扫描范围。当前 e 键目前执行相同操作，但不建议使用。 Decrease/increase pan-and-scan range. The e key does the same as W currently, but use is discouraged. o and P 在 OSD 上显示进度条、已用时间和总持续时间。 Show progression bar, elapsed time and total duration on the OSD. O 在 OSD 状态之间切换正常和播放时间/持续时间。 Toggle OSD states between normal and playback time/duration. v 切换字幕可见性。 Toggle subtitle visibility. j and J 循环浏览可用的字幕。 Cycle through the available subtitles. z and Z 通过+/- 0.1 秒调整字幕延迟。当前 x 键执行相同操作，但不建议使用。 Adjust subtitle delay by +/- 0.1 seconds. The x key does the same as Z currently, but use is discouraged. l 设置/清除 A-B 循环点。有关详细信息，请参阅 ab-loop 命令。 Set/clear A-B loop points. See ab-loop command for details. L 切换无限循环。 Toggle infinite looping. Ctrl++ and Ctrl+- 通过+/- 0.1 秒调整音频延迟（A/V 同步）。 Adjust audio delay (A/V sync) by +/- 0.1 seconds. Shift+g and Shift+f 通过+/- 10%调整字幕字体大小。 Adjust subtitle font size by +/- 10%. u 在 SSA/ASS 字幕中切换仅应用\u0026ndash;sub-ass-*覆盖（默认）和几乎完全覆盖它们的常规字幕样式。有关更多信息，请参阅\u0026ndash;sub-ass-override。 Switch between applying only \u0026ndash;sub-ass-* overrides (default) to SSA/ASS subtitles, and overriding them almost completely with the normal subtitle style. See \u0026ndash;sub-ass-override for more info. V 切换字幕 VSFilter 纵横比兼容模式。有关更多信息，请参阅\u0026ndash;sub-ass-vsfilter-aspect-compat。 Toggle subtitle VSFilter aspect compatibility mode. See \u0026ndash;sub-ass-vsfilter-aspect-compat for more info. r and R 上/下移动字幕。当前 t 键执行相同操作，但不建议使用。 Move subtitles up/down. The t key does the same as R currently, but use is discouraged. s 拍摄截图。 Take a screenshot. S 拍摄截图，不带字幕。（这取决于 VO 驱动程序支持与否。） Take a screenshot, without subtitles. (Whether this works depends on VO driver support.) Ctrl+s 拍摄截图，如窗口显示（带字幕、OSD 和缩放视频）。 Take a screenshot, as the window shows it (with subtitles, OSD, and scaled video). PGUP and PGDWN 跳转到上一个/下一个章节的开始。在大多数情况下，“上一个”实际上将会到达当前章节的开始；请参阅\u0026ndash;chapter-seek-threshold。 Seek to the beginning of the previous/next chapter. In most cases, \u0026ldquo;previous\u0026rdquo; will actually go to the beginning of the current chapter; see \u0026ndash;chapter-seek-threshold. Shift+PGUP and Shift+PGDWN 向后或向前跳转 10 分钟。（这曾经映射到不带 Shift 的 PGUP/PGDWN。） Seek backward or forward by 10 minutes. (This used to be mapped to PGUP/PGDWN without Shift.) d 激活/停用去隔行。 Activate/deactivate deinterlacer. A 循环切换宽高比覆盖。 Cycle aspect ratio override. Ctrl+h 切换硬件视频解码开/关。 Toggle hardware video decoding on/off. Alt+LEFT, Alt+RIGHT, Alt+UP, Alt+DOWN 移动视频矩形（平移）。 Move the video rectangle (panning). Alt++ and Alt+- 将 Alt 与+或-键组合可更改视频缩放。 Combining Alt with the + or - keys changes video zoom. Alt+BACKSPACE 重置平移/缩放设置。 Reset the pan/zoom settings. F8 显示播放列表和其中的当前位置（仅在使用 UI 窗口时有用，在终端上损坏）。 Show the playlist and the current position in it (useful only if a UI window is used, broken on the terminal). F9 显示音频和字幕流列表（仅在使用 UI 窗口时有用，在终端上损坏）。 Show the list of audio and subtitle streams (useful only if a UI window is used, broken on the terminal). i and I 显示/切换显示有关当前播放文件的统计信息的叠加层，例如编解码器、帧速率、丢帧数等。有关更多信息，请参阅 STATS。 Show/toggle an overlay displaying statistics about the currently playing file such as codec, framerate, number of dropped frames and so on. See STATS for more information. DEL 在 OSC 之间循环显示可见性：从不/自动（鼠标移动）/始终 Cycle OSC visibility between never / auto (mouse-move) / always ` 显示控制台。（ESC 关闭它。有关 CONSOLE 的详细信息，请参阅 CONSOLE。） Show the console. (ESC closes it again. See CONSOLE.) 1 and 2 调整对比度。 Adjust contrast. 3 and 4 调整亮度。 Adjust brightness. 5 and 6 调整伽马值。 Adjust gamma. 7 and 8 调整饱和度。 Adjust saturation. Alt+0 (and Command+0 on macOS) 将视频窗口调整为原始大小的一半。 Resize video window to half its original size. Alt+1 (and Command+1 on macOS) 将视频窗口调整为其原始大小。 Resize video window to its original size. Alt+2 (and Command+2 on macOS) 将视频窗口调整为其原始大小的两倍。 Resize video window to double its original size. Command + f (macOS only) 切换全屏（另请参阅\u0026ndash;fs）。 Toggle fullscreen (see also \u0026ndash;fs). PAUSE 暂停。 Pause. STOP 停止播放并退出。 Stop playing and quit. PREVIOUS and NEXT 向后/向前跳转 1 分钟。 Seek backward/forward 1 minute. ZOOMIN and ZOOMOUT 更改视频缩放。 Changes video zoom. ","date":"2023-12-07T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2312007/","title":"MPV播放器入门指南-第一期：带你走进命令行播放器的世界"},{"content":"Windows下默认安装的环境在 家目录\\.conda\\envs我想把它换到安装目录去\n先备份环境信息，进入激活的环境\n1 conda env export \u0026gt; environment.yaml 修改 environment.yaml\n1 prefix: D:\\develop\\miniconda3\\envs\\common 恢复\n1 conda env create -f environment.yaml 一劳永逸： 新建 家目录\\.condarc 把 安装目录下的 envs 加入进去 ，并放在前面\n1 2 3 4 envs_dirs: - D:\\develop\\miniconda3\\envs - C:\\Users\\taoone\\.conda\\envs - C:\\Users\\taoone\\AppData\\Local\\conda\\conda\\envs 使用 conda info 查看\n","date":"2023-12-06T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2312006/","title":"Minconda迁移已经存在的环境"},{"content":"简介 请查看官网：https://flutter.dev/\n安装 提示\n推荐 FVM 版本管理工具安装 Flutter\nFVM，Flutter 的多版本管理工具](https://blog.seektao.cc/p/2403003)\nLinux 官方教程：https://docs.flutter.cn/get-started/install/linux\n配置 查看 Flutter 配置情况\n1 2 flutter doctor -v # 简略显示：flutter doctor - 配置 android-sdk\n1 flutter config --android-sdk=\u0026#34;D:\\develop\\android\\sdk\u0026#34; 配置 jdk-dir\n1 flutter config --jdk-dir=\u0026#34;D:\\develop\\Java\\jdk-17\u0026#34; 全绿即是 ok，如图：\n配置镜像源 清华源 帮助文档：https://mirror.tuna.tsinghua.edu.cn/help/flutter/\n长期使用 TUNA 镜像：\n1 2 echo \u0026#39;export FLUTTER_STORAGE_BASE_URL=\u0026#34;https://mirrors.tuna.tsinghua.edu.cn/flutter\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc echo \u0026#39;export PUB_HOSTED_URL=\u0026#34;https://mirrors.tuna.tsinghua.edu.cn/dart-pub\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.bashrc 在编译 android 项目时，flutter 还会从 https://storage.googleapis.com/download.flutter.io 下载 Java 程序库，您可以在 Android 项目目录下的 build.gradle 中添加下面一行下载源，从而使用 TUNA 镜像。\n1 2 3 4 5 6 7 allprojects { repositories { google() jcenter() maven { url \u0026#39;https://mirrors.tuna.tsinghua.edu.cn/flutter/download.flutter.io\u0026#39; } } } Flutter SDK 的更新会从 Github 获取，如您的开发设备访问 Github 速度慢，可以在 开发设备的 Flutter SDK 目录 运行下面的命令，将 Git 上游设置为 TUNA 镜像：\n1 git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/flutter-sdk.git ","date":"2023-12-05T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2312005/","title":"Flutter安装配置"},{"content":"在Debian系统上清理无用的软件包和残留文件，您可以执行以下步骤：\n清理无用的软件包：使用apt包管理器清理无用的软件包。运行以下命令以更新软件包列表并删除不再需要的软件包：\n1 2 sudo apt update sudo apt autoremove apt autoremove命令将自动删除已经不再需要的软件包及其依赖项。\n清理残留的配置文件：有时，卸载软件包后会保留一些残留的配置文件。您可以使用以下命令清理这些文件：\n1 sudo dpkg --purge $(dpkg -l | grep \u0026#39;^rc\u0026#39; | awk \u0026#39;{print $2}\u0026#39;) 这将删除所有已经标记为\u0026quot;rc\u0026quot;（已删除但仍保留配置文件）的软件包。\n清理临时文件和缓存：您可以使用以下命令清理系统中的临时文件和包管理器缓存：\n1 2 sudo apt clean sudo apt autoclean apt clean命令将清理已下载的软件包文件，而apt autoclean命令将清理过期的软件包缓存。\n通过执行上述步骤，您可以清理Debian系统中的无用软件包和残留文件，从而释放磁盘空间并保持系统整洁。请注意，在执行命令之前，确保您具有足够的权限以使用sudo来执行它们。\n","date":"2023-12-03T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2312003/","title":"Debian清理无用的软件包和残留文件"},{"content":"最小化安装配置，\n如果安装图形化，可能是 NetworkManager，这部分不适用\n查看网络接口的名字\n1 ip a 编辑配置文件\n1 sudo vim /etc/network/interfaces 静态ip\n1 2 3 4 5 6 auto ens33 iface ens33 inet static address 192.168.10.12 netmask 255.255.255.0 gateway 192.168.10.2 dns-nameservers 8.8.8.8 8.8.4.4 auto ens33：开机自动启动接口 动态ip\n1 2 auto enp0s3 iface enp0s3 inet dhcp 重启网络服务\n1 sudo systemctl restart networking ","date":"2023-12-02T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2312002/","title":"Debian12设置静态ip"},{"content":"打开 Firefox ，在地址栏搜索 about:config\n1 about:config 同意风险。\n搜索 layout.css.devPixelsPerPx\n1 layout.css.devPixelsPerPx 修改值，默认值为 -1，代表不修改。\n我们可以先改为 1，观看效果，如果过大，改为 0.9，依次类推，根据自己情况修改为合适的\n额外的，如果图标和字体过小，就把值 调大一点，直到合适自己\n","date":"2023-11-20T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2311020/","title":"解决Firefox在高分辨率显示器下图标和字体显示过大"},{"content":"curl test.ipw.cn\n","date":"2023-11-19T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2311019/","title":"测试ipv6"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 a|b\t匹配 a 或 b gr(a|e)y\t匹配 gray 或 grey .\t匹配任一字符 [abc]\t匹配任一字符: a 或 b 或 c [^abc]\t匹配任一字符, 但不包括 a, b, c [a-z]\t匹配从 a 到 z 之间的任一字符 [a-zA-Z]\t匹配从 a 到 z, 及从 A 到 Z 之间的任一字符 ^\t匹配文件名的头部 $\t匹配文件名的尾部 ( )\t匹配标记的子表达式 \\n\t匹配第 nth 个标记的子表达式, nth 代表 1 到 9 \\b\t匹配字词边界 *\t匹配前一项内容 0 或多次 ?\t匹配前一项内容 0 或 1 次 +\t匹配前一项内容 1 或多次 *?\t匹配前一项内容 0 或多次 (懒人模式) +?\t匹配前一项内容 1 或多次 (懒人模式) {x}\t匹配前一项内容 x 次 {x,}\t匹配前一项内容 x 或多次 {x,y}\t匹配前一项内容次数介于 x 和 y 之间 \\\t特殊转义字符 ","date":"2023-11-18T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2311018/","title":"正则表示式语法"},{"content":"打开 C:\\ProgramData\\Microsoft\\Windows Defender\\Scans\\History，然后删除里面的一个叫 “Service” 的文件夹。\n","date":"2023-11-17T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2311017/","title":"删除windows的defender误报"},{"content":"win+s 搜索cmd，使用管理员打开，依此执行以下的命令\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 这一步耐心等待 for %i in (%windir%\\system32\\*.dll) do regsvr32.exe /s %i for %i in (%windir%\\system32\\*.ocx) do regsvr32.exe /s %i 执行完毕后重启设备，继续执行下方命令： Dism /Online /Cleanup-Image /ScanHealth Dism /Online /Cleanup-Image /CheckHealth 这一步可能会卡住62.3%，等待太久就关掉它，重新执行，直到成功 DISM /Online /Cleanup-image /RestoreHealth 前面没有问题，到这一步结束后会显示修复成功的信息，执行完重启 sfc /SCANNOW ","date":"2023-11-15T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2311015/","title":"修复Windows的Defender脱机版扫描点击无反应"},{"content":"快捷方式 ZoomIt 提供了许多快捷方式，可以大大扩展其用法。\n函数 快捷键 缩放模式 Ctrl + 1 放大 鼠标向上或向上滚动箭头 缩小 鼠标向下滚动或向下键 在缩放模式下启动绘图 () Left-Click 在缩放模式下停止绘图 () Right-Click 在缩放模式下不处于缩放) 模式时开始绘制 ( Ctrl + 2 (绘图模式) 增加/减少线条和光标大小 Ctrl + 鼠标向上/向下或箭头键 将光标居中 (绘图模式) 空格键 白板 (绘图模式) W 黑板 (绘图模式) K 键入文本 (左对齐) T 键入文本 (右对齐) Shift + T 增加/减小字体大小 (键入模式 Ctrl + 鼠标向上/向下或箭头键 红色笔 R 绿色笔 G 蓝色笔 B 黄色笔 Y 橙色笔 O 粉色笔 P 绘制直线 按住 Shift 绘制矩形 按住 Ctrl 绘制省略号 “按住”选项卡 绘制箭头 按住 Ctrl + Shift 擦除最后一个绘图 Ctrl+Z 擦除所有绘图 E 将屏幕截图复制到剪贴板 Ctrl + C 将屏幕截图另存为 PNG Ctrl+S “开始/停止”屏幕录制保存为 MP4 (Windows 10 2019 年 5 月更新 及更高) Ctrl + 5 显示倒计时计时器 Ctrl + 3 增加/减少时间 Ctrl + 鼠标向上/向下或箭头键 最小化计时器 (而不暂停计时器) Alt + Tab 最小化时显示计时器 缩放图标上的Left-Click 实时缩放模式 Ctrl + 4 退出 Esc 或 Right-Click ","date":"2023-11-14T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2311014/","title":"zoomit快捷键"},{"content":" 1 net user administrator /active:yes ","date":"2023-11-13T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2311013/","title":"Windows启用Administrator"},{"content":"简介 AList 是一款易于安装且支持多平台的文件管理工具，可以挂载多种存储并提供多种实用功能。它支持 WebDAV、黑暗模式、文件预览、打包下载等，还提供保险箱加密和更多高级功能。\n🗂️ 一个支持多种存储的文件列表程序，使用 Gin 和 Solidjs。\n官方文档：https://alist.nn.ci/zh/guide\n安装 下载地址： https://github.com/alist-org/alist/releases/\n点击下载 v3.29.1 下载的文件解压到一个目录，最好先手动创建一个文件夹，比如\n1 D:\\remote\\alist\\alist.exe 运行 启动服务，在地址栏输入 cmd 快速进入当前目录，输入\n1 alist.exe server 就会在当前目录下生成 data 文件夹。包含了程序的数据。\n打开浏览器：localhost:5244 即可访问，终端出现了随机密码，但是默认密码太麻烦了，建议直接重置密码。\n回到 alist 所在目录，看到 第一次运行的时候生成的 data 文件夹，这个是存放数据的文件夹。\n生成（重置）密码：回到 alist.exe所在目录，重新打开一个 cmd 窗口\n1 2 3 4 5 # 指定密码 alist.exe admin set 你的密码 --data .\\data # 随机生成密码 alist.exe admin random --data .\\data --data 表示指定数据目录。不指定可能会报错 如果出现了如下报错，表示修改密码没有生效，报错如下：\n1 ERRO[2023-11-29 17:42:49] [del_user_cache_online] error: that\u0026#39;s not even a token 回到浏览器：输入：localhost:5244 即可使用 alist 了。\n现在我们使用的是默认端口，由于我的电脑上 小白羊盘 内置了 alist 占用了 5244 端口，所以在运行 alist 的时候可以把 端口修改，进入 data，可以看到有个 config.json的文件，里面就包含了端口的信息。\n文件所在的路径：D:\\remote\\alist\\data\\config.json 打开 config.json，修改以下的值 修改 \u0026ldquo;http_port\u0026rdquo;: 5244, 为 \u0026ldquo;http_port\u0026rdquo;: 5245, 重新启动服务，指定数据所在的目录\n1 alist.exe server --data=.\\data 现在打开浏览器：输入 localhost:5245 即可打开 alist\n系统服务 还有一个问题，启动成功了，但是每次需要手动运行有点麻烦，最好的办法就是创建系统服务，让它开机自启。借助 NSSM 创建系统服务。\n下载 nssm： 点击下载\n将 nssm 解压之后，将所在的路径（比如 D:\\tool\\nssm\\win64）添加到系统环境变量，确保可随处执行 nssm。\n创建 alist 自启动 服务，使用管理员运行 cmd：\n1 nssm install alist \u0026#34;D:\\remote\\alist\\alist.exe\u0026#34; \u0026#34;server\u0026#34; \u0026#34;--data\u0026#34; \u0026#34;D:\\remote\\alist\\data\u0026#34; 停止之前运行中的 alist，使用 系统服务运行。\n启动服务\n1 nssm start alist 停止服务\n1 nssm stop alist 重启服务\n1 nssm restart alist 移除服务（先要停止）\n1 nssm remove alist ps：最后：windows 上创建系统服务真的好麻烦，这个系统服务我搞了好久才解决，要么就是 “” 不能加，还用过 sc 创建，也不行。各种问题，还是 linux 方便。\n错误记录：\n1 2 3 4 5 6 7 nssm install alist \u0026#34;D:\\Program Files\\alist\\alist.exe\u0026#34; server --data=\u0026#34;D:\\Program Files\\alist\\data\u0026#34; nssm install alist \u0026#34;D:\\Program Files\\alist\\alist.exe\u0026#34; server --data=\u0026#34;D:\\Program Files\\alist\\data\u0026#34; sc create alist binPath= \u0026#34;D:\\Program Files\\alist\\alist.exe server --data=\\\u0026#34;D:\\Program Files\\alist\\data\\\u0026#34;\u0026#34; ...... 附录 关于 帮助命令\nalist\n1 2 3 alist -h alist admin -h nssm\n1 nssm -h ","date":"2023-11-12T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2311012/","title":"alist，Windows平台安装，并配置系统服务实现开机自启动"},{"content":"简介 AList 是一款易于安装且支持多平台的文件管理工具，可以挂载多种存储并提供多种实用功能。它支持 WebDAV、黑暗模式、文件预览、打包下载等，还提供保险箱加密和更多高级功能。\n🗂️ 一个支持多种存储的文件列表程序，使用 Gin 和 Solidjs。\n官方文档：https://alist.nn.ci/zh/guide\n安装 下载地址： https://github.com/alist-org/alist/releases/\n点击下载 v3.29.1\n下载的文件解压到一个目录，最好先手动创建一个文件夹，比如\n1 D:\\remote\\alist\\alist.exe 运行 启动服务，在地址栏输入 cmd 快速进入当前目录，输入\n1 alist.exe server 就会在当前目录下生成 data 文件夹。包含了程序的数据。\n打开浏览器：localhost:5244 即可访问，终端出现了随机密码，但是默认密码太麻烦了，建议直接重置密码。\n回到 alist 所在目录，看到 第一次运行的时候生成的 data 文件夹，这个是存放数据的文件夹。\n生成（重置）密码：回到 alist.exe所在目录，重新打开一个 cmd 窗口\n1 2 3 4 5 # 指定密码 alist.exe admin set 你的密码 --data .\\data # 随机生成密码 alist.exe admin random --data .\\data --data 表示指定数据目录。不指定可能会报错 如果出现了如下报错，表示修改密码没有生效，报错如下：\n1 ERRO[2023-11-29 17:42:49] [del_user_cache_online] error: that\u0026#39;s not even a token 回到浏览器：输入：localhost:5244 即可使用 alist 了。\n现在我们使用的是默认端口，由于我的电脑上 小白羊盘 内置了 alist 占用了 5244 端口，所以在运行 alist 的时候可以把 端口修改，进入 data，可以看到有个 config.json的文件，里面就包含了端口的信息。\n文件所在的路径：D:\\remote\\alist\\data\\config.json 打开 config.json，修改以下的值 修改 \u0026ldquo;http_port\u0026rdquo;: 5244, 为 \u0026ldquo;http_port\u0026rdquo;: 5245, 重新启动服务，指定数据所在的目录\n1 alist.exe server --data=.\\data 现在打开浏览器：输入 localhost:5245 即可打开 alist\n系统服务 还有一个问题，启动成功了，但是每次需要手动运行有点麻烦，最好的办法就是创建系统服务，让它开机自启。借助 NSSM 创建系统服务。\n下载 nssm： 点击下载\n将 nssm 解压之后，将所在的路径（比如 D:\\remote\\nssm\\win64）添加到系统环境变量，确保可随处执行 nssm。\n创建 alist 自启动 服务，使用管理员运行 cmd：\n1 nssm install alist \u0026#34;D:\\remote\\alist\\alist.exe\u0026#34; \u0026#34;server\u0026#34; \u0026#34;--data\u0026#34; \u0026#34;D:\\remote\\alist\\data\u0026#34; 停止之前运行中的 alist，使用 系统服务运行。\n启动服务\n1 nssm start alist 停止服务\n1 nssm stop alist 重启服务\n1 nssm restart alist 移除服务（先要停止）\n1 nssm remove alist 附录 关于 帮助命令\nalist\n1 2 3 alist -h alist admin -h nssm\n1 nssm -h ","date":"2023-11-12T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2311012/","title":"Windows下安装Alist，并安装系统服务自启动"},{"content":"win10系统Windows 沙盒无法启动0x80070005错误解决方法 1、在开始菜单中搜索cmd ，以管理员身份运行【命令提示符】；\n2、请您启动管理员模式的命令提示符，依次输入以下命令并回车 Dism /Online /Cleanup-Image /ScanHealth Dism /Online /Cleanup-Image /CheckHealth DISM /Online /Cleanup-image /RestoreHealth 运行管理员身份的命令提示符并执行以下命令（重置组策略） RD /S /Q \u0026ldquo;%WinDir%\\System32\\GroupPolicyUsers\u0026rdquo; 回车 RD /S /Q \u0026ldquo;%WinDir%\\System32\\GroupPolicy\u0026rdquo; 回车 gpupdate /force 回车 重新启动计算机后即可正常运行沙盒！\n","date":"2023-11-11T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2311011/","title":"Windows10沙盒无法运行解决办法参考"},{"content":" 系统：Debian12 显示服务器：Wayland\n关于waydroid的安装本篇不再介绍，至于如何安装可以观看 官网教程也可以查看 Linux 下安装使用 Waydrioid\n今天的主角是： waydroid_script\n描述： Python Script to add OpenGapps, Magisk, libhoudini translation library and libndk translation library to waydroid !\n我们将通过这个脚本安装 libhoudini translation library，用来在x86_64上支持arm，\n安装 waydroid_script 1、 克隆项目\n1 git clone https://github.com/casualsnek/waydroid_script 进入克隆的目录\n1 cd waydroid_script 2、新建虚拟环境或者使用已有环境，请根据自己情况在以下方案自选其一\n（1）新建虚拟环境安装依赖\n1 2 3 4 5 # 新建虚拟环境 python3 -m venv venv # 安装依赖 venv/bin/pip install -r requirements.txt （2）使用其他方式管理环境，安装依赖\n本地的环境我通过minconda管理，所以不采用上述新建虚拟环境方式\n1 2 3 4 5 6 7 8 9 # 新建环境 conda create -n waydroid python=3.10 conda activate waydroid # 确认当前所处的环境,*开头的为激活的环境 conda info -e # 安装依赖 pip install -r requirements.txt 安装模块（root权限） 安装所需要的模块只需要选择 {} 后面内容\n1 sudo venv/bin/python3 main.py install {gapps, magisk, libndk, libhoudini, nodataperm, smartdock, microg, mitm} 因为我的 minconda使用普通用户安装，加上 sudo 需要使用绝对路径\n1 2 3 4 5 # 查看 python3 的位置，确保当前的环境是 之前创建的 waydroid which python3 # 结果如下 /home/taoone/opt/miniconda3/envs/waydroid/bin/python3 安装 libhoudini 只需要请将路径替换为自己的\n1 sudo /home/taoone/opt/miniconda3/envs/waydroid/bin/python3 main.py install libhoudini 卸载\n1 sudo /home/taoone/opt/miniconda3/envs/waydroid/bin/python3 main.py uninstall libhoudini 额外的，作者还提到在 AMD上 libndk 表现比 libhoudini更好，我的机器是 AMD的，我先安装的是它，但是经我测试好像有些问题。所以又换回了 libhoudini，故还是推荐 libhoudini。\n以下为 安装 libndk\n1 sudo /home/taoone/opt/miniconda3/envs/waydroid/bin/python3 main.py install libndk 卸载\n1 sudo /home/taoone/opt/miniconda3/envs/waydroid/bin/python3 main.py uninstall libndk 安装模块后需要重启 waydroid-controller\n1 systemctl restart waydroid-container.service 测试 下载一个 arm架构的app，看看是否能运行，比如就以微信为例。\n1 2 3 4 5 6 7 8 9 10 11 12 # 下载微信跳过， # 启动 waydroid waydroid session start # 进程阻塞，新开终端安装微信 waydroid app install weixin8043android2480_0x28002b38_arm64_1.apk # 除了手动下载weixin apk,当然也可以打开google play搜索wechat进行安装 # 打开界面查看微信是否安装成功 waydroid show-full-ui 打开微信的方式：主界面上拉打开应用盒子，应该是可以WeChat图标的，点击即可\n","date":"2023-11-10T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2311010/","title":"Waydroid：在x86_64上运行arm架构的app"},{"content":"有时候下载的文件想要比对官方给出的 SHA256 值比较麻烦，这个脚本可以快速判断文件是否被篡改\n1 mkdir ~/bin \u0026amp;\u0026amp; vim sha256_compare.sh 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #!/bin/bash script_name=$(basename \u0026#34;$0\u0026#34;) # 帮助函数 show_help() { echo \u0026#34;用法: $script_name \u0026lt;下载文件\u0026gt; \u0026lt;期望的SHA256哈希值\u0026gt;\u0026#34; echo \u0026#34;比较给定文件的SHA256哈希值和期望的哈希值，判断文件是否被篡改。\u0026#34; } # 参数验证 if [ \u0026#34;$1\u0026#34; = \u0026#34;-h\u0026#34; ]; then show_help exit 0 fi if [ $# -ne 2 ]; then echo \u0026#34;错误：需要提供两个参数。\u0026#34; show_help exit 1 fi # 获取文件路径和给定的 SHA256 值 downloaded_file=$1 expected_hash=$2 # 检查文件是否存在 if [ ! -f \u0026#34;$downloaded_file\u0026#34; ]; then echo \u0026#34;错误：文件 \u0026#39;$downloaded_file\u0026#39; 不存在。\u0026#34; exit 1 fi # 计算下载文件的 SHA256 值 calculated_hash=$(sha256sum \u0026#34;$downloaded_file\u0026#34; | awk \u0026#39;{print $1}\u0026#39;) # 比对计算得到的哈希值和给定的哈希值 if [ \u0026#34;$calculated_hash\u0026#34; = \u0026#34;$expected_hash\u0026#34; ]; then echo \u0026#34;哈希值匹配，文件未被篡改。\u0026#34; else echo \u0026#34;哈希值不匹配，文件可能已被篡改。\u0026#34; fi 1 chmod +x sha256_compare.sh 1 export PATH=\u0026#34;$HOME/bin:$PATH\u0026#34; \u0026gt;\u0026gt; ~/.bash_profile 1 source ~/.bash_profile 脚本的用法为\n1 sha256_compare.sh \u0026lt;文件\u0026gt; \u0026lt;文件的哈希值\u0026gt; 1 2 # 查看帮助信息 sha256_compare.sh -h ","date":"2023-11-08T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2311008/","title":"Shell脚本：快速比对文件的SHA256哈希值，判断文件是否被篡改"},{"content":"最近学习Flink用来测试socket处理数据，打开虚拟机使用linux发送未免太过麻烦，但是windows上的netcat安装解压后报毒，安全起见，我就还是卸载了，后来看到有说Namp下的ncat可以替代netcat 用于发送消息，那我就去下载了试试，发现确实可以替代。\nNmap下载地址：https://nmap.org/ncat/\n解压之后添加到环境变量，确保可以随处执行，netcat发送消息的命令为 nc，Nmap为ncat， 详细点为\nnetcat，-lk表示一直占用着，7777是端口\n1 nc -lk 7777 换成Nmap\n1 ncat -lk 7777 测试环节\n使用Flink测试，这段程序会检测 7777 端口的信息，这段代码是用于词频统计\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 package cc.seektao.wc; import org.apache.flink.api.common.typeinfo.Types; import org.apache.flink.api.java.tuple.Tuple2; import org.apache.flink.streaming.api.datastream.DataStreamSource; import org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator; import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment; import org.apache.flink.util.Collector; public class WordCountStreamSocket { public static void main(String[] args) throws Exception { // 1. 准备环境 StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment(); // 2. 读取数据 DataStreamSource\u0026lt;String\u0026gt; socketDS = env.socketTextStream(\u0026#34;localhost\u0026#34;, 7777); // 3. 处理数据: 切分、转换、聚合、 SingleOutputStreamOperator\u0026lt;Tuple2\u0026lt;String, Integer\u0026gt;\u0026gt; sum = socketDS .flatMap( (String line, Collector\u0026lt;Tuple2\u0026lt;String, Integer\u0026gt;\u0026gt; collector) -\u0026gt; { String[] words = line.split(\u0026#34; \u0026#34;); for (String word : words) { // 采集器采集数据发送到下游 collector.collect(new Tuple2\u0026lt;\u0026gt;(word, 1)); } }) .returns(Types.TUPLE(Types.STRING, Types.INT)) // landbda 表达式有类型擦除，需要手动指定泛型的参数类型 .keyBy(word -\u0026gt; word.f0) .sum(1); // 4. 输出 sum.print(); // 5. 启动 env.execute(); } } 运行Flink程序，程序会监听 7777 端口的信息\n新开windows终端，输入\n1 ncat -lk 7777 这时会阻塞，输入信息，比如\n1 2 3 hello flink hello spark hello world 程序就会显示统计信息\n1 2 3 4 5 6 3\u0026gt; (hello,1) 7\u0026gt; (flink,1) 1\u0026gt; (spark,1) 3\u0026gt; (hello,2) 5\u0026gt; (world,1) 3\u0026gt; (hello,3) ","date":"2023-11-07T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2311007/","title":"Ncat替代netcat"},{"content":" 系统：Debian12 显示服务器：Wayland\n概述 Waydroid 是一个基于容器的，能在常规 GNU/Linux 启动完整的 Android 系统的方法。\n官网：https://waydro.id/ 文档：https://docs.waydro.id/\n快速上手 本次将快速安装 Waydroid ，关于更多的细节，请查看官网说明。\n需要注意的是，图形平台需要为 Wayland。\n下载安装 本次使用的是 Amd架构的 Debian12，图形平台 Wayland 等等满足安装需求。\n1 2 3 4 5 6 7 8 # Install pre-requisites sudo apt install curl ca-certificates -y # Add the official repository curl https://repo.waydro.id | sudo bash # Install waydroid sudo apt install waydroid -y 其他平台请查看：https://docs.waydro.id/usage/install-on-desktops\n快速上手 安装 Waydroid 软件包，这一步需要保持“良好的”网络环境，\n1 2 # 使用 google框架支持的 Android 镜像， sudo waydroid init -s GAPPS -f 启用 waydroid-container.service\n1 sudo systemctl enable --now waydroid-container 启动/关闭 会话\n1 2 3 4 5 # 启动 waydroid session start # 关闭 waydroid session stop 启动 GUI\n1 waydroid show-full-ui 安装应用\n1 waydroid app install xxx.apk ","date":"2023-11-05T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2311005/","title":"Linux下的安卓模拟器Waydrioid使用"},{"content":"Grub2 是Linux众多发行版默认引导器，有必要对它简单了解一下。\n比如：\n默认界面还是太丑，可以换个主题 修改启动等待时间 先简单了解 Grub 配置文件\n路径：/etc/default/grub GRUB_TIMEOUT： 启动等待时间，默认 5 s GRUB_THEME：主题位置 GRUB_BACKGROUND：背景 修改完配置，需要更新 Grub 配置\n1 sudo update-grub 修改默认启动时间 现在我的系统只剩下 Debian12 了，默认启动的 5s 等待时间我觉得有点影响使用体验，所以打算关闭它，把 GRUB_TIMEOUT 的值改为 1\n1 2 3 4 5 6 7 sudo vim /etc/default/grub # 把 GRUB_TIMEOUT 修改为 1 GRUB_TIMEOUT=1 # (可选)在等待时间结束后自动启动默认操作系统，而不显示菜单 # GRUB_TIMEOUT_STYLE=hidden 1 2 # 更新配置 sudo update-grub 主题 grub主题商店：https://store.kde.org/browse?cat=109\u0026amp;ord=latest\ngrub2-themes 源码：https://github.com/vinceliuice/grub2-themes\n安装\n1 2 git clone --depth 1 https://github.com/vinceliuice/grub2-themes.git cd grub2-themes/ 1 sudo ./install.sh -t vimix -s 2k -b ","date":"2023-11-04T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2311004/","title":"Grub2简单使用"},{"content":"Debian 前置条件 Debian Bookworm 12 (stable) Debian Bullseye 11 (oldstable) 卸载旧版本 1 for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done 设置存储库 官方地址 1 2 3 4 5 6 7 8 9 10 11 12 13 # Add Docker\u0026#39;s official GPG key: sudo apt-get update sudo apt-get install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc # Add the repository to Apt sources: echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \\ $(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;) stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update 清华地址 1 2 3 4 5 6 7 8 sudo install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo chmod a+r /etc/apt/keyrings/docker.gpg echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian \\ \u0026#34;$(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;)\u0026#34; stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update 安装 1 2 sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin Ubuntu 前置条件 Ubuntu Noble 24.04 (LTS) Ubuntu Mantic 23.10 (EOL: July 12, 2024) Ubuntu Jammy 22.04 (LTS) Ubuntu Focal 20.04 (LTS) 卸载旧版本 1 for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done 设置存储库 官方地址 1 2 3 4 5 6 7 8 9 10 11 12 13 # Add Docker\u0026#39;s official GPG key: sudo apt-get update sudo apt-get install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc # Add the repository to Apt sources: echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\ $(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;) stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update 清华地址 1 2 3 4 5 6 7 8 sudo install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo chmod a+r /etc/apt/keyrings/docker.gpg echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian \\ \u0026#34;$(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;)\u0026#34; stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update 安装 1 2 sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin Windows 使用 Windows 安装 docker desktop 下载 docker desktop 即可\n如果下载速度慢，可以使用我分享的网络链接：\nhttps://www.123684.com/s/4MOKVv-P02pd?提取码:love\nhttps://www.123865.com/s/4MOKVv-P02pd?提取码:love\n直接在 WSL 中安装 安装之前，下载你安装的 wsl 版本对应 docker 文件，比如我安装的系统是 debain 12\n为什么下载 dcoker 安装文件安装,？因为 wsl 不是一个完整的系统，没有 systemctl ，无法使用 apt 安装，所以需要手动下载文件安装\n注意下载 docker 组件之间的版本适配，如何确定下载不同的版本呢，这里有个小技巧，\n","date":"2023-11-03T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2311003/","title":"Docker安装"},{"content":"1. 安装语言包 首先我们需要安装locales这个软件包：\nsudo apt install locales\n2. 配置语言环境 执行下列命令配置语言环境：\n1 sudo dpkg-reconfigure locales 空格选中，回车确定\n","date":"2023-11-02T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2311002/","title":"Debian配置系统中文语言及环境"},{"content":" 1 2 3 4 5 6 7 8 sudo dpkg-reconfigure locales # 勾选上，回车下一步 en_US.UTF-8 zh_CN.UTF-8 # 生效 sudo update-locale ","date":"2023-11-01T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2311001/","title":"Debian11配置Locales"},{"content":"概述 本文档包含了各个常用镜像服务及对应镜像站\n各个镜像源的帮助文档：\n清华：https://mirror.tuna.tsinghua.edu.cn/help 阿里云：https://developer.aliyun.com/mirror/ 中科大：https://mirrors.ustc.edu.cn/help/ 华为云：https://mirrors.huaweicloud.com/home\n系统软件源 Debian 查看系统发行版本\n1 cat /etc/issue 清华 Debian12：\n1 2 3 4 5 6 7 8 9 10 11 12 13 # 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释 deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware # 以下安全更新软件源包含了官方源与镜像站配置，如有需要可自行修改注释切换 deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware 一键脚本\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cat \u0026lt;\u0026lt; EOF | sudo tee /etc/apt/sources.list \u0026gt; /dev/null # 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释 deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware # 以下安全更新软件源包含了官方源与镜像站配置，如有需要可自行修改注释切换 deb https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware # deb-src https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware EOF Debain10：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释 deb http://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free # deb-src http://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free deb http://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free # deb-src http://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free deb http://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free # deb-src http://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free # deb http://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free # # deb-src http://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free deb http://security.debian.org/debian-security buster/updates main contrib non-free # deb-src http://security.debian.org/debian-security buster/updates main contrib non-free Ubuntu 查看系统发行版本\n1 cat /etc/issue 清华 Ubuntu 24.04：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 cat \u0026lt;\u0026lt; EOF | sudo tee /etc/apt/sources.list \u0026gt; /dev/null # 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释 deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-updates main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-backports main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-backports main restricted universe multiverse # 以下安全更新软件源包含了官方源与镜像站配置，如有需要可自行修改注释切换 deb http://security.ubuntu.com/ubuntu/ noble-security main restricted universe multiverse # deb-src http://security.ubuntu.com/ubuntu/ noble-security main restricted universe multiverse # 预发布软件源，不建议启用 # deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-proposed main restricted universe multiverse # # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-proposed main restricted universe multiverse EOF PyPI 清华 临时使用\n1 pip install -i https://pypi.tuna.tsinghua.edu.cn/simple package_name 设为默认\n1 2 python -m pip install --upgrade pip pip config set global.index-url https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple 阿里 公网配置方法：\n找到下列文件 1 ~/.pip/pip.conf 在上述文件中添加或修改: 1 2 3 4 5 [global] index-url = http://mirrors.aliyun.com/pypi/simple/ [install] trusted-host=mirrors.aliyun.com ECS 内网配置方法：\n找到下列文件 1 ~/.pip/pip.conf 在上述文件中添加或修改: 1 2 3 4 5 [global] index-url=http://mirrors.cloud.aliyuncs.com/pypi/simple/ [install] trusted-host=mirrors.cloud.aliyuncs.com NPM 查看镜像源\n1 npm config get registry 删除镜像源\n1 npm config rm registry 淘宝 http://npm.taobao.org和 http://registry.npm.taobao.org 将在 2022.06.30 号正式下线和停止 DNS 解析。\n新域名为 npmmirror.com, 相关服务域名切换规则请参考：\n1 npm config set registry https://registry.npmmirror.com yarn 查看镜像源\n1 yarn config get registry 设置为淘宝镜像源\n1 yarn config set registry https://registry.npmmirror.com 删除镜像源\n1 yarn config rm registry 华为云 切换 1 npm config set registry https://mirrors.huaweicloud.com/repository/npm/ 验证 1 npm config get registry Go 七牛云 1 2 go env -w GO111MODULE=on go env -w GOPROXY=https://goproxy.cn,direct Maven 阿里云 打开 Maven 的配置文件(windows 机器一般在 maven 安装目录的 conf/settings.xml)，在\u0026lt;mirrors\u0026gt;\u0026lt;/mirrors\u0026gt;标签中添加 mirror 子节点:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;!-- 阿里云仓库 --\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;alimaven\u0026lt;/id\u0026gt; \u0026lt;mirrorOf\u0026gt;central\u0026lt;/mirrorOf\u0026gt; \u0026lt;name\u0026gt;aliyun maven\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://maven.aliyun.com/nexus/content/repositories/central/\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; \u0026lt;!-- 中央仓库1 --\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;repo1\u0026lt;/id\u0026gt; \u0026lt;mirrorOf\u0026gt;central\u0026lt;/mirrorOf\u0026gt; \u0026lt;name\u0026gt;Human Readable Name for this Mirror.\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://repo1.maven.org/maven2/\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; \u0026lt;!-- 中央仓库2 --\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;repo2\u0026lt;/id\u0026gt; \u0026lt;mirrorOf\u0026gt;central\u0026lt;/mirrorOf\u0026gt; \u0026lt;name\u0026gt;Human Readable Name for this Mirror.\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;http://repo2.maven.org/maven2/\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; Docker 软件源 非 Docker Hub 镜像源\n清华 Debian/Ubuntu/Raspbian 用户 如果你过去安装过 docker，先删掉：\n1 for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done 首先安装依赖：\n1 2 sudo apt-get update sudo apt-get install ca-certificates curl gnupg 信任 Docker 的 GPG 公钥并添加仓库：\n详细内容请查看 https://mirror.tuna.tsinghua.edu.cn/help/docker-ce/\nDebian\n1 2 3 4 5 6 7 8 9 10 sudo install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo chmod a+r /etc/apt/keyrings/docker.gpg echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian \\ \u0026#34;$(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;)\u0026#34; stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null Ubuntu\n1 2 3 4 5 6 7 install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo chmod a+r /etc/apt/keyrings/docker.gpg echo \\ \u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \\ \u0026#34;$(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;)\u0026#34; stable\u0026#34; | \\ tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null 如果提示\n1 2 -bash: gpg: command not found curl: (23) Failed writing body 请安装 gpg 之后，再次尝试上述的步骤： 信任 Docker 的 GPG 公钥并添加仓库\n1 sudo apt install gpg 最后安装\n1 2 3 sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin Gradle 腾讯云（推荐，版本全）\n1 https://mirrors.cloud.tencent.com/gradle 阿里云（有些小版本没有）\ngradele 4.1 之后 1 https://mirrors.aliyun.com/macports/distfiles/gradle/ ","date":"2023-10-29T14:07:29+08:00","permalink":"https://hublog.netlify.app/p/mirror/","title":"镜像源大汇总，强烈推荐！"},{"content":"自己搭建的kms激活服务器 一条命令激活windows，只需要管理员打开cmd运行下面这条命令即可\n1 slmgr /skms kms.seektao.cc \u0026amp;\u0026amp; slmgr /ato ","date":"2023-10-25T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310025/","title":"自己搭建kms实现Windows激活"},{"content":" 由于 PMail 后续更新，本文也将修改，适应最新版本\n前言 最近想自建一个域名邮箱，开源的邮箱服务内存占用太高，对于个人使用不太友好，接着找到一个由 Golang 编写的域名邮箱 Pmail。\n官方介绍：PMail 是一个追求极简部署流程、极致资源占用的个人域名邮箱服务器。单文件运行，包含完整的收发邮件服务和 Web 端邮件管理功能。只需一台服务器、一个域名、一行代码、一分钟部署时间，你就能够搭建出一个自己的域名邮箱。\nGitHub 地址：https://github.com/Jinnrry/PMail/\n以下为界面截图：\n准备工作 服务器，开放了 25 号端口的服务器，没有开放则无法发信。 域名 nginx 反代服务器 nginx proxy manager（可选，但建议），与 nginx 二选一 docker 或者 docker-compose 部署 提示：文章篇幅较长\ndocker-compose\n如果服务器 80，443 端口没有被占用，搭建过程则较为简单。如果 80，443 端口被其他应用占用，搭建过程则较为繁琐。\n本次 80，443 端口被 nginx proxy manager 占用，所以采用映射其他端口搭建\n本次教程采用 docker-compose 方式安装，方便管理配置文件和升级。其余方式请参考官方教程\n在你喜欢的目录下，新建 pamail 文件夹，在 pamil 文件夹下，新建 docker-compose.yml 文件，如：\n1 2 3 mkdir -r ~/opt/pmail \u0026amp;\u0026amp; cd ~/opt/pmail docker network create pmail_network vim docker-compose.yml 文件内容如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 version: \u0026#39;3.9\u0026#39; services: pmail: container_name: pmail image: \u0026#39;ghcr.io/jinnrry/pmail:latest\u0026#39; volumes: - \u0026#39;./config:/work/config\u0026#39; ports: # pop - \u0026#39;110:110\u0026#39; - \u0026#39;995:995\u0026#39; # smtp - \u0026#39;25:25\u0026#39; - \u0026#39;465:465\u0026#39; # web访问 - \u0026#39;8780:80\u0026#39; - \u0026#39;8781:443\u0026#39; restart: unless-stopped networks: - pmail_network networks: pmail_network: external: true 配置文件编写完成之后，在 docker-compose.yml 所在目录下，运行\n1 sudo docker compose up 接着会开启一个阻塞的前台进程，会打印日志信息，没有报错的话，服务则已经启动。\n开放端口，因为使用的云服务器，所以需要在云服务器管理面板，开放安全组，也就是端口，笔者使用的阿里云。\n进入 ecs 管理面板，在左侧选择 【安全组】，选择服务器对应的安全组。\n接着【手动添加】\n填写端口范围和授权对象，端口即为配置文件开放的端口，授权对象为 0.0.0.0，表示所有 ip 都可访问，描述为备注信息。\n保存后，安全组配置完成。\n配置 pmail\n暂停 pamil 的启动，修改配置文件\n1 sudo vim /config/config.json 修改配置文件\n1 \u0026#34;sslType\u0026#34;:\u0026#34;1\u0026#34;,\u0026#34;httpPort\u0026#34;:0,\u0026#34;httpsPort\u0026#34;:0 网页访问服务器的公网 ip+端口，如本次教程为 http://ip:8780，ip 为服务器的公网 ip，在ecs 管理面板 可以看到。\n欢迎界面，初次进入的页面如下：\n下一步，选择数据库，建议默认即可，根据自己使用的数据库安装\n继续下一步，设置 pmail 管理员密码\n下一步，设置域名\n下一步，设置 DNS，将以下信息添加到 dns 解析处，\nDNS 记录配置，在上一步，需要将 DNS 记录添加到对应的域名，我使用的 DNSPOD，点此跳转 DNSPOD ，进入之后，按照提示添加记录即可\n配置 ssl，dns 记录添加完成之后，回到 pmail 配置页面，继续配置证书。\n这里选择手动配置 ssl 证书，如果服务器的 80 端口没有被占用，可以选择自动配置，当然，前面的 docker-compose.yml 端口信息也需要改成 80，443。\n为什么选择不用 80，443 端口呢？？\n自动配置 ssl 需要用到 80 端口来验证服务器的所有权，所以自动配置 ssl 必须使用 80 端口。但是我的服务器安装了 nginx proxy manger（简称 npm） ，反代服务，一个 web 端的 nginx 工具，简化 nginx 配置，还可以一键生成 ssl 证书，我的服务器应用比较多，其他应用采用的都是子域名的方式访问。通过这种方式，简化的自己的工作、但是 npm 已经占用了 80，443 端口，所以 80，443 端口不可用。总不可能为了一个域名服务，让其他域名都不可用域名访问了吧。所以，将容器的 80，443 端口映射到了其他端口。\n默认的证书位置在 ./config/ssl/private.key、./config/ssl/public.crt下，我们就把自己的 ssl 证书上传到 ./config/ssl下。\n如果继续介绍 npm 申请 ssl 证书，这篇文章的篇幅就会过长。如果需要，到时候会另开文章介绍，这里就不多介绍了。也可自行搜索相关教程。\n关于 ssl 配置可以参考这篇博文：Debian 下的 Certbot 安装使用，附 nginx 使用\n完成了这一步后，就基本完成了，不过还需要配置反向代理。\n反向代理 dns 记录\n进入 dnspod 管理页面，新增 dns 记录，如下\n新增代理\n进入 npm 管理页面，新增代理\n点击 Add Proxy Host\n编辑新增内容，按照如图所示编辑，打码的部分为服务的 ip 或者域名。\n开启 ssl，点击 ssl，ssl 证书选择已经申请的，如果没有，这里不做介绍。\n强制 ssl 开启，http2 开启，如图：\n最后点击 save 保存。到这反向代理也配置完成。\n但是访问会出现\n修改 pmail 配置文件，关闭前台进程，ctrl+c，关闭。\npmail 的配置文件已经挂载到本地了，在 config/config.json下，\n进入 pmail 文件夹，编辑 config.json\n1 2 3 cd ~/opt/pmail sudo vim config/config.json httpsEnabled 配置改成 2 sslType 改成 1 启动测试 修改配置后，重新启动 docker 容器。\n在 docker-compose.yml 所在目录下，运行\n1 2 3 sudo docker up -d # -d 表示后台运行 浏览器通过域名访问或者 ip+端口访问即可\n最终效果如下，\n测试，发送测试邮件给 163 邮箱\n163 邮箱 接收\n总结：\n搭建过程较为繁琐，需要的前置条件较多.\npmail 界面相较于其他邮箱要差一些，没有多用户功能，最新版已增加，实现了基本的收发功能。基本满足个人使用。\n感谢作者的开源精神。\n最后继续附上 pmail 的 GitHub 地址：https://github.com/Jinnrry/PMail/\n附录 配置信息详解\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \u0026#34;logLevel\u0026#34;: \u0026#34;info\u0026#34;, //日志输出级别 \u0026#34;domain\u0026#34;: \u0026#34;domain.com\u0026#34;, // 你的域名 \u0026#34;webDomain\u0026#34;: \u0026#34;mail.domain.com\u0026#34;, // web域名 \u0026#34;dkimPrivateKeyPath\u0026#34;: \u0026#34;config/dkim/dkim.priv\u0026#34;, // dkim 私钥地址 \u0026#34;sslType\u0026#34;: \u0026#34;0\u0026#34;, // ssl证书更新模式，0自动，1手动 \u0026#34;SSLPrivateKeyPath\u0026#34;: \u0026#34;config/ssl/private.key\u0026#34;, // ssl 证书地址 \u0026#34;SSLPublicKeyPath\u0026#34;: \u0026#34;config/ssl/public.crt\u0026#34;, // ssl 证书地址 \u0026#34;dbDSN\u0026#34;: \u0026#34;./config/pmail.db\u0026#34;, // 数据库连接DSN \u0026#34;dbType\u0026#34;: \u0026#34;sqlite\u0026#34;, //数据库类型，支持sqlite 和 mysql \u0026#34;httpsEnabled\u0026#34;: 0, // web后台是否启用https 0默认（启用），1启用，2不启用 \u0026#34;spamFilterLevel\u0026#34;: 0,// 垃圾邮件过滤级别，0不过滤、1 spf dkim 校验均失败时过滤，2 spf校验不通过时过滤 \u0026#34;httpPort\u0026#34;: 80, // http 端口 . 默认 80 \u0026#34;httpsPort\u0026#34;: 443, // https 端口 . 默认 443 \u0026#34;weChatPushAppId\u0026#34;: \u0026#34;\u0026#34;, // 微信推送appid \u0026#34;weChatPushSecret\u0026#34;: \u0026#34;\u0026#34;, // 微信推送秘钥 \u0026#34;weChatPushTemplateId\u0026#34;: \u0026#34;\u0026#34;, // 微信推送模板id \u0026#34;weChatPushUserId\u0026#34;: \u0026#34;\u0026#34;, // 微信推送用户id \u0026#34;tgChatId\u0026#34;: \u0026#34;\u0026#34;, // telegram 推送chatid \u0026#34;tgBotToken\u0026#34;: \u0026#34;\u0026#34;, // telegram 推送 token \u0026#34;isInit\u0026#34;: true // 为false的时候会进入安装引导流程 } ","date":"2023-10-23T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/pmail/","title":"强烈推荐，一个内存占用极低的自建域名邮箱Pmail"},{"content":" 1 vim $HOME/.vimrc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 set number \u0026#34; set relativenumber set tabstop=2 set shiftwidth=2 set expandtab set autoindent set smartindent set cursorline set encoding=utf-8 set fileencoding=utf-8 set mouse=a syntax on set history=1000 set splitbelow set splitright ","date":"2023-10-22T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310022/","title":"VIM的配置"},{"content":"前言 之前使用 gitee 当作图床，typora 能渲染，但是博客里无法渲染，可能是有防盗链，所以换成了 smms 图床，换了之后就可以了。\nPicgo-Core 不推荐使用图形化的 picgo，占用内存。建议使用 nodejs 安装 picgo，安装 nodejs 之后，再安装 picgo。\nNodeJs 官网：https://nodejs.org/en\nNodeJs 安装之后使用 npm 安装 picgo\n1 2 3 4 5 # 通过node安装picgo（前提node环境已经安装好） npm install picgo -g # 配置文件所在的位置 # 用户家目录下的.picgo/config.json 把 picgo 所在的路径添加到系统环境变量，方便使用。\n在 typora 设置中，图像选择【上传图片】，上传服务选择 【costom command】,命令选择 picgo 所在的位置，不过需要在最后面加上 小写字母 u，如：\n1 picgo u 关于 picgo 的更多信息请参考：https://picgo.github.io/PicGo-Core-Doc/\n图床服务 smms 注册账号 smms 注册账户拥有 5g 的空间，对于文章上传图片来说，应该是够用了，如果不够大不了再注册个账户而已。\n官网：https://sm.ms/\n备用地址：https://smms.app\n注册账户之后，进入控制台查看 api token，记下来，稍后使用。\n配置 picgo 首先确定好是否配置了环境变量，如果没有配置，请在 picgo 所在的路径打开终端。\n1 2 3 4 5 6 7 8 9 10 11 12 # 1. 查看picgo版本 picgo -v # 2. 设置使用的图床服务 # 键盘上下键选择使用的图床服务，如smms，回车确认 picgo use # 3. 设置使用的图床配置，如上传的路径，token等 picgo set uploader # 继续选择smms，输入api token，输入的时候密码看不见。 # 接着输入smms备用域名，如smms.app 设置完成之后，随便截张图复制到 typora 中看它是否会自动上传。如果可以，则完成，失败，查看失败信息，进行排查。\n插件 picgo-plugin-smms-user（smms必装） 这个插件配置 smms，可在 typora 中使用，返回链接自动更换 typora 默认的本地地址。\n安装\n1 picgo install picgo-plugin-smms-user 配置\n1 picgo set uploader picgo-plugin-web-uploader 1 2 # 安装 picgo install picgo-plugin-web-uploader picgo-plugin-telegraph-image 这个插件用于开源的自建图床服务，Telegraph-Image\n安装\n1 picgo install picgo-plugin-telegraph-image 配置\n1 picgo set uploader ","date":"2023-10-21T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310021/","title":"使用picgo-core将markdown图片上传至smms图床"},{"content":"使用maven将阿里云的上传sdk的jar包添加到本地仓库\njar包的下载地址：点此跳转\n下载下来解压，进入lib目录，有类似\naliyun-java-sdk-vod-2.16.11.jar aliyun-java-vod-upload-1.4.15.jar 这两个jar包，在此目录打开终端\nmaven项目缺少 aliyun-java-vod-upload，使用这个命令\n1 mvn install:install-file -DgroupId=com.aliyun -DartifactId=aliyun-java-vod-upload -Dversion=1.4.15 -Dpackaging=jar -Dfile=aliyun-java-vod-upload-1.4.15.jar maven项目缺少 aliyun-sdk-vod-upload，使用这个命令\n1 mvn install:install-file -DgroupId=com.aliyun -DartifactId=aliyun-sdk-vod-upload -Dversion=1.4.15 -Dpackaging=jar -Dfile=aliyun-java-vod-upload-1.4.15.jar ","date":"2023-10-20T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310020/","title":"使用maven将阿里云的上传sdk的jar包添加到本地仓库"},{"content":"需求： 转换申请的 ssl 证书格式，以 pem 结尾的证书改成 key、crt结尾。\n科普：证书格式\ncert.pem：这是服务器证书，也称为公钥证书或端点证书。当客户端请求与服务器建立SSL/TLS连接时，服务器会将此证书发送给客户端以验证身份和建立安全连接。 chain.pem：这是证书链（CA Bundle），其中包括根证书和中间证书。证书链用于构建完整的证书信任链，以验证服务器证书的真实性。 fullchain.pem：这是服务器证书和证书链的组合。它包括服务器证书和中间证书链，但不包括根证书，因为客户端应该已经具有根证书的信任。 privkey.pem：这是私钥文件，它是与服务器证书配对使用的秘密密钥。私钥文件必须保持机密，不应共享或泄露给其他人，以确保安全连接的保密性 解决方法 fullchain.pem 转换 public.crt 1 openssl x509 -in fullchain.pem -out public.crt privkey.pem 转换 privkey.key 1 openssl ec -in privkey.pem -out private.key 如果出现了错误，具体原因为 加密算法不是 EC 其实还有 RSA、DSA等加密算法。\n1 2 # 使用rsa算法转换 openssl rsa -in privkey.pem -out private.key ","date":"2023-10-19T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310019/","title":"SSL证书格式转换"},{"content":"首言 本文编辑于 2023-09-14\n作者：muyiacc\nGithub：github.com/muyiacc\n环境：debian11\n为了通过网址远程查看服务器及容器的运行状况，选择了时下最热门的监控方案：Prometheus+node_exporter+Grafana。\n现记录下自己的安装过程。\n1. Prometheus 官网地址\thttps://prometheus.io/docs/introduction/overview/\n1.1. 概述 Prometheus 是一个开源的系统监控和警报工具包，由SoundCloud 构建，由Golang编写，现有非常活跃的开发人员和社区，是一个独立的开源项目，于2016年加入了云原生计算基金会，成为继Kubernetes之后的第二个托管项目。总结：非常热门+ NB。\n1.2. 安装 话不多说，开始使用安装之旅。\n1）官网下载页面\nhttps://prometheus.io/download/\n核心组件 prometheus的最新版下载地址为：\nhttps://github.com/prometheus/prometheus/releases/download/v2.47.0/prometheus-2.47.0.linux-amd64.tar.gz\n上面的地址为github，众所周知，因为某些原因，你下载可能会出现网络问题，这里不做解决。\n如果你的系统可直连github，可以通过如下命令直接下载。\n1 wget https://github.com/prometheus/prometheus/releases/download/v2.47.0/prometheus-2.47.0.linux-amd64.tar.gz 提示 wget 没安装？\ndebian： sudo apt install wget\ncentos: sudo yum install wget\n2）解压安装\n下载完成之后，解压安装\n解压放到自己熟悉的路径即可。\n1 tar -zxvf prometheus-2.47.0.linux-amd64.tar.gz -C ~/opt/ 修改名字\n1 2 cd ~/opt mv prometheus-2.47.0.linux-amd64 prometheus-2.47.0 在解压的目录下，找到 prometheus.yml 文件，这是prometheus的配置文件\n本文只为快速搭建使用，对于配置的含义不做详细解释。\n默认的文件也不需要修改，需要注意的地方是\n1 2 3 4 5 6 7 8 9 scrape_configs: # The job name is added as a label `job=\u0026lt;job_name\u0026gt;` to any timeseries scraped from this config. - job_name: \u0026#34;prometheus\u0026#34; # metrics_path defaults to \u0026#39;/metrics\u0026#39; # scheme defaults to \u0026#39;http\u0026#39;. static_configs: - targets: [\u0026#34;localhost:9090\u0026#34;] 默认的端口是9090，如果你的端口被占用了，只需要修改上述的端口即可。\n1.3. 启动 因为使用go语言编写，编译后的文件 只需要执行解压后的文件 prometheus\n进入解压的目录\n1）前台启动\n1 ./prometheus --config.file=prometheus.yml 2）后台启动\n1 nohup ./prometheus --config.file=prometheus.yml \u0026amp;\u0026gt;\u0026gt; prometheus.log \u0026amp; 上述的命令的含义为：后台启动，错误的日志重定向到标准输出，也就是将所有的日志追加到prometheus.log 中，prometheus.log会自动生成\n通过浏览器 ip:端口 就可以访问。\n如果是服务器，需要开放安全组，这里不做介绍。\n关于对 Prometheus 的简单介绍就先到这里。\n2. node_exporter 2.1. 概述 在 Prometheus 的架构设计中，Prometheus Server 主要负责数据的收集，存储并且对外提供数据查询支持。\n实际的监控样本数据的收集则是由 Exporter 完成，因此为了能够监控到某些东西，如主机的 CPU 使用率，我们需要使用到 Exporter。\nPrometheus 周期性的从 Exporter 暴露的 HTTP 服务地址（通常是/metrics）拉取监控样本数据。\n为了能够采集到主机的运行指标如 CPU, 内存，磁盘等信息。我们可以使用 Node Exporter。Node Exporter 同样采用 Golang 编写，并且不存在任何的第三方依赖，只需要下载，解压即可运行。\n下载地址：\thttps://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz\n2.2. 安装 1 2 3 4 5 6 7 8 # 下载 wget https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz # 解压 tar -zxvf node_exporter-1.6.1.linux-amd64 -C ~/opt/ # 修改名字 cd ~/opt/ \u0026amp;\u0026amp; mv node_exporter-1.6.1.linux-amd64 node_exporter-1.6.1 2.3. 启动 直接执行 node_exporter文件即可\n1 2 3 cd ~/opt/linux-amd64 node_exporter-1.6.1 ./node_exporter 通过控制台打印的信息可以知道，端口为 9100\n浏览器访问 ip:9100即可访问\n设置开机自启，编写systemd 服务脚本\n关于如何编写，可以观看这篇文章\nhttps://blog.csdn.net/lu_embedded/article/details/132424115\n服务脚本文件以 .service 结尾，由 Unit、Service 和 Install 三个区块组成，这里提供一个示例\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 [Unit] Description=test # 简单描述服务 After=network.target # 描述服务类别，表示本服务需要在network服务启动后在启动 Before=xxx.service # 表示需要在某些服务启动之前启动，After和Before字段只涉及启动顺序，不涉及依赖关系 [Service] Type=forking # 设置服务的启动方式 User=USER # 设置服务运行的用户 Group=USER # 设置服务运行的用户组 WorkingDirectory=/PATH\t# 设置服务运行的路径(cwd) KillMode=control-group # 定义systemd如何停止服务 Restart=no # 定义服务进程退出后，systemd的重启方式，默认是不重启 ExecStart=/start.sh # 服务启动命令，命令需要绝对路径（采用sh脚本启动其他进程时Type须为forking） [Install] WantedBy=multi-user.target # 多用户 创建 service 文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 sudo vim /usr/lib/systemd/system/node_exporter.service [Unit] Description=node_export Documentation=https://github.com/prometheus/node_exporter After=network.target [Service] Type=simple User=ecs-user ExecStart=/home/ecs-user/opt/node_exporter-1.6.1/node_exporter Restart=on-failure [Install] WantedBy=multi-user.target 开启自启\n1 2 3 4 5 6 # 查看状态 systemctl status node_exporter # 启动node_exporter systemctl start node_exporter # 开启自启 systemctl enable node_exporter 3. Grafana 3.1 概述 Grafana 是一款采用 Go 语言编写的开源应用，主要用于大规模指标数据的可视化展现\n是网络架构和应用分析中最流行的时序数据展示工具，目前已经支持绝大部分常用的时序数据库。\n官网：https://grafana.com/zh-cn/grafana/\n3.2 安装 个人使用，选择 Standalone Linux Binaries 版本\n1 2 3 4 5 6 7 # 下载 wget https://dl.grafana.com/enterprise/release/grafana-enterprise-10.1.1.linux-amd64.tar.gz # 解压 tar -zxvf grafana-enterprise-10.1.1.linux-amd64.tar.gz -C ~/opt/ # 不用修改名字了，默认为grafana-10.1.1 3.3 启动 进入解压的目录之后\n1 nohup ./bin/grafana-server web \u0026amp;\u0026gt;\u0026gt; grafana.log \u0026amp; 3.4 集成Prometheus 启动Grafana之后，浏览器访问 ip:3000，进入登录界面，默认用户和密码都为admin\n输出密码之后，会提示修改密码，修改即可。\n完成之后，进入主界面 ，大概如下：\n![image-20230914174457412](https://gitee.com/muyiacc/typora-img/raw/master/2023/2023-09-14 17-45-17_image-20230914174457412.png)\n3.4.1 配置数据源 按住Ctrl+K，搜索 data sources，选中data sources 配置数据源，进入如下界面\n![image-20230914174701933](https://gitee.com/muyiacc/typora-img/raw/master/2023/2023-09-14 17-47-04_image-20230914174701933.png)\n选择 add new data source ，选择Prometheus，进入配置\n![image-20230914174847825](https://gitee.com/muyiacc/typora-img/raw/master/2023/2023-09-14 17-48-49_image-20230914174847825.png)\n这里只需要配置一下 Prometheus server URL，默认没改端口的填入 http://localhost:9090，不要选择https，滑到最底下，选择save \u0026amp; test按钮，如果显示Successfully queried the Prometheus API，表示对接成功。\n3.4.2 创建仪表盘 Dashboard Ctrl + K，搜索 Dashboards，进入Dashboards，选择new dashborad，后续自行探索吧。\n![image-20230914175424008](https://gitee.com/muyiacc/typora-img/raw/master/2023/2023-09-14 17-54-27_image-20230914175424008.png)\n3.4.3 导入仪表盘 Dashboard Ctrl + K，搜索 Dashboards，进入Dashboards，选择Import\n![image-20230914175910755](https://gitee.com/muyiacc/typora-img/raw/master/2023/2023-09-14 17-59-12_image-20230914175910755.png)\n填入 ID ,Load 即可\n对于如何寻找已经创建好的仪表盘，可在官网寻找 https://grafana.com/grafana/dashboards/\n![image-20230914180001302](https://gitee.com/muyiacc/typora-img/raw/master/2023/2023-09-14 18-00-03_image-20230914180001302.png)\n这里推荐一个 https://grafana.com/grafana/dashboards/12633-linux/\n填入的id为12633，load后进入如下界面，选择之前连接的Prometheus，最后 Import就大功告成了。\n![image-20230914180651577](https://gitee.com/muyiacc/typora-img/raw/master/2023/2023-09-14 18-06-53_image-20230914180651577.png)\n最后的展示\n![image-20230914180755078](https://gitee.com/muyiacc/typora-img/raw/master/2023/2023-09-14 18-07-57_image-20230914180755078.png)\n","date":"2023-10-18T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310018/","title":"Prometheus+node_exporter+Grafana实现监控服务器"},{"content":"概述 Node Version Manager，NodeJS 版本管理工具\nGithub: https://github.com/nvm-sh/nvm\n安装 Linux 1 wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash Windows windows 下其实也有 nvm，不过项目是另一个，nvm-windows\n使用命令有所不同，不过都很简单。\n使用 查看帮助信息\n1 nvm --help 查看可安装的 Node 版本\n1 2 # 查看node版本 nvm ls-remote 安装默认的 Node lts 版本\n1 2 # 安装lts版本 nvm install --lts # 安装默认的 lts 版本，目前是20 安装指定的 Node 版本\n1 nvm install 16.20.2 查看本地已下载的 Node 信息\n1 nvm ls 使用指定的 Node 版本\n1 2 # 确保已经安装过 nvm use 16 ","date":"2023-10-17T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310017/","title":"nvm，Node版本管理工具"},{"content":"如果日志文件太大，使用一些工具来查看和分析日志内容，以便更方便地定位问题。以下是几种常用的方法：\n使用tail命令：tail命令可以用来查看日志文件的末尾内容。可以通过指定-n参数来指定要显示的行数，例如：\n1 tail -n 100 logs.log 这将显示日志文件的最后100行内容。可以根据需要调整行数，以便查看足够的日志内容。\n使用less命令：less命令可以以分页的方式查看文件内容，并且支持向前/向后翻页浏览。可以运行以下命令来使用less命令查看日志文件：\n1 less logs.log 运行后，可以使用上下箭头键进行滚动，按空格键向下翻页，按b键向上翻页，按q键退出查看。\n使用日志分析工具：如果的日志文件非常庞大或需要更高级的日志分析功能，可以考虑使用专门的日志分析工具，例如grep、awk、sed等。这些工具可以帮助根据特定的模式或关键词过滤、搜索和提取日志内容。\n例如，可以使用grep命令来搜索包含特定关键词的日志行：\n1 grep \u0026#34;error\u0026#34; logs.log 这将显示包含 \u0026ldquo;error\u0026rdquo; 关键词的日志行。\n或者，可以使用awk命令来提取特定字段或进行更复杂的日志处理操作：\n1 awk \u0026#39;{print $1, $2, $5}\u0026#39; logs.log 这将提取日志行中的第1、2和5个字段，并将其显示出来。\n","date":"2023-10-16T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310016/","title":"Linux下的日志太大，如何查看不卡顿"},{"content":" title: Linux下的 Typora 安装和激活 author: taoone create_date: 2023-10-19\ntypora作为markdown的编辑器的翘楚不用多介绍了吧，就是收费了，不过收费才能让软件走的更好，更远，所以，所以\u0026hellip;所以呢，我目前选择破解\n安装typora 方式一 注意：此方式会下载最新版本.\n官网教程：https://typoraio.cn/#linux\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # or run: # sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA300B7755AFCFAE wget -qO - https://typoraio.cn/linux/public-key.asc | sudo tee /etc/apt/trusted.gpg.d/typora.asc # add Typora\u0026#39;s repository sudo add-apt-repository \u0026#39;deb https://typoraio.cn/linux ./\u0026#39; sudo apt-get update # install typora sudo apt-get install typora 方式二 可以下载指定的版本，更改后面的版本号即可\nhttps://download2.typoraio.cn/linux/typora_1.7.5_amd64.deb\n下载完成时候安装\n1 sudo dpkg -i typora_1.7.5_amd64.deb 激活typora 以下命令均为绝对路径，只需要复制粘贴即可\n下载\n1 2 3 git clone https://github.com/muyiacc/NodeInject.git ~/.NodeInject git clone https://github.com/muyiacc/NodeInject_Hook_example.git ~/.NodeInject_Hook_example 将NodeInject_Hook_example下hook.js 复制到 NodeInject/src下，并改名为hooklog.js\n1 cp ~/.NodeInject_Hook_example/hook.js ~/.NodeInject/src/hooklog.js 安装rust 按照官方教程，需要用到cargo，这是rust所包含的包管理工具，所以还得安装rust 中间选择 1 使用默认推荐安装 安装完成之后，接着刷新环境\n1 curl --proto \u0026#39;=https\u0026#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh 1 source \u0026#34;$HOME/.cargo/env\u0026#34; 接着在终端输入，测试安装是否成功，输出如下信息则安装成功\n1 2 → cargo -V cargo 1.73.0 (9c4383fb5 2023-08-26) 进入NodeInject编译\n1 cd ~/.NodeInject \u0026amp;\u0026amp; cargo build 将编译后的可执行文件复制到 typora文件夹下，并切换，执行复制的文件\n1 2 3 sudo cp ~/.NodeInject/target/debug/node_inject /usr/share/typora/ sudo /usr/share/typora/node_inject 这里出现如下信息，则到目前为止，没有任何问题。\n1 2 3 4 5 extracting node_modules.asar adding hook.js applying patch packing node_modules.asar done! 切换回 NodeInject_Hook_example，生成 license\n1 2 3 4 5 cd ~/.NodeInject_Hook_example/license-gen/ ~/.NodeInject_Hook_example/license-gen/cargo build ~/.NodeInject_Hook_example/license-gen/target/debug/license-gen 接着出现 license\n1 License for you: 5QSW2H-X9GNBU-64F2MZ-YYHJ7W 打开typora，输入邮箱和许可证激活 幸运的话，就可以激活了。\n卸载typora 1 2 3 sudo apt purge typora sudo rm -rf /usr/share/typora ","date":"2023-10-15T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310015/","title":"Linux下的Typora 安装和激活"},{"content":"今天安装了postman，下载下来之后发现是一个压缩包的文件，kde的全局搜索（alt+space）搜不到，想把它加进去。\n压缩包包含的目录如下\n1 2 drwxr-xr-x 6 taoone taoone 4096 Oct20日 23:17 app lrwxrwxrwx 1 taoone taoone 11 Oct20日 23:17 Postman -\u0026gt; app/Postman app\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 → ll app/ 总计 184784 drwxr-xr-x 6 taoone taoone 4096 Oct20日 23:17 . drwxr-xr-x 3 taoone taoone 4096 Oct20日 23:17 .. -rw-r--r-- 1 taoone taoone 148993 Oct20日 23:17 chrome_100_percent.pak -rw-r--r-- 1 taoone taoone 221103 Oct20日 23:17 chrome_200_percent.pak -rwxr-xr-x 1 taoone taoone 1123584 Oct20日 23:17 chrome_crashpad_handler -rwxr-xr-x 1 taoone taoone 53224 Oct20日 23:17 chrome-sandbox drwxr-xr-x 2 taoone taoone 4096 Oct20日 23:17 icons -rw-r--r-- 1 taoone taoone 10284336 Oct20日 23:17 icudtl.dat -rwxr-xr-x 1 taoone taoone 252576 Oct20日 23:17 libEGL.so -rwxr-xr-x 1 taoone taoone 3012552 Oct20日 23:17 libffmpeg.so -rwxr-xr-x 1 taoone taoone 5833784 Oct20日 23:17 libGLESv2.so -rwxr-xr-x 1 taoone taoone 4252936 Oct20日 23:17 libvk_swiftshader.so -rwxr-xr-x 1 taoone taoone 5709040 Oct20日 23:17 libvulkan.so.1 drwxr-xr-x 2 taoone taoone 4096 Oct20日 23:17 locales -rwxr-xr-x 1 taoone taoone 152013352 Oct20日 23:17 postman -rwxr-xr-x 1 taoone taoone 16848 Oct20日 23:17 Postman drwxr-xr-x 4 taoone taoone 4096 Oct20日 23:17 resources -rw-r--r-- 1 taoone taoone 5109757 Oct20日 23:17 resources.pak -rw-r--r-- 1 taoone taoone 405456 Oct20日 23:17 snapshot_blob.bin drwxr-xr-x 2 taoone taoone 4096 Oct20日 23:17 swiftshader -rw-r--r-- 1 taoone taoone 726296 Oct20日 23:17 v8_context_snapshot.bin -rw-r--r-- 1 taoone taoone 107 Oct20日 23:17 vk_swiftshader_icd.json 先解压让终端可以运行postman\n1 sudo tar -zxvf postman-linux-x64.tar.gz -C /opt/ 解压之后的文件夹是Postman，绝对路径为 /opt/Postman\n添加到 bin目录，创建软连接\n1 sudo ln -s /opt/Postman/Postman /usr/bin/Postman 添加全局搜索 全局搜索的配置文件在 /usr/share/applications，这里有很多已经安装的软件，如\n1 2 3 brave-browser.desktop firefox-esr.desktop google-chrome.desktop 名字都是 软件名.desktop的形式，我们仿照它们，新建一个\n1 vim postman.desktop 内容如下\n1 2 3 4 5 6 7 [Desktop Entry] Type=Application Name=Postman Icon=/opt/Postman/app/icons/icon_128x128.png Exec=/opt/Postman/Postman Terminal=false Categories=Application; 保存退出即可生效。\n最后 alt+space 输入postman即可搜索到\n","date":"2023-10-14T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310014/","title":"Linux下kde环境将应用程序添加快捷方式和全局搜索"},{"content":"简介 之前介绍过一个免翻使用 chatgpt 接口的项目 Pandora，但是呢，这个项目的代理是由项目作者提供的，访问比较慢，界面比较朴实，体验感一般\n这个项目可以一键免费部署你的私人 ChatGPT 网页应用，支持 Claude, GPT4 \u0026amp; Gemini Pro 模型。\n源码：https://github.com/Yidadaa/ChatGPT-Next-Web\n预览 部署 Docker docker-compose.yml\n1 2 3 4 5 6 7 8 9 10 11 12 version: \u0026#39;3.9\u0026#39; services: chatgpt-next-web: image: yidadaa/chatgpt-next-web container_name: chatgpt-next-web environment: - CODE=your_password - OPENAI_API_KEY=your_api_key - BASE_URL=api_url ports: - \u0026#39;3000:3000\u0026#39; restart: unless-stopped CODE：访问密钥 OPENAI_API_KEY：OpenAI API key BASE_URL：OpenAI API URL 启动容器\n1 docker compose up -d vercel 克隆仓库，新建项目，选中 chatgpt-next-web\n环境变量\nOPENAI_API_KEY\n1 sk-xxxx BASE_URL\n1 https://api.openai.com CUSTOM_MODELS\n自定义模型\n1 -all,+gemini-2.5-flash-preview-05-20,+gemini-2.5-pro-preview-05-06,+gemini-2.0-flash,+gemini-2.0-flash-preview-image-generation,+gemini-2.0-flash-lite,+gemini-1.5-flash,+gemini-1.5-flash-8b,+gemini-1.5-pro,+gemini-embedding-exp,+imagen-3.0-generate-002,+veo-2.0-generate-001,+gemini-2.0-flash-live-001 GOOGLE_URL\n1 https://generativelanguage.googleapis.com GOOGLE_API_KEY\n1 asdfasfg,safdasfa CODE\n访问密码\n1 code1,code2 STABILITY_API_KEY\n1 sk-xxxxx DEFAULT_MODEL\n1 gemini-2.0-flash 接口 GPT_API_free 支持 gpt | deepseek | claude | gemini | grok 等排名靠前的常用大模型。 免费版支持 gpt-4o，gpt-4.1 一天 5 次；支持 deepseek-r1, deepseek-v3 一天 30 次，支持 gpt-4o-mini，gpt-3.5-turbo，gpt-4.1-mini，gpt-4.1-nano 一天 200 次。 与官方完全一致的接口标准，兼容各种软件/插件。 支持流式响应。 国内线路使用动态加速，体验远优于使用代理连接官方。 无需科学上网，国内环境直接可用。 个人完全免费使用。 协议统一使用 openai 标准协议，其他厂商模型仅需更换模型名称，接入便捷 🚀申请领取内测免费 API Key 免费版支持 deepseek, gpt-3.5-turbo, embedding, gpt-4o-mini, gpt-4o。 转发 Host1: https://api.chatanywhere.tech (国内中转，延时更低) 转发 Host2: https://api.chatanywhere.org (国外使用) 可以使用的 API 模型\n1 2 3 4 5 6 7 8 9 gpt-4o gpt-4.1 deepseek-r1 deepseek-v3 gpt-4o-mini gpt-3.5-turbo gpt-4.1-mini gpt-4.1-nano embedding 配置 chat-next-web 项目使用，添加 CUSTOM_MODELS变量\n1 CUSTOM_MODELS=-all,gpt-4.1-mini,gpt-4o,gpt-4.1,deepseek-r1,deepseek-v3,gpt-4o-mini,gpt-3.5-turbo,gpt-4.1-nano,embedding 添加默认模型 DEFAULT_MODEL\n1 DEFAULT_MODEL=gpt-4.1-mini ","date":"2023-10-13T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310013/","title":"ChatGPT-Next-Web，一键部署AI大模型网页客户端"},{"content":"前言 每次装新系统都要网上搜各种换仓库镜像源的教程，有的还不一定准确，自己总结下，免得到处翻找\n我一般用的是 Debian 系统，Centos 因为变得不再稳定，所以我已不再使用，如果你用的是 Debian 系，应该也适合你，如 Ubuntu。\n以下教程都是在 root 用户使用，新用户还需要编辑 sudoer 文件，太麻烦了，索性直接用 roo t用户，不过便于以后使用，以后可能普通用户也有换源的需求，有的命令也加上 sudo\n查看自己的 Debian 发行版本\n1 2 3 4 cat /etc/issue # 或者 cat /proc/version 本次教程发行版本是 Debian 12 (bookworm)\nDebian 软件源文件所在位置 /etc/apt/sources.list\n修改之前先备份\n1 sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak 清华源 官方帮助地址：https://mirrors.tuna.tsinghua.edu.cn/help/debian/\nStep 1 新系统更新软件缓存包时会用到 官方安全更新软件源，国内网络问题，所以会直接卡住，所以先使用清华源更新，更新后再换回来\n1 2 # 编辑 /etc/apt/sources.list sudo vi /etc/apt/sources.list 快捷键：\nhome键：光标跳转到行首 dG：删除全部内容 在官网选择好对应的版本和内容如下：\n是否使用 HTTPS：否 是否使用 sudo：是 Debian 版本：Debian 12 (bookworm) 启用源码镜像：否 使用官方安全更新软件源：否 将复制的内容粘贴到终端\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 deb http://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware # deb-src http://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware deb http://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware # deb-src http://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware deb http://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware # deb-src http://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware deb http://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware # deb-src http://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware # deb http://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware # # deb-src http://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware 退出，更新缓存\n1 2 3 4 sudo apt update # 这一步安装好vim，便于后续使用 sudo apt install vim Step 2（可选） Debian Buster 以上版本默认支持 HTTPS 源，所以可选。\n安装：\napt-transport-https ca-certificates 1 sudo apt install apt-transport-https ca-certificates Step 3 类似于step1，选择的内容则有所不同\n是否使用 HTTPS：==是== 是否使用 sudo：是 Debian 版本：Debian 12 (bookworm) 启用源码镜像：否 使用官方安全更新软件源：==是== 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # 编辑 /etc/apt/sources.list sudo vim /etc/apt/sources.list # 删除全部内容，粘贴重新复制的内容 deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware # deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware # # deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security bookworm-security main contrib non-free non-free-firmware deb https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware # deb-src https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware 更新缓存\n1 sudo apt update 现在就可以自由安装软件了。\n中科大 1 sudo sed -i \u0026#39;s/deb.debian.org/mirrors.ustc.edu.cn/g\u0026#39; /etc/apt/sources.list 阿里云 参考地址：https://developer.aliyun.com/mirror/debian?spm=a2c6h.13651102.0.0.7fb11b11uZIZXw\nDebian10 此源为阿里云的云服务器默认配置，使用阿里云镜像站的源下载速度很慢，不知为何。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ## Note, this file is written by cloud-init on first boot of an instance ## modifications made here will not survive a re-bundle. ## if you wish to make changes you can: ## a.) add \u0026#39;apt_preserve_sources_list: true\u0026#39; to /etc/cloud/cloud.cfg ## or do the same in user-data ## b.) add sources in /etc/apt/sources.list.d ## c.) make changes to template file /etc/cloud/templates/sources.list.debian.tmpl ### # See http://www.debian.org/releases/stable/i386/release-notes/ch-upgrading.html # for how to upgrade to newer versions of the distribution. deb http://mirrors.cloud.aliyuncs.com/debian/ bullseye main contrib non-free deb http://mirrors.cloud.aliyuncs.com/debian/ bullseye-updates main contrib non-free deb http://mirrors.cloud.aliyuncs.com/debian/ bullseye-proposed-updates main non-free contrib deb http://mirrors.cloud.aliyuncs.com/debian/ bullseye-backports main non-free contrib ## Major bug fix updates produced after the final release of the ## distribution. deb-src http://mirrors.cloud.aliyuncs.com/debian/ bullseye-updates main contrib non-free deb-src http://mirrors.cloud.aliyuncs.com/debian/ bullseye main contrib non-free deb-src http://mirrors.cloud.aliyuncs.com/debian/ bullseye-proposed-updates main contrib non-free deb-src http://mirrors.cloud.aliyuncs.com/debian/ bullseye-backports main contrib non-free deb http://mirrors.cloud.aliyuncs.com/debian-security/ bullseye-security main non-free contrib deb-src http://mirrors.cloud.aliyuncs.com/debian-security/ bullseye-security main non-free contrib ## Uncomment the following two lines to add software from the \u0026#39;backports\u0026#39; ## repository. ## ## N.B. software from this repository may not have been tested as ## extensively as that contained in the main release, although it includes ## newer versions of some applications which may provide useful features. ","date":"2023-10-12T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310012/","title":"Debian软件源之国内镜像源"},{"content":"linux原生版微信 linux上的微信版本今天发现优麒麟的适配比较好\n下载地址：点此跳转\n安装\n1 sudo dpkg -i 下载的安装包 引用自 未公开发行的Linux版微信：\n其实早就已经有原生态的微信，但是没有公开的发行。我是在阿里的源里面 \u0026gt; 找的原生微信。功能比较简陋，但是可以使用，已经升级几个版本了。有兴趣的可以去下载。 下载链接： https://mirrors.aliyun.com/ubuntukylin/pool/partner/weixin_2.1.4_amd64.deb?spm=a2c6h.25603864.0.0.7ead34376Zfwrf\nlinux wine版微信 上述是一个原生版本的微信，功能呢相对较少。\n除此之外，星火商店还有个wine版本的微信，功能趋近于windows平台。\n可以通过下载星火商店来安装wine版本的微信\n星火商店地址：https://spark-app.store\n","date":"2023-10-11T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310011/","title":"Debian安装微信"},{"content":"官网：1.1.1.1\n安装 Debian The supported releases are:\nBookworm (12) Bullseye (11) Buster (10) Stretch (9) Add cloudflare gpg key\n1 curl https://pkg.cloudflareclient.com/pubkey.gpg | sudo gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg Add this repo to your apt repositories echo \u0026ldquo;deb [arch=amd64 signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ $(lsb_release -cs) main\u0026rdquo; | sudo tee /etc/apt/sources.list.d/cloudflare-client.list\nInstall sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install cloudflare-warp\n","date":"2023-10-10T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310010/","title":"Debian下使用warp"},{"content":"apt默认只有jdk17版本了,安装了jdk17之后，再安装jdk8\njdk17 1 sudo apt install openjdk-17-jdk jdk8 jdk-8，oracle的版本\n现在下载需要登陆，点此跳转页面选择版本下载\n下载好了之后，解压\n1 sudo tar -zxvf jdk-8u381-linux-x64.tar.gz -C /usr/lib/jvm/ 注册\n1 sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_381/bin/java 1 设置环境变量\n1 sudo vim /etc/profile.d/java.sh 1 2 export PATH=$PATH:/usr/lib/jvm/jdk1.8.0_381/bin/ export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_381/ 1 source /etc/profile.d/java.sh 切换版本 1 sudo update-alternatives --set java /usr/lib/jvm/jdk1.8.0_381/bin/java ","date":"2023-10-09T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310009/","title":"Debian12安装JDK17和JDK8"},{"content":"apt默认只有jdk17版本了,安装了jdk17之后，再安装jdk8\njdk17 1 sudo apt install openjdk-17-jdk jdk8 jdk-8，oracle的版本\n现在下载需要登陆，点此跳转页面选择版本下载\n下载好了之后，解压\n1 sudo tar -zxvf jdk-8u381-linux-x64.tar.gz -C /usr/lib/jvm/ 注册\n1 sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_381/bin/java 1 设置环境变量\n1 sudo vim /etc/profile.d/java.sh 1 2 export PATH=$PATH:/usr/lib/jvm/jdk1.8.0_381/bin/ export JAVA_HOME=/usr/lib/jvm/jdk1.8.0_381/ 1 source /etc/profile.d/java.sh 切换版本 1 sudo update-alternatives --set java /usr/lib/jvm/jdk1.8.0_381/bin/java ","date":"2023-10-09T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310009/","title":"Debian12或者Linux安装JDK17和JDK8"},{"content":"准备 安装之前先确保环境的干净，查看数据库安装的情况\n1 dpkg -l | grep -E \u0026#39;(mysql|maria)\u0026#39; 根据上述命令的输出情况卸载他们，一般 debian 默认安装了 mariadb\n1 sudo apt purge 软件包名字 删除配置文件\n1 sudo rm -rf /etc/mysql /var/lib/mysql 安装 官网下载地址：https://downloads.mysql.com/archives/community/\n选择与系统最接近的版本\nDebian 11\nV8.0.x: https://downloads.mysql.com/archives/get/p/23/file/mysql-server_8.0.33-1debian11_amd64.deb-bundle.tar Debain12\nV8.4.x: https://cdn.mysql.com//Downloads/MySQL-8.4/mysql-server_8.4.3-1debian12_amd64.deb-bundle.tar 命令行下载\n1 2 3 mkdir mysql \u0026amp;\u0026amp; cd ./mysql wget https://downloads.mysql.com/archives/get/p/23/file/mysql-server_8.0.34-1debian11_amd64.deb-bundle.tar 解压 mysql\n1 tar -xvf mysql-server_8.0.34-1debian11_amd64.deb-bundle.tar 安装 mysql\n由于每个人的环境都不一样，关于 mysql 的依赖需求，下面的教程不一定包含全部，如果没有涉及到，请自行上网搜索解决\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # 安装有依赖要求，所以按照顺序安装 sudo dpkg -i mysql-community-client-plugins_8.0.34-1debian11_amd64.deb # 如果提示缺少 libssl1.1， 请到这里下载：https://packages.debian.org/zh-cn/buster/libssl1.1，下载对应的版本，下载完成之后安装 # 这里贴出快速下载地址，可使用wget下载： # http://security.debian.org/debian-security/pool/updates/main/o/openssl/libssl1.1_1.1.1n-0+deb10u6_amd64.deb sudo dpkg -i mysql-community-client-core_8.0.34-1debian11_amd64.deb sudo dpkg -i mysql-common_8.0.34-1debian11_amd64.deb sudo dpkg -i mysql-community-client_8.0.34-1debian11_amd64.deb sudo dpkg -i mysql-client_8.0.34-1debian11_amd64.deb # 这一步可能会缺少libmecab2 # 所以安装 libmecab2 # sudo apt install libmecab2 sudo dpkg -i mysql-community-server-core_8.0.34-1debian11_amd64.deb # 这一步会有界面提示输入root密码，两次输入密码之后，选择 recommed 推荐的密码插件认证（8.0） sudo dpkg -i mysql-community-server_8.0.34-1debian11_amd64.deb 使用 system 服务管理 mysql 状态\n1 2 3 4 5 6 7 8 # 查看mysql的状态，默认应该是启动的 systemctl status mysql # 启动mysql sudo systemctl start mysql # 关闭mysql sudo systemctl stop mysql 卸载 停止 MySQL 服务\n1 sudo systemctl stop mysql 卸载组件\n1 2 3 4 5 6 7 # 按照顺序卸载 sudo dpkg -r mysql-community-server sudo dpkg -r mysql-community-server-core sudo dpkg -r mysql-client sudo dpkg -r mysql-community-client sudo dpkg -r mysql-common sudo dpkg -r mysql-community-client-core 删除相关文件和文件夹\n1 2 3 4 sudo rm -rf /etc/mysql/ sudo rm -rf /var/lib/mysql/ sudo rm -rf /usr/lib/mysql/ sudo rm -rf /var/log/mysql ","date":"2023-10-08T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310008/","title":"Debian安装，卸载MySQL8.0.x"},{"content":"debian12 安装中文输入法\n如果安装系统的时候选择是中文安装，默认就会安装好中文输入法，因为后面我安装rime,不熟悉卸载了fcitx5导致默认的中文失效，发现rime配置太麻烦，默认还不好用，所以打算又重新安装默认的中文输入法，但一直没搞对，后来终于解决了，这里介绍一下经验\n在使用fcitx5的前提下，安装中文输入法。本文不涉及字体等等\n如果没有安装dcitx5的按照以下安装:\nsudo apt update sudo apt install fcitx5\n正确步骤 实际上，中文输入法有个插件的，安装正确的插件才会恢复到默认的状态。\n首先建议把系统语言设置为中文，在设置中文输入法有大用！！如果需要设置为英文，再换回来。\n在终端直接用apt搜索fcitx5相关的中文插件，如下所示：\n1 apt list | grep fcitx5 | grep chinese 输出如下：\n1 2 3 4 5 6 WARNING: apt does not have a stable CLI interface. Use with caution in scripts. fcitx5-chinese-addons-bin/stable,now 5.0.16-1 amd64 [installed,automatic] fcitx5-chinese-addons-bin/stable 5.0.16-1 i386 fcitx5-chinese-addons-data/stable,stable,now 5.0.16-1 all [installed,automatic] fcitx5-chinese-addons/stable,stable,now 5.0.16-1 all [installed] 可以看到有 fcitx5-chinese-addons这个选项，安装它\n1 sduo apt install fcitx5-chinese-addons 安装完就已经安装好了中文输入法，包含一些如拼音，五笔等等。到这里在设置里选择输入法为拼音就好了，重启。就这么简单。\n网上答案质量层次不齐，害人不浅，搞死我了。。。\n附录 这里提供其中的一个错误实例，供参考，安装后都用不了： sudo apt install fcitx5-pinyin\n","date":"2023-10-07T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310007/","title":"debian12安装中文输入法"},{"content":"本文列举安装并使用的的一些软件，基于debian12，debain12有很大的更新，使用wayland替代了x11，本文编辑时，可能好多软件没适配，体验感稍差。\n本文将持续更新\nDebian 官方指南：Debian 系统中可用的软件\n浏览器 Firefox ESR 默认预装，感觉可以，更新频率比较慢\nFirefox 更新速度较快，有很多Firefox ESR没有的新功能\nGoogle chrome Brave https://brave.com/linux/\n1 2 3 4 5 6 7 8 9 sudo apt install curl sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg echo \u0026#34;deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main\u0026#34;|sudo tee /etc/apt/sources.list.d/brave-browser-release.list sudo apt update sudo apt install brave-browser 下载工具 Free Download Manager 截止本文，我觉得是linux上最好的下载工具\n更新：推荐使用 gopeed\ngopeed https://github.com/GopeedLab/gopeed\nXDM 很混乱，感觉好久没怎么更新了，体验感较差\n社交 QQ 通过官网下载安装即可\n微信 推荐使用deepin-wechat，分辨率有问题，能尽量避免不用就不用吧，体验感很差\n官方已推出linux测试版，通过这个仓库可以下载：\nhttps://github.com/lovechoudoufu/wechat_for_linux\n播放器 VLC mpv 上手有一定难度，配置文件可备份，安装后即可使用\n个人配置仓库：https://github.com/muyiacc/mpv-config\nzyplayer 可以用来看影视\n音乐 LX Music 推荐，跨平台使用，可下载，但是界面来说，我感觉一般，播放没有列表选择，本地音乐支持不好，主要用来听网络上的歌曲\n可以使用网易云的歌单\nSpotify 官方教程：https://www.spotify.com/us/download/linux/\n1 2 curl -sS https://download.spotify.com/debian/pubkey_6224F9941A8AA6D1.gpg | sudo gpg --dearmor --yes -o /etc/apt/trusted.gpg.d/spotify.gpg echo \u0026#34;deb http://repository.spotify.com stable non-free\u0026#34; | sudo tee /etc/apt/sources.list.d/spotify.list 1 sudo apt-get update \u0026amp;\u0026amp; sudo apt-get install spotify-client 去广告脚本\n1 bash \u0026lt;(curl -sSL https://spotx-official.github.io/run.sh) Amberol 这是一款本地播放器，颜值高，Kde系通过 Flathub 安装\n1 flatpak install flathub io.bassi.Amberol 编辑器 Typora 教程：https://www.seektao.cc/archives/debian-typora-activation\n新版教程：https://www.seektao.cc/archives/202406151533\nObsidian 感觉怎么说呢，还是没有typora用的习惯\n神器，已作为我的主力编辑markdown的软件\nSublime Text https://www.sublimetext.com/docs/linux_repositories.html\n1 2 3 4 5 6 wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/sublimehq-archive.gpg \u0026gt; /dev/null echo \u0026#34;deb https://download.sublimetext.com/ apt/stable/\u0026#34; | sudo tee /etc/apt/sources.list.d/sublime-text.list sudo apt-get update sudo apt-get install sublime-text 编程 Jetbrains Toolbox 推荐，使用它安装其他jetbrains家族的软件，可以解决分辨率的问题，而且安装起来也比较方便。\n而且，学生免费\nNavicat 好看是好看，就是激活太麻烦了，不如用 Jetbrains 的Data Grip\n更新：Navicat推出了 lite版本，个人免费使用\n录屏 OBS Studio 推荐，跨平台，又是个推流工具\n安装方式：https://github.com/obsproject/obs-studio/wiki/unofficial-linux-builds#debian\n1 2 3 sudo apt update sudo apt install ffmpeg sudo apt install obs-studio SSH Termius 跨平台，美观，同步收费\nTabby 开源，可同步配置文件\n远程控制 ruskdesk https://github.com/rustdesk/rustdesk/releases/tag/1.2.3\n1 wget https://github.com/rustdesk/rustdesk/releases/download/1.2.3/rustdesk-1.2.3-x86_64.deb 截图 eSearch linux下的截图软件，可支持搜索，识别文字，还可以，但是debian12钉图会导致输入法失效，不知道你用的时候解决了没\ngithub可以搜索到\nflameshot debian12也有问题，功能感觉不如eSearch强大，不过也还可以\nsnipaste 没错，windows上的那个软件出linux版本了\nhttps://www.snipaste.com/\n虚拟机 Vmware 卸载方式，apt找不到设备，通过官网查到\n1 2 sudo su - vmware-installer -u vmware-workstation 推荐\n新装机器安装VMware后，新建虚拟机有问题，现在更推荐VirtualBox\nVirtualBox Oracle出品。\n其他 Thunderbird 聚合邮件工具\n","date":"2023-10-06T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310006/","title":"Debian12下的软件清单"},{"content":"安装 安装 Navicat Promium，最新版本是16，使用官网提供的下载方式\n1 2 3 4 5 6 7 cd ~ wget https://www.navicat.com/download/direct-download?product=navicat16-premium-en.AppImage\u0026amp;location=1 chmod +x navicat16-premium-en.AppImage ./navicat16-premium-en.AppImage 激活 Github开源的地址：点此跳转\n以下命令你只需复制粘贴即可\n提取AppImage 将下载的 AppImage 文件内容全部提取到一个文件夹中\n1 2 3 4 5 6 7 8 mkdir navicat16-premium-cs mount -o loop ./navicat16-premium-cs.AppImage ./navicat16-premium-cs sudo mount -o loop ./navicat16-premium-cs.AppImage ./navicat16-premium-cs # 这一步需要等待一会 cp -r ./navicat16-premium-cs ./navicat16-premium-cs-patched 编译 前提安装了\ncapstone keystone rapidjson 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 sudo apt update # 安装 capstone sudo apt install libcapstone-dev # 安装 keystone sudo apt install cmake git clone https://github.com/keystone-engine/keystone.git ~/.keystone cd ~/.keystone mkdir build cd build ../make-share.sh sudo make install sudo ldconfig # 安装 rapidjson sudo apt install rapidjson-dev 开始编译\n1 2 3 4 5 git clone https://github.com/JohnHubcr/navicat-keygen ~/.navicat-keygen cd ~/.navicat-keygen make all 重置 ","date":"2023-10-05T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310005/","title":"Debian12下的Navicat-Promium安装和激活(未完成)"},{"content":"命令英文版 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 Usage: warp-cli [OPTIONS] \u0026lt;COMMAND\u0026gt; Commands: register Register with the WARP API, replacing any existing registration (Must be run before first connection!) teams-enroll Enroll with Cloudflare for Teams delete Delete current registration rotate-keys Generate a new key-pair, keeping the current registration status Ask the daemon to send the current status warp-stats Retrieve the stats for the current WARP connection warp-dns-stats Retrieve the DNS stats for the current WARP connection settings Retrieve the current application settings connect Connect to WARP whenever possible [aliases: enable-always-on] disconnect Disconnect from WARP [aliases: disable-always-on] disable-wifi Automatically disable WARP on Wi-Fi networks (disabled for Zero Trust customers) enable-wifi Allow WARP on Wi-Fi networks (disabled for Zero Trust customers) disable-ethernet Automatically disable WARP on ethernet networks (disabled for Zero Trust customers) enable-ethernet Allow WARP on ethernet networks (disabled for Zero Trust customers) add-trusted-ssid Add a trusted Wi-Fi network for which WARP will be automatically disconnected remove-trusted-ssid Remove a trusted Wi-Fi network exclude-private-ips Exclude private IP ranges from tunnel enable-dns-log Enable DNS logging (Use with the -l option) disable-dns-log Disable DNS logging account Display the account associated with the current registration devices Display the list of devices associated with the current registration network Display the current network information get-virtual-networks List the available virtual networks set-virtual-network Set the currently connected virtual network via the id from get-virtual-networks set-mode Set the mode set-families-mode Set the families mode set-license Attach the current registration to a different account using a license key set-gateway Force the app to use the specified Gateway ID for DNS queries clear-gateway Clear the Gateway ID set-custom-endpoint Force the client to connect to the specified IP:PORT endpoint (Zero Trust customers must run this command as a privileged user) clear-custom-endpoint Remove the custom endpoint setting add-excluded-route Add an excluded IP remove-excluded-route Remove an excluded IP get-excluded-routes Get the list of excluded routes get-included-routes Get the list of included routes get-excluded-hosts Get the list of excluded hosts get-included-hosts Get the list of included hosts add-excluded-host Add an excluded host remove-excluded-host Remove an excluded host add-fallback-domain Add a domain that should be resolved with the fallback resolver instead of WARP\u0026#39;s remove-fallback-domain Stop a domain from being resolved with the fallback resolver get-fallback-domains Get the list of domains that go to the fallback resolver restore-fallback-domains Restore the list of fallback resolver domains to its default value get-device-posture Get the current device posture override Temporarily override MDM policies that require the client to stay enabled set-proxy-port Set the listening port for WARP proxy (127.0.0.1:{port}) is-mode-switch-allowed Outputs true if Teams users should be able to change connection mode, or false if not reset-settings Restore settings to default get-organization Get the name of the Teams organization currently in settings access-reauth Force refresh authentication with Cloudflare Access get-support-url Get the support url for the current Teams organization get-pause-end Retrieve the pause end time get-override-end Retrieve the admin override end time disable-connectivity-checks Disable the runtime connectivity checks enable-connectivity-checks Enable the runtime connectivity checks dump-excluded-routes Get split tunnel routing dump. For include-only mode, this shows routes NOT included get-alternate-network Get the name of the currently detected alternate network, if any get-dex-data Get the most recently uploaded DEX data. Returns the most recent test for each dex metric help Print this message or the help of the given subcommand(s) Options: -l, --listen Listen for status changes and DNS logs (if enabled) --accept-tos Accept the Terms of Service agreement -v, --verbose... Enable verbose output. Multiple \u0026#34;v\u0026#34;s adds more verbosity -h, --help Print help -V, --version Print version 命令中文版 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 用法：warp-cli [选项] \u0026lt;命令\u0026gt; 命令： register 注册到 WARP API，替换任何现有的注册（必须在首次连接之前运行！） teams-enroll 注册到 Cloudflare for Teams delete 删除当前注册 rotate-keys 生成新的密钥对，保留当前注册 status 请求守护进程发送当前状态 warp-stats 检索当前 WARP 连接的统计信息 warp-dns-stats 检索当前 WARP 连接的 DNS 统计信息 settings 检索当前应用程序设置 connect 尽可能连接到 WARP [别名：enable-always-on] disconnect 断开与 WARP 的连接 [别名：disable-always-on] disable-wifi 在 Wi-Fi 网络上自动禁用 WARP（对于 Zero Trust 客户禁用） enable-wifi 允许在 Wi-Fi 网络上使用 WARP（对于 Zero Trust 客户禁用） disable-ethernet 在以太网网络上自动禁用 WARP（对于 Zero Trust 客户禁用） enable-ethernet 允许在以太网网络上使用 WARP（对于 Zero Trust 客户禁用） add-trusted-ssid 添加一个受信任的 Wi-Fi 网络，WARP 将自动断开连接 remove-trusted-ssid 移除一个受信任的 Wi-Fi 网络 exclude-private-ips 从隧道中排除私有 IP 范围 enable-dns-log 启用 DNS 日志记录（与 -l 选项一起使用） disable-dns-log 禁用 DNS 日志记录 account 显示与当前注册关联的帐户 devices 显示与当前注册关联的设备列表 network 显示当前网络信息 get-virtual-networks 列出可用的虚拟网络 set-virtual-network 设置当前连接的虚拟网络（使用 get-virtual-networks 返回的 ID） set-mode 设置模式 set-families-mode 设置家庭模式 set-license 使用许可证密钥将当前注册关联到不同的帐户 set-gateway 强制应用程序使用指定的网关 ID 进行 DNS 查询 clear-gateway 清除网关 ID set-custom-endpoint 强制客户端连接到指定的 IP:PORT 端点（Zero Trust 客户必须以特权用户身份运行此命令） clear-custom-endpoint 删除自定义端点设置 add-excluded-route 添加一个被排除的 IP remove-excluded-route 移除一个被排除的 IP get-excluded-routes 获取被排除的路由列表 get-included-routes 获取包含的路由列表 get-excluded-hosts 获取被排除的主机列表 get-included-hosts 获取包含的主机列表 add-excluded-host 添加一个被排除的主机 remove-excluded-host 移除一个被排除的主机 add-fallback-domain 添加一个应使用回退解析器而不是 WARP 进行解析的域名 remove-fallback-domain 停止使用回退解析器解析域名 get-fallback-domains 获取使用回退解析器的域名列表 restore-fallback-domains 将回退解析器域名列表恢复为默认值 get-device-posture 获取当前设备姿态 override 临时覆盖需要客户端保持启用的 MDM 策略 set-proxy-port 设置 WARP 代理的监听端口（127.0.0.1:{port}） is-mode-switch-allowed 如果 Teams 用户可以更改连接模式，则输出 true；如果不可以，则输出 false reset-settings 恢复设置为默认值 get-organization 获取当前设置中的 Teams 组织名称 access-reauth 强制刷新与 Cloudflare Access 的身份验证 get-support-url 获取当前 Teams 组织的支持网址 get-pause-end 检索暂停结束时间 get-override-end 检索管理员覆盖结束时间 disable-connectivity-checks 禁用运行时连接性检查 enable-connectivity-checks 启用运行时连接性检查 dump-excluded-routes 获取分隔隧道路由转储。对于仅包含模式，显示未包含的路由 get-alternate-network 获取当前检测到的备用网络名称（如果有） get-dex-data 获取最近上传的 DEX 数据。返回每个 dex 指标的最新测试 help 打印此消息或给定子命令的帮助信息 选项： -l, --listen 监听状态变化和 DNS 日志（如果已启用） --accept-tos 接受服务条款协议 -v, --verbose... 启用详细输出。多个 \u0026#34;v\u0026#34; 增加更多详细程度 -h, --help 打印帮助信息 -V, --version 打印版本 ","date":"2023-10-04T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310004/","title":"Debain12安装cloudflare-warp"},{"content":"Shell 概述 bash vs zsh\nbash:\nbash 作为众多 linux 发行版的默认shell，和它打交道的实在太频繁了。但是它有些不足的地方：\n别名很多需要自己定制（ Debian12 就连ll都没有） 默认样式太简陋，所以我曾经一度换到 zsh zsh： zsh 很强大！拥有超多的插件，增强的命令补全，界面美化等等优点。\n但是！使用 zsh 一段时间之后，我发现也有些问题，比如：\nzsh 下使用 reboot 没找到是肿么回事？也可能是我菜，最后还得自己把命令添加到.zshrc中，就是很多系统下 bash 换到 zsh 会找不到 把环境变量放到 /etc/profile或者 /etc/profile.d 文件夹下会不识别，导致一系列问题。 这就违背了初心，所以，既然 bash 是 众多 linux 发行版的默认 shell，那么是否有 bash 的增强工具呢？\n今天的主角 bash-it 就是我们需要的东西！\n简介 Bash-it 是一个为 Bash 3.2+ 版本提供的社区命令和脚本集合。（这也是对 oh-my-zsh 的无耻模仿 😃）\n它包括自动补全、主题、别名、自定义函数，以及一些来自 Steve Losh 的代码片段，等等。\nBash-it 为您日常工作中使用、开发和维护 shell 脚本和自定义命令提供了一个可靠的框架。如果您经常使用 Bourne Again Shell（Bash），并且一直在寻找一种简单的方法来管理这些小脚本和别名，那么 Bash-it 非常适合您！ 停止污染您的 ~/bin 目录和 .bashrc 文件，fork/clone Bash-it 并开始修改吧。\n源码：https://github.com/Bash-it/bash-it 官网：https://bash-it.readthedocs.io/en/latest/\n安装 （1）克隆仓库\n官方版本\n1 git clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it 我修改过后的版本（增加主题、修改了某些命令）\n1 git clone --depth=1 https://github.com/muyiacc/bash-it.git ~/.bash_it （2）安装\n1 ~/.bash_it/install.sh 这一步需要选择配置 .bashrc的策略：\n选择是的话会将 bash_it 的配置进行追加 否的话，会覆盖 .bashrc，并将 .bashrc复制一份为 .bashrc.bak 的备份 如果不是纯净的系统，环境中已经有一些软件的配置，选择 是\n安装之后，新开一个终端查看是否生效\n卸载 如果不想要了，跟着如下步骤卸载\n1 cd $BASH_IT \u0026amp;\u0026amp; ./uninstall.sh 主题 默认主题是 bobby\n默认主题比较花哨，包含的信息容易影响注意力，所以我换成了内置的主题 bakke，看着简洁很多又不失美感\n每次安装更换主题已经厌烦了，已经习惯了默认配置，果然默认就是最好的！\n更换主题的方式在 .bashrc文件下，搜索 BASH_IT_THEME关键字，更改后面的内容就可以了，如下：\n1 export BASH_IT_THEME=\u0026#39;bakke\u0026#39; 也可以使用这个命令快速替换\n1 2 sed -i \u0026#39;s/^export BASH_IT_THEME=.*/export BASH_IT_THEME=\u0026#34;bakke\u0026#34;/g\u0026#39; ~/.bashrc source ~/.bashrc 如果你使用的是我修改过后的版本，可以使用主题 seektao，这个主题未提交到主项目（提交很麻烦~）\n1 2 sed -i \u0026#39;s/^export BASH_IT_THEME=.*/export BASH_IT_THEME=\u0026#34;seektao\u0026#34;/g\u0026#39; ~/.bashrc source ~/.bashrc 样式如下： 关于其他主题，你可以打开这个网址进行查找和预览 https://bash-it.readthedocs.io/en/latest/themes-list/#list-of-themes\n更多主题：\n1 2 sed -i \u0026#39;s/^export BASH_IT_THEME=.*/export BASH_IT_THEME=\u0026#34;nwinkler\u0026#34;/g\u0026#39; ~/.bashrc source ~/.bashrc 1 2 sed -i \u0026#39;s/^export BASH_IT_THEME=.*/export BASH_IT_THEME=\u0026#34;bakke\u0026#34;/g\u0026#39; ~/.bashrc source ~/.bashrc 1 2 sed -i \u0026#39;s/^export BASH_IT_THEME=.*/export BASH_IT_THEME=\u0026#34;bobby\u0026#34;/g\u0026#39; ~/.bashrc source ~/.bashrc 1 2 sed -i \u0026#39;s/^export BASH_IT_THEME=.*/export BASH_IT_THEME=\u0026#34;atomic\u0026#34;/g\u0026#39; ~/.bashrc source ~/.bashrc 1 2 sed -i \u0026#39;s/^export BASH_IT_THEME=.*/export BASH_IT_THEME=\u0026#34;demula\u0026#34;/g\u0026#39; ~/.bashrc source ~/.bashrc 别名 bash-it 配置了很多别名，但是需要手动启用\n别名配置文件在\n1 ~/.bash_it/aliases/available 启用别名的方式为\n1 bash-it enable alias 更多 关于更多的信息可以查看 Github或者 Bash-it 官网\n","date":"2023-10-02T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310002/","title":"增强的bash命令行工具：bash-it"},{"content":"archlinux自动挂载windows的不同盘符（驱动器）\n1. 前言 1.1. 需求 双系统windows和archlinux，有时候在windows下编写的代码，在切换成archlinux后，这时需要编辑windows下的代码，但是使用之前，需要在文件管理器中输入密码，会自动挂载到 /run/media/用户名目录下，挂载的名字是windows驱动器的命名。一般来说，编辑器默认选择打开的目录就是用户家目录。由于挂载的目录不太常用，在打开目录的时候需要手动选择，不太方便。\n1.2. 解决思路 可以挂载到用户家目录下。在用户家目录创建一个以windows为名的目录，接着在windows 目录下创建驱动器的目录，将不同的驱动器挂载到相应的目录，如c盘驱动器的名字是base，d盘驱动器的名字是soft，d盘驱动器的名字是data，在windows目录下分别创建 base、soft、data三个目录。并分别挂载到它们。\n2. 解决过程 2.1. 创建目录 首先在家目录下创建挂载的目录点\n1 mkdir -p ~/windows/base \u0026amp;\u0026amp; mkdir -p ~/windows/soft \u0026amp;\u0026amp; mkdir -p ~/windows/data 挂载点分别为\n1 2 3 4 5 /home/koko/windows/base /home/koko/windows/soft /home/koko/windows/data # 以上目录分别对应着c盘，d盘，e盘 2.2. 安装ntfs-3g 为了解决挂载需要输入密码的问题，需要额外安装一个工具，名字叫做 ntfs-3g\n1 sudo pacman -S ntfs-3g 安装完成之后，编写开机自启的服务文件，放入 /etc/systemd/system/ ，文件名为 windows-mount.service\n1 2 3 4 5 6 7 8 9 10 11 12 [Unit] Description=Mount Windows Partition After=network-online.target Wants=network-online.target [Service] ExecStart=/usr/bin/mount -a Type=oneshot RemainAfterExit=yes [Install] WantedBy=default.target 保存退出后，启动并开启自启\n1 2 sudo systemctl enable windows-mount.service sudo systemctl start windows-mount.service 2.3. 编辑/etc/fstable文件 自动挂载目录可以编辑/etc/fsable文件，里面包含了挂载的信息，我的文件内容如下\n/etc/fstable\n1 2 3 4 5 6 7 8 9 10 11 12 [root@myarch ~]# cat /etc/fstab # /dev/nvme0n1p6 LABEL=myArch UUID=cea4c38b-f7eb-4690-a35b-d4b6e8506d4d / btrfs rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvolid=256,subvol=/@ 0 0 # /dev/nvme0n1p1 UUID=5F77-1EE1 /boot/efi vfat rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=ascii,shortname=mixed,utf8,errors=remount-ro 0 2 # /dev/nvme0n1p6 LABEL=myArch UUID=cea4c38b-f7eb-4690-a35b-d4b6e8506d4d /home btrfs rw,relatime,compress=zstd:3,ssd,discard=async,space_cache=v2,subvolid=257,subvol=/@home 0 0 # /dev/nvme0n1p5 UUID=0ca07983-0116-4006-aa45-04a2abb129e6 none swap defaults 0 0 关于/etc/fatable 文件各列的简单解释\n第一列是挂载的设备（可以填写设备label或者uuid） 第二列是挂载点。（必须是已经存在的目录） 第三列是分区的格式。（如ntfs、btrfs、ext2、ext3、nfs、vfat） 第四列是mount的挂载参数，一般情况下，直接写defaults即可。 第五列的数字表示是否被dump备份，是的话为1，不是为0。 第六列是开机时是否自检磁盘。1，2都表示检测，0表示不检测。但1，2表示不同的优先级，1更高。所以/ 分区必须设为1，而且整个fstab只允许出现一个1，若有多个分区需要检测，那么都设为2。 我们需要的就是在文件的后面继续添加挂载windows的配置\n挂载设备的label或者uuid可以通过blkid查看\n1 2 3 4 5 6 7 [root@myarch ~]# blkid /dev/nvme0n1p5: UUID=\u0026#34;0ca07983-0116-4006-aa45-04a2abb129e6\u0026#34; TYPE=\u0026#34;swap\u0026#34; PARTUUID=\u0026#34;b05fdaf2-9db0-424a-a133-b1874795e894\u0026#34; /dev/nvme0n1p3: LABEL=\u0026#34;soft\u0026#34; BLOCK_SIZE=\u0026#34;512\u0026#34; UUID=\u0026#34;64443273443247D6\u0026#34; TYPE=\u0026#34;ntfs\u0026#34; PARTLABEL=\u0026#34;Basic data partition\u0026#34; PARTUUID=\u0026#34;71911f30-8521-4624-a8e3-1cbac1090f45\u0026#34; /dev/nvme0n1p1: UUID=\u0026#34;5F77-1EE1\u0026#34; BLOCK_SIZE=\u0026#34;512\u0026#34; TYPE=\u0026#34;vfat\u0026#34; PARTLABEL=\u0026#34;EFI system partition\u0026#34; PARTUUID=\u0026#34;3589701f-9bee-4c72-b2e6-79e486eecff0\u0026#34; /dev/nvme0n1p6: LABEL=\u0026#34;myArch\u0026#34; UUID=\u0026#34;cea4c38b-f7eb-4690-a35b-d4b6e8506d4d\u0026#34; UUID_SUB=\u0026#34;06d834ba-5c70-4c39-b750-245fd8b3a4a0\u0026#34; BLOCK_SIZE=\u0026#34;4096\u0026#34; TYPE=\u0026#34;btrfs\u0026#34; PTTYPE=\u0026#34;PMBR\u0026#34; PARTUUID=\u0026#34;cd79b562-bd9c-e04e-b539-e2eedee44d44\u0026#34; /dev/nvme0n1p4: LABEL=\u0026#34;data\u0026#34; BLOCK_SIZE=\u0026#34;512\u0026#34; UUID=\u0026#34;F23E39943E395339\u0026#34; TYPE=\u0026#34;ntfs\u0026#34; PARTLABEL=\u0026#34;Basic data partition\u0026#34; PARTUUID=\u0026#34;8ee13aea-ebaa-4b0f-bf71-d30653055be3\u0026#34; /dev/nvme0n1p2: LABEL=\u0026#34;base\u0026#34; BLOCK_SIZE=\u0026#34;512\u0026#34; UUID=\u0026#34;3E2A25472A24FE11\u0026#34; TYPE=\u0026#34;ntfs\u0026#34; PARTLABEL=\u0026#34;Basic data partition\u0026#34; PARTUUID=\u0026#34;54d043d7-3703-4fb8-88d1-c288bedba407\u0026#34; 根据以上信息，追加的fstable文件内容为\n1 2 3 4 5 6 7 # windows # base UUID=3E2A25472A24FE11 /home/koko/windows/base ntfs-3g defaults,noauto,x-systemd.automount 0 0 # base UUID=64443273443247D6 /home/koko/windows/soft ntfs-3g defaults,noauto,x-systemd.automount 0 0 # base UUID=F23E39943E395339 /home/koko/windows/d ntfs-3g defaults,noauto,x-systemd.automount 0 0 至此，自动挂载不需要输入密码就完成了！\n","date":"2023-10-01T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2310001/","title":"archlinux自动挂载windows的不同盘符（驱动器）"},{"content":" https://myip4.ipip.net https://ddns.oray.com/checkip https://ip.3322.net https://4.ipw.cn ","date":"2023-09-17T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2309016/","title":"获取当前公网ip的接口"},{"content":"已经安装的应用 应用名称 安装方式 简介 是否启用 官方地址 是否开源 docker-flare docker-compose 导航页 是 https://github.com/soulteary/docker-flare 是 halo docker-compose 优秀的博客系统 是 https://halo.run/ 是 nginx proxy manager docker-compose nginx的web管理工具 是 https://github.com/NginxProxyManager/nginx-proxy-manager 是 alist docker-compose 网盘聚合工具 是 https://github.com/alist-org/alist 是 cloudreve 程序安装 开源网盘 是 https://github.com/cloudreve/Cloudreve 是 MrDoc docker-compose 在线文档系统 否 https://github.com/zmister2016/MrDoc 是 Jupyter Lab 程序安装 Jupyter Lab 否 教程 http://t.csdn.cn/rocxW / YesPlayMusic docker 高颜值的第三方网易云播放器 是 https://github.com/qier222/YesPlayMusic 是 it-tools docker it人员的工具 是 https://github.com/CorentinTh/it-tools 是 TODO 应用名称 简介 官方地址 koodo-reader 一个跨平台的电子书阅读器 https://github.com/troyeguo/koodo-reader ddns-go 简单好用的DDNS https://github.com/jeessy2/ddns-go ","date":"2023-09-16T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2309015/","title":"服务器安装的应用以及TODO"},{"content":"在用git拉取别人的前端项目之后\n通过命令行进入项目的根目录\nnpm install 安装依赖\n然后查看 package.json 文件\n例如：\n1 2 3 4 5 6 7 { \u0026#34;name\u0026#34;: \u0026#34;your-project-name\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;serve\u0026#34;: \u0026#34;vue-cli-service serve\u0026#34; } } 启动vue项目的命令就为 npm run serve\n也就是跟如下代码中有关\n1 2 3 \u0026#34;scripts\u0026#34;: { \u0026#34;serve\u0026#34;: \u0026#34;vue-cli-service serve\u0026#34; } ","date":"2023-09-15T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2309014/","title":"对于没有使用过vue的人，如何快速运行其他人的vue项目"},{"content":" 本文编辑于 2023-09-15\n作者：muyiacc\nGithub: https://github.com/muyiacc\nCSDN: https://blog.csdn.net/muyiacc\nBlog: https://www.seektao.cc/\n使用环境：Debian11\n1. 前言 在此之前，笔者使用过 Java 编写的 halo博客，这个博客很热门，但是它内存占用很大，\n关于内存占用的情况：\n配合使用MySQL数据库占用大概800M，一个MySQL 服务内存将近300M。可怕~~~~~~~~。\n配合使用 Porstgresql 数据库占用550M内存左右，数据库占用内存大概有40M\n这里插一句，Porstgresql最近也是如日中天的发展。强~\n尽管如此，这对个人使用来说是不友好的，个人服务器资源宝贵，占用太多就不好安装其他服务了，所以需要替换。关于halo占用内存截图如下：\n![image-20230915082648713](https://gitee.com/muyiacc/typora-img/raw/master/2023/2023-09-15 08-27-06_image-20230915082648713.png)\n加上最近在学习Golang，这语言感觉确实强，占用内存极低，效率极高。\n所以在GitHub上找到了一个开源，由Golang编写的博客系统 sonic，安装启动后查看只有50M不到的内存占用，顺道学习 Golang。\n地址 https://github.com/go-sonic/sonic\n这个博客系统已经有 1.7K 的star了 ，应该还不错，今天拿来安装使用使用，接下来开始安装过程吧。\n2. 搭建sonic 截止到笔者安装时期，最新版为1.1.1。\n2.1. 下载 1 wget https://github.com/go-sonic/sonic/releases/download/v1.1.1/sonic-linux-amd64.zip 如果网络不通，请自寻解决办法~~\n2.2. 解压 因为是zip格式，所以需要用 unzip解压，笔者一般接触的都是tar.gz格式，这里解压的时候有坑\n这个坑为：unzip解压缩时会将压缩包的文件列表直接输出，不会自动创建以压缩包为名字的目录\n1 2 # 解压命令为 mkdir ~/opt/sonic/ \u0026amp;\u0026amp; unzip -d ~/opt/sonic/ sonic-linux-amd64.zip unzip语法格式:\nunzip [参数] 压缩包名\n参数：\n-d 路径 将压缩包的所有文件列表解压缩到指定路径，不会自动创建以目录\n上述的路径请根据你自己的情况修改。\n解压之后的文件列表为\n1 2 3 4 conf # 配置文件夹 resources # 资源文件夹 sonic # 程序执行入口 systemd # 提供的示例 systemd 服务文件，用于systemctl 启动程序 根据以上的目录，可以看出作者还有很有心的。\n2.3. 启动 以下启动方式可任选其一\n默认启动 如果你不想做任何修改，在解压的目录执行\n1 ./sonic -config conf/config.yaml 接着控制台会打印如下信息\n1 2 Sonic started at http://127.0.0.1:8080 Sonic admin started at http://127.0.0.1:8080/admin 默认端口为 8080，通过浏览器，访问 ip:8080 即可\n后台启动 1 nohup ./sonic -config conf/config.yaml \u0026amp; 到这一步默认就基本完成了。如果你想更加详细的了解sonic，请继续阅读\n3. sonic的详细配置（可选） 3.1. conf conf文件夹是启动的配置文件\n内含两个yaml文件，一个是 config.dev.yaml 一个是 config.yaml\n我们修改 config.yaml 即可。\n查看内容，如图所示：\n![image-20230915105457674](https://gitee.com/muyiacc/typora-img/raw/master/2023/2023-09-15 10-54-59_image-20230915105457674.png)\n默认端口为8080，我已修改为8090，上述的配置都有中文说明，可根据情况进行修改。\n3.2. resources 存放的前端ui相关的资源\n如果你会前端，可自行编辑\n3.3. sonic.db 数据库文件，sqlite3\n3.4. systemd systemd 服务脚本，可用于systemd 服务\n编写systemd 服务， 目前有问题，建议使用后台启动，以下内容只做参考\n在 systemd 目录下，有提供的sonic.service文件，我们对它稍作修改，\n1 2 3 4 5 6 7 8 9 10 11 12 13 [Unit] Description=Go-Sonic Service Documentation=https://github.com/go-sonic/sonic After=network.target nss-lookup.target [Service] User=nobody # 启动服务的用户名 ExecStart=/your_path/sonic -config /your_path/conf/config.yaml # 启动程序的路径 Restart=on-failure RestartPreventExitStatus=23 [Install] WantedBy=multi-user.target% 笔者的配置\n1 2 3 4 5 6 7 8 9 10 11 12 13 [Unit] Description=Go-Sonic Service Documentation=https://github.com/go-sonic/sonic After=network.target nss-lookup.target [Service] User=ecs-user ExecStart=/home/ecs-user/opt/sonic/sonic -config /home/ecs-user/opt/sonic/conf/config.yaml Restart=on-failure RestartPreventExitStatus=23 [Install] WantedBy=multi-user.target 接着复制到 /usr/lib/systemd/system 路径下\n1 sudo cp sonic.service /usr/lib/systemd/system 启动服务\n1 2 3 4 5 6 7 8 9 # systemctl服务 # 查看状态 systemctl status sonic # 启动服务 sudo systemctl start sonic # 停止服务 sudo systemctl stop sonic # 开机自启 sudo systemctl enable sonic 4. 使用截图 4.1. 主页 ![image-20230915110159610](https://gitee.com/muyiacc/typora-img/raw/master/2023/2023-09-15 11-02-01_image-20230915110159610.png)\n4.2. 后台 仪表盘 ![image-20230915110318849](https://gitee.com/muyiacc/typora-img/raw/master/2023/2023-09-15 11-03-20_image-20230915110318849.png)\n文章 ![image-20230915110402695](https://gitee.com/muyiacc/typora-img/raw/master/2023/2023-09-15 11-04-04_image-20230915110402695.png)\n5. 结语 写到这里，才发现和 halo后台如此相似，去看官网的 issues ，应该是从halo后台移植的，但是占据了Golang的优势，占用内存和使用效率却大大提高了，不得不说，Golang，确实强~~\n分享到此结束。\n","date":"2023-09-14T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2309013/","title":"基于Golang编写的开源博客系统sonic，内存占用极低！！替代halo"},{"content":"本次介绍 github上面一个激活 Windows和Office（支持Office365） 的脚本，拥有 stat 41.1k\n支持 Windows 8.1/10/11\n地址 https://github.com/massgravel/Microsoft-Activation-Scripts\n有两种方法激活\n方法一 （推荐） 打开 powershell (win+x再按a)， 执行以下命令\n新命令\n1 irm https://get.activated.win | iex 旧命令\n1 irm https://massgrave.dev/get | iex 激活Office365 Office365需要先去下载，离线版下载地址：\n123：https://www.123pan.com/s/4MOKVv-NnPpd.html提取码:pole 下载安装完成之后在 Powshell 运行\n新命令\n1 irm https://get.activated.win | iex 旧命令\n1 irm https://massgrave.dev/get | iex 按照提示激活\n打开Office365的软件验证，比如Word，打开Word，选择账户，可以看到订阅的产品。\n方法二 下载 激活脚本 ， 并解压\n解压后找到 All-In-One-Version 文件夹\n执行 MAS_AIO.cmd\n","date":"2023-09-13T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2309012/","title":"一条命令激活Windows和Office"},{"content":"Windows命令行下对文件做MD5校验\n按【win】+R键来打开运行cmd命令行窗口\n进入cmd命令行界面，使用如下命令做MD5校验：\n1 CertUtil -hashfile C:\\xxx.tar MD5 此命令还可以支持其他的哈希算法，具体如下：\n1 CertUtil -hashfile 文件路径 算法 支持的算法有：MD2 MD4 MD5 SHA1 SHA256 SHA384 SHA512\n","date":"2023-09-12T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2309011/","title":"Windows命令行下对文件做MD5校验"},{"content":"需求 现在 MySQL5.7 和 8.0 版本用的人和需求都有，为了能让电脑上同时安装 MySQL5.7 和 MySQL8.0 版本\n准备 MySQL 可选择版本的下载地址：https://downloads.mysql.com/archives/community/\n也可通过以下链接直接下载 zip 安装包\nMySQL5.7：https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.41-winx64.zip\nMySQL8.0：https://downloads.mysql.com/archives/get/p/23/file/mysql-8.0.33-winx64.zip\n安装之前请确保环境的干净，如果需要卸载请网上搜索教程\nMySQL5.7 安装 解压安装包 解压下载好的安装包，建议不要使用中文路径\n新建 my.ini 文件\n在解压的目录新建 my.ini 文件，这是 MySQL 的配置文件，通过 zip 安装需要手动指定数据存储的路径\nmy.ini 的配置内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 [client] port = 3306 [mysqld] #设置3306端口 port = 3306 # 设置mysql的安装目录 tips:这里的目录是你自己的安装目录，这个是我的安装目录 basedir=D:\\\\Development\\\\DB\\\\mysql-5.7.41-winx64 # 设置mysql数据库的数据的存放目录 tips:同上一条 datadir=D:\\\\Development\\\\DB\\\\mysql-5.7.41-winx64\\\\data # 允许最大连接数 max_connections=200 # 服务端使用的字符集默认为8比特编码的latin1字符集 character-set-server=utf8mb4 # 创建新表时将使用的默认存储引擎 default-storage-engine=INNODB #这个需要注意一下，不然报错 #其原因是从 5.6开始，timestamp 的默认行为已经是 deprecated 了。 explicit_defaults_for_timestamp=true [mysql] # 设置mysql客户端默认字符集 default-character-set=utf8mb4 初始化 MySQL 文件管理器打开安装目录， shift+右键 ，选择 在此处打开 Powershell 窗口\n现在已经切换到了 powershell，先切换到 bin 目录，再执行以下命令进行初始化\n1 .\\mysqld.exe --initialize --user=mysql --console 记住初始化密码，后续登录 MySQL 会用到\n安装 MySQL 服务 通过以下命令安装 MySQL 服务，这个命令需要管理员权限\n通过 win+x 选择用管理员权限打开 powershell，再切换到 MySQL 目录\n在原来的 powershell 窗口下，输入 pwd ，控制台就会输出 当前所在的路径\n然后在管理员权限下的 powershell 切换过去，使用cd 路径\n1 cd D:\\Development\\DB\\mysql-5.7.41-winx64\\bin 接着执行以下命令\n1 .\\mysqld.exe --install MySQL57 --defaults-file=\u0026#34;D:\\\\Development\\\\DB\\\\mysql-5.7.41-winx64\\\\my.ini\u0026#34; 注意：你需要修改为你自己的路径，除非和我一样。\n修改密码 在保证前面步骤没有出错的情况下，启动 MySQL 服务，登录 MySQL，修改密码，然后就大功告成\n启动 MySQL 服务（需要管理员权限）\n1 net start MYSQL57 登录 MySQL，回车输入密码，密码是前面生成的随机密码，已经提醒过保存下来\n1 .\\mysql.exe -u root -p 修改密码\n1 set password=\u0026#39;新密码\u0026#39; 1 set password=\u0026#39;root\u0026#39; 配置环境变量 复制安装路径，windows+R 打开运行，输入 sysdm.cpl 回车，\n选择 高级打开 环境变量，\n选中 系统变量 Path，点击 编辑，再点击 新建，输入：\n1 %MYSQL_HOME%\\bin 再点击 确定 保存（注意返回上一级也要保存，否则可能保存不成功）\n至此结束。。\n","date":"2023-09-11T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2309010/","title":"Windows10安装多版本MySQL"},{"content":"网络上收集的一些tracker列表\nGitHub开源仓库：\nhttps://github.com/ngosang/trackerslist\n站点\nhttps://trackerslist.com/#/zh\nhttps://cf.trackerslist.com\n中国可用的 BT Tracker 服务器列表，每24小时自动更新\nhttps://www.yaozuopan.top/index.php/archives/1014/\ntracker 列表\nhttps://trackerslist.com/all.txt\nhttps://gitee.com/harvey520/www.yaozuopan.top/raw/master/blacklist.txt\nhttps://cf.trackerslist.com/best.txt\n","date":"2023-09-09T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2309008/","title":"tracker列表"},{"content":"概述 作为一个开发人员，使用 Linux 实在是太频繁了，无论是观看别人程序的脚本，还是自己编写脚本，都离不开 Shell，所以这篇文章总结一下\n什么是 shell？\nShell 是一个连接用户和操作系统内核（Kernel）的桥梁。Shell 是一个命令行解释器（Command-Line Interpreter）。它接收你输入的命令，将其翻译成内核能理解的指令，然后让内核去执行。执行完毕后，Shell 再把结果（通常是文本）返回并显示在你的屏幕上。\n所以，你打开的那个黑乎乎的、可以输入命令的窗口（通常称为“终端”或“控制台”），里面运行的就是 Shell 程序。\n常见的 Shell 类型\nShell 并非只有一种，它有许多不同的实现版本，各自具有不同的特性。最常见的有：\nBash (Bourne-Again Shell)：这是最流行、最通用的 Shell，是绝大多数 Linux 发行版的默认 Shell，在 macOS 的旧版本中也是默认 Shell。它功能强大，易于学习。我们通常说的 “Shell 编程” 或 “Shell 脚本”，指的基本上就是 Bash。 Zsh (Z Shell)：一个功能比 Bash 更强大的 Shell。它提供了更智能的自动补全、拼写纠错、更灵活的定制和丰富的主题（通过 Oh My Zsh 等框架）。现在是 macOS 的默认 Shell，也受到越来越多 Linux 用户的喜爱。 sh (Bourne Shell)：一个非常古老的、经典的 Shell，是许多现代 Shell 的祖先。在很多系统中，/bin/sh 实际上是一个指向 Bash 或其他兼容 Shell 的链接。编写脚本时，为了保证最大的可移植性，有时会遵循 sh 的标准。 入门简介 解释器 Linux 中，解析脚本的是命令解释器，也就是终端解释器，如 Bash、Zsh。\n在脚本中常见的头部声明如：\n1 #!/bin/bash 或者\n1 #!/bin/zsh 一般情况下 Linux 默认解释器是 bash\n查看所有支持的 shell\n1 cat /etc/shells 临时进入 解释器的方法为 exec 解释器\nexec /bin/bash exec /bin/zsh 查看当前解释器：echo $SHELL\n脚本格式 脚本以 #!解释器 为开头\n1 2 #!/bin/bash # 脚本内容 按照习惯，bash 对应的脚本文件的后缀一般是 .sh 结尾，而 zsh 对应的脚本文件以 .zsh 结尾，当然，这不是必须的。\n例如：在家目录新建目录 bin, 继续在 bin 目录新建一个文件 test1.sh\n1 2 3 4 5 mkdir $HOME/bin cd $HOME/bin touch test.sh 1 vim test1.sh 1 2 #! /bin/sh echo \u0026#34;我的解释器为 $SHELL\u0026#34; 脚本执行方式 在新建 test1.sh 之后，如何执行呢？\n方式 1 1 解释器 脚本路径 脚本的路径可使用相对路径也可以使用绝对路径\n例如\n1 2 3 4 # 切换到 bin 目录 cd $HOME/bin # 相对路径 sh test1.sh 1 2 # 绝对路径，不用切换到对应目录 sh ~/bin/test1.sh 执行结果\n1 我的解释器为 /bin/bash 方式 2 对脚本增加可执行权限\n1 chmod +x test1.sh 直接运行脚本\n1 $HOme/bin/test1.sh 执行结果\n1 我的解释器为 /bin/bash 变量 Shell 中可以设置变量，变量表示了一些值，通过特定的字符加特定的方式可以表达出来\n如系统默认的变量：\nSHELL：当前用户的解释器 USER：当前用户 HOME：当前用户的家目录 查看这些变量的值只需要 echo $变量名即可：\n1 2 3 4 echo $SHELL 输出结果： /bin/bash 1 2 3 4 echo $USER 输出结果： ecs-user 1 2 3 4 echo $HOME 输出结果： /home/ecs-user 系统变量 系统变量，顾名思义，就是系统自带的变量\n除了已经介绍过的SHELL、USER、HOME等外，还有如：\n1 2 3 4 5 6 7 8 9 10 11 PATH：环境变量，包含了可执行文件的搜索路径。 BASH_VERSION：Bash shell的版本信息。 PWD：当前工作目录的绝对路径。 LANG：系统的语言和字符集设置。 TERM：终端类型。 LOGNAME：当前登录的用户名。 HISTSIZE：命令历史记录的数量。 LINES：终端的行数。 USER：非root用户的用户名。 UID：用户ID（root用户为0）。 GID：组ID（root用户为0）。 使用env命令查看当前系统定义的所有环境变量\n使用set命令显示所有本地定义的 Shell 变量\n自定义变量 除了系统自带的系统变量以外，用户还可以自定义属于自己的变量\n基本语法：\n定义变量：变量名=变量值，等号两边不能有空格 撤销变量：unset 变量名 静态变量：readonly 变量名，静态变量不可撤销 全局变量：export 变量名 变量命名规则\n必须以字母（a-z、A-Z）或下划线（_）开头 区分大小写，环境变量命名建议大写 不能是内置命令或关键字 长度不能超过 99 个字符 不能包含空格或其他特殊字符 变量小贴士\n变量默认类型都是字符串类型，无法直接进行数值运算 变量的值如果有空格，需要使用双引号或单引号括起来 特殊变量 除了系统变量，自定义变量，还有一些特殊的变量，它们经常在 shell 脚本中使用\n$n n 代表是数字，如 0、1、2、3，\u0026hellip;，在大于 9 后，需要用 {} 包裹，如 ${10}\n$0：表示当前脚本的名称或路径\n如：\nexample.sh\n1 2 #!/bin/bash echo \u0026#34;this script name is $0\u0026#34; 执行脚本\n1 sh example.sh 输出内容\n1 this script name is example.sh 脚本 2\n1 2 #!/bin/bash echo \u0026#34;this script name is $0, parms is: $1 $2 $3 $4\u0026#34; 执行脚本\n1 sh example2.sh i love shell 输出结果\n1 this script name is example2.sh, parms is: i love shell 这里第 4 个参数，没有赋予，结果也没有显示\n$# $#：获取所有输入参数的个数\n1 2 #!/bin/bash echo \u0026#34;params count: $#\u0026#34; 运行\n1 sh example3.sh this is a examle 运行结果\n1 params count: 4 $*、$@ $*：代表命令行中所有的参数，把所有的参数看成一个整体 $@：代表命令行中所有的参数，把每个参数区分对待 例：\nexample4.sh\n1 2 3 4 5 #!/bin/bash echo \u0026#39;----- $@ -----\u0026#39; echo $@ echo \u0026#39;----- $* -----\u0026#39; echo $* 运行\n1 sh example4.sh i love shell 运行结果\n1 2 3 4 ----- $@ ----- i love shell ----- $* ----- i love shell $? $?：返回上一次执行结果的状态，如果为 0，表示正确执行，如果非 0，表示不正确执行\n例如：\nexample5.sh\n1 2 3 4 5 #!/bin/bash echo \u0026#39;----- $? -----\u0026#39; echo $? num = 10 echo $? 运行\n1 sh example5.sh 运行结果\n1 2 3 4 ----- $? ----- 0 example5.sh: 4: num: not found 127 结果解释\n0：表示前一个命令 echo '----- $? -----' 运行成功了 127：因为num = 10 变量赋值之间有空格，失败了，所以后面的 echo $?输出了一个非 0 数字 运算符 shell 中有运算表达式，可以进行运算\n语法：\n$((运算表达式)) $[ 运算表达式 ]：注意左右空格 例 1：\nshell03_01.sh\n1 2 #!/bin/bash echo $((1+1)) 运行\n1 sh shell03_01.sh 运行结果\n1 2 例 2：\nshell03_02.sh\n1 2 #!/bin/bash echo $[ 1+1 ] 运行，注意是 bash\n1 bash shell03_02.sh 运行结果\n1 2 条件判断 shell 支持多种条件判断的方式\nif\u0026hellip;else case..when ","date":"2023-09-08T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/shell/","title":"Shell编程指南"},{"content":"pandora-潘多拉魔盒，一个提供免翻的方式访问openai提供的gpt\n官方地址：https://github.com/pengzhile/pandora\n本次介绍如何如何使用docker的方式部署pandora\n1 2 3 4 # 拉取镜像 docker pull pengzhile/pandora # 创建容器 docker run -e PANDORA_CLOUD=cloud -e PANDORA_SERVER=0.0.0.0:8811 -p 8811:8811 -d --name pandora pengzhile/pandora 上面的端口可自定替换\n部署成功之后，请开放服务器上的安全组\n接着就可以通过 ip:port 的方式访问\n总结：这个项目我觉得最大的用处就是不用通过技术手段访问openai\n最后：附上我已经搭建好的地址：https://gpt.seektao.cc\nps: 访问需要自己的open账号\n","date":"2023-09-07T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2309005/","title":"pandora-免翻访问gpt"},{"content":"HOME：用户的主目录，通常是/home/用户名。 USER：当前登录的用户名。 PATH：环境变量，包含了可执行文件的搜索路径。 BASH_VERSION：Bash shell的版本信息。 PWD：当前工作目录的绝对路径。 SHELL：当前使用的shell类型（如bash、zsh等）。 LANG：系统的语言和字符集设置。 TERM：终端类型。 LOGNAME：当前登录的用户名。 MAIL：用户的邮件地址。 HISTSIZE：命令历史记录的数量。 EDITOR：默认的文本编辑器。 PS1：命令提示符的格式。 LD_LIBRARY_PATH：动态链接库的搜索路径。 LD_PRELOAD：动态链接库的预加载设置。 HOSTNAME：主机名。 IP_ADDRESS：本地IP地址。 IPV6_ADDRESS：IPv6地址。 IFS：内部字段分隔符。 COLUMNS：终端的列数。 LINES：终端的行数。 USER：非root用户的用户名。 UID：用户ID（root用户为0）。 GID：组ID（root用户为0）。 OPIE：是否启用OpenPGP加密支持。 RUNLEVEL：运行级别。 PS1、PS2、PS3：自定义命令提示符的前缀、后缀和中间部分。 EDITOR、VISUAL：自定义文本编辑器和可视化编辑器。 MANPATH：手册页的搜索路径。 MYTMPDIR：临时文件目录。 TMPDIR：临时目录。 TMUX_PANE：当前活动的tmux面板。 TMUX_WINDOW：当前活动的tmux窗口。 TMUX_STATUS：当前活动的tmux状态。 TMUX_PID：当前活动的tmux进程ID。 TMUX_SERVER：当前活动的tmux服务器。 TMUX_PORT：当前活动的tmux端口。 TMUX_LISTEN_ADDRESS：当前活动的tmux监听地址。 TMUX_UNIX_SOCKET：当前活动的tmux Unix套接字。 TMUX_WINDOWS_SOCKET：当前活动的tmux Windows套接字。 TMUX_PID：当前活动的tmux进程ID。 TMUX_SERVER：当前活动的tmux服务器。 TMUX_PORT：当前活动的tmux端口。 TMUX_LISTEN_ADDRESS：当前活动的tmux监听地址。 TMUX_UNIX_SOCKET：当前活动的tmux Unix套接字。 TMUX_WINDOWS_SOCKET：当前活动的tmux Windows套接字。 TMUX_VERSION：当前活动的tmux版本。 TMUX_CONFIG_FILE：当前活动的tmux配置文件路径。 TMUX_DEFAULT_COMMAND：当前活动的tmux默认命令。 TMUX_CURRENT_COMMAND：当前活动的tmux当前命令。 ","date":"2023-09-05T14:07:10+08:00","permalink":"https://hublog.netlify.app/p/2309003/","title":"Linux系统的系统变量合集"},{"content":"debian物理机安装提示缺少网卡固件，ath10k/cal-pci-0000:01:00.0.bin，ath10k/pre-cal-pci-0000:01:00.0.bin解决办法\n使用离线dvd镜像安装，先跳过安装固件这个步骤。\n正常安装完系统后，再使用wifi联网，因为缺乏这个固件的问题，会导致wifi连接后，过一会就上不了网，所以在连上wifi后，及时安装固件\n在终端执行\n1 sudo apt install firmware-atheros 重启系统。\n","date":"2023-09-03T14:12:15+08:00","permalink":"https://hublog.netlify.app/p/2309001/","title":"Debian物理机安装提示缺少网卡固件解决办法"}]